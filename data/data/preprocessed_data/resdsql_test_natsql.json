[
  {
    "db_id": "concert_singer",
    "input_sequence": "How many singers do we have? | singer : singer.singer_id , singer.name , singer.country , singer.age , singer.song_name , singer.* | singer_in_concert : singer_in_concert.singer_id , singer_in_concert.concert_id , singer_in_concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.singer_id",
      "singer.name",
      "singer.country",
      "singer.age",
      "singer.song_name",
      "singer.*",
      "singer_in_concert.singer_id",
      "singer_in_concert.concert_id",
      "singer_in_concert.*",
      "stadium.location",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.lowest",
      "stadium.*",
      "concert.theme",
      "concert.year",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "What is the total number of singers? | singer : singer.singer_id , singer.name , singer.country , singer.age , singer.song_name , singer.* | singer_in_concert : singer_in_concert.singer_id , singer_in_concert.concert_id , singer_in_concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.singer_id",
      "singer.name",
      "singer.country",
      "singer.age",
      "singer.song_name",
      "singer.*",
      "singer_in_concert.singer_id",
      "singer_in_concert.concert_id",
      "singer_in_concert.*",
      "stadium.location",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.lowest",
      "stadium.*",
      "concert.theme",
      "concert.year",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "Show name, country, age for all singers ordered by age from the oldest to the youngest. | singer : singer.name , singer.age , singer.country , singer.is_male , singer.singer_id , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.singer_id , singer_in_concert.concert_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.name",
      "singer.age",
      "singer.country",
      "singer.is_male",
      "singer.singer_id",
      "singer.*",
      "stadium.location",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.lowest",
      "stadium.*",
      "concert.theme",
      "concert.year",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*",
      "singer_in_concert.singer_id",
      "singer_in_concert.concert_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "What are the names, countries, and ages for every singer in descending order of age? | singer : singer.name , singer.country , singer.age , singer.is_male , singer.singer_id , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.name",
      "singer.country",
      "singer.age",
      "singer.is_male",
      "singer.singer_id",
      "singer.*",
      "stadium.location",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.lowest",
      "stadium.*",
      "concert.theme",
      "concert.year",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "What is the average, minimum, and maximum age of all singers from France? | singer : singer.country ( France ) , singer.age , singer.name , singer.is_male , singer.singer_id , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.country",
      "singer.age",
      "singer.name",
      "singer.is_male",
      "singer.singer_id",
      "singer.*",
      "stadium.location",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.lowest",
      "stadium.*",
      "concert.theme",
      "concert.year",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "What is the average, minimum, and maximum age for all French singers? | singer : singer.age , singer.country , singer.name , singer.is_male , singer.singer_id , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.age",
      "singer.country",
      "singer.name",
      "singer.is_male",
      "singer.singer_id",
      "singer.*",
      "stadium.location",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.lowest",
      "stadium.*",
      "concert.theme",
      "concert.year",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "Show the name and the release year of the song by the youngest singer. | singer : singer.song_release_year , singer.song_name , singer.age , singer.name , singer.country , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.song_release_year",
      "singer.song_name",
      "singer.age",
      "singer.name",
      "singer.country",
      "singer.*",
      "stadium.location",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.lowest",
      "stadium.*",
      "concert.theme",
      "concert.year",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "What are the names and release years for all the songs of the youngest singer? | singer : singer.song_release_year , singer.song_name , singer.name , singer.age , singer.country , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.song_release_year",
      "singer.song_name",
      "singer.name",
      "singer.age",
      "singer.country",
      "singer.*",
      "stadium.location",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.lowest",
      "stadium.*",
      "concert.theme",
      "concert.year",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "What are all distinct countries where singers above age 20 are from? | singer : singer.country , singer.age , singer.name , singer.song_name , singer.is_male , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.country",
      "singer.age",
      "singer.name",
      "singer.song_name",
      "singer.is_male",
      "singer.*",
      "stadium.location",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.lowest",
      "stadium.*",
      "concert.theme",
      "concert.year",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "What are  the different countries with singers above age 20? | singer : singer.country , singer.age , singer.name , singer.song_name , singer.is_male , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.country",
      "singer.age",
      "singer.name",
      "singer.song_name",
      "singer.is_male",
      "singer.*",
      "stadium.location",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.lowest",
      "stadium.*",
      "concert.theme",
      "concert.year",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "Show all countries and the number of singers in each country. | singer : singer.country , singer.name , singer.age , singer.singer_id , singer.song_name , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.country",
      "singer.name",
      "singer.age",
      "singer.singer_id",
      "singer.song_name",
      "singer.*",
      "stadium.location",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.lowest",
      "stadium.*",
      "concert.theme",
      "concert.year",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "How many singers are from each country? | singer : singer.country , singer.name , singer.age , singer.singer_id , singer.song_name , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.singer_id , singer_in_concert.concert_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.country",
      "singer.name",
      "singer.age",
      "singer.singer_id",
      "singer.song_name",
      "singer.*",
      "stadium.location",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.lowest",
      "stadium.*",
      "concert.theme",
      "concert.year",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*",
      "singer_in_concert.singer_id",
      "singer_in_concert.concert_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "List all song names by singers above the average age. | singer : singer.song_name , singer.age , singer.name , singer.country , singer.song_release_year , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.song_name",
      "singer.age",
      "singer.name",
      "singer.country",
      "singer.song_release_year",
      "singer.*",
      "stadium.location",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.lowest",
      "stadium.*",
      "concert.theme",
      "concert.year",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "What are all the song names by singers who are older than average? | singer : singer.song_name , singer.age , singer.name , singer.country , singer.is_male , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.song_name",
      "singer.age",
      "singer.name",
      "singer.country",
      "singer.is_male",
      "singer.*",
      "stadium.location",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.lowest",
      "stadium.*",
      "concert.theme",
      "concert.year",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "Show location and name for all stadiums with a capacity between 5000 and 10000. | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "stadium.location",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.lowest",
      "stadium.*",
      "singer.name",
      "singer.country",
      "singer.age",
      "singer.singer_id",
      "singer.song_name",
      "singer.*",
      "concert.theme",
      "concert.year",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "What are the locations and names of all stations with capacity between 5000 and 10000? | stadium : stadium.capacity , stadium.location , stadium.name , stadium.highest , stadium.stadium_id , stadium.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "stadium.capacity",
      "stadium.location",
      "stadium.name",
      "stadium.highest",
      "stadium.stadium_id",
      "stadium.*",
      "singer.name",
      "singer.country",
      "singer.age",
      "singer.singer_id",
      "singer.song_name",
      "singer.*",
      "concert.theme",
      "concert.year",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "What is the maximum capacity and the average of all stadiums ? | stadium : stadium.capacity , stadium.average , stadium.lowest , stadium.highest , stadium.location , stadium.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "stadium.capacity",
      "stadium.average",
      "stadium.lowest",
      "stadium.highest",
      "stadium.location",
      "stadium.*",
      "singer.name",
      "singer.country",
      "singer.age",
      "singer.singer_id",
      "singer.song_name",
      "singer.*",
      "concert.theme",
      "concert.year",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "What is the average and maximum capacities for all stadiums ? | stadium : stadium.capacity , stadium.average , stadium.highest , stadium.lowest , stadium.location , stadium.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "stadium.capacity",
      "stadium.average",
      "stadium.highest",
      "stadium.lowest",
      "stadium.location",
      "stadium.*",
      "singer.name",
      "singer.country",
      "singer.age",
      "singer.singer_id",
      "singer.song_name",
      "singer.*",
      "concert.theme",
      "concert.year",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "What is the name and capacity for the stadium with highest average attendance? | stadium : stadium.name , stadium.capacity , stadium.highest , stadium.average , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.average",
      "stadium.lowest",
      "stadium.*",
      "concert.theme",
      "concert.year",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*",
      "singer.name",
      "singer.country",
      "singer.age",
      "singer.singer_id",
      "singer.song_name",
      "singer.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "What is the name and capacity for the stadium with the highest average attendance? | stadium : stadium.name , stadium.capacity , stadium.highest , stadium.average , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.average",
      "stadium.lowest",
      "stadium.*",
      "concert.theme",
      "concert.year",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*",
      "singer.name",
      "singer.country",
      "singer.age",
      "singer.singer_id",
      "singer.song_name",
      "singer.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "How many concerts are there in year 2014 or 2015? | concert : concert.year , concert.concert_name , concert.theme , concert.concert_id , concert.stadium_id , concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "concert.year",
      "concert.concert_name",
      "concert.theme",
      "concert.concert_id",
      "concert.stadium_id",
      "concert.*",
      "stadium.location",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.lowest",
      "stadium.*",
      "singer.name",
      "singer.country",
      "singer.age",
      "singer.singer_id",
      "singer.song_name",
      "singer.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "How many concerts occurred in 2014 or 2015? | concert : concert.year , concert.theme , concert.concert_name , concert.concert_id , concert.stadium_id , concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "concert.year",
      "concert.theme",
      "concert.concert_name",
      "concert.concert_id",
      "concert.stadium_id",
      "concert.*",
      "stadium.location",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.lowest",
      "stadium.*",
      "singer.name",
      "singer.country",
      "singer.age",
      "singer.singer_id",
      "singer.song_name",
      "singer.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "Show the stadium name and the number of concerts in each stadium. | stadium : stadium.name , stadium.stadium_id , stadium.location , stadium.highest , stadium.lowest , stadium.* | concert : concert.stadium_id , concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "stadium.name",
      "stadium.stadium_id",
      "stadium.location",
      "stadium.highest",
      "stadium.lowest",
      "stadium.*",
      "concert.stadium_id",
      "concert.theme",
      "concert.year",
      "concert.concert_id",
      "concert.concert_name",
      "concert.*",
      "singer.name",
      "singer.country",
      "singer.age",
      "singer.singer_id",
      "singer.song_name",
      "singer.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "For each stadium, how many concerts play there? | concert : concert.stadium_id , concert.theme , concert.year , concert.concert_name , concert.concert_id , concert.* | stadium : stadium.name , stadium.stadium_id , stadium.capacity , stadium.location , stadium.highest , stadium.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "concert.stadium_id",
      "concert.theme",
      "concert.year",
      "concert.concert_name",
      "concert.concert_id",
      "concert.*",
      "stadium.name",
      "stadium.stadium_id",
      "stadium.capacity",
      "stadium.location",
      "stadium.highest",
      "stadium.*",
      "singer.name",
      "singer.country",
      "singer.age",
      "singer.singer_id",
      "singer.song_name",
      "singer.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "Show the stadium name and capacity with most number of concerts in year 2014 or after. | stadium : stadium.name , stadium.capacity , stadium.stadium_id , stadium.highest , stadium.lowest , stadium.* | concert : concert.year , concert.stadium_id , concert.theme , concert.concert_id , concert.concert_name , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "stadium.name",
      "stadium.capacity",
      "stadium.stadium_id",
      "stadium.highest",
      "stadium.lowest",
      "stadium.*",
      "concert.year",
      "concert.stadium_id",
      "concert.theme",
      "concert.concert_id",
      "concert.concert_name",
      "concert.*",
      "singer.name",
      "singer.country",
      "singer.age",
      "singer.singer_id",
      "singer.song_name",
      "singer.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "What is the name and capacity of the stadium with the most concerts after 2013 ? | stadium : stadium.capacity , stadium.name , stadium.stadium_id , stadium.highest , stadium.lowest , stadium.* | concert : concert.year , concert.stadium_id , concert.theme , concert.concert_id , concert.concert_name , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "stadium.capacity",
      "stadium.name",
      "stadium.stadium_id",
      "stadium.highest",
      "stadium.lowest",
      "stadium.*",
      "concert.year",
      "concert.stadium_id",
      "concert.theme",
      "concert.concert_id",
      "concert.concert_name",
      "concert.*",
      "singer.name",
      "singer.country",
      "singer.age",
      "singer.singer_id",
      "singer.song_name",
      "singer.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "Which year has most number of concerts? | concert : concert.year , concert.theme , concert.concert_name , concert.concert_id , concert.stadium_id , concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "concert.year",
      "concert.theme",
      "concert.concert_name",
      "concert.concert_id",
      "concert.stadium_id",
      "concert.*",
      "stadium.location",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.lowest",
      "stadium.*",
      "singer.name",
      "singer.country",
      "singer.age",
      "singer.singer_id",
      "singer.song_name",
      "singer.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "What is the year that had the most concerts? | concert : concert.year , concert.theme , concert.concert_name , concert.concert_id , concert.stadium_id , concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "concert.year",
      "concert.theme",
      "concert.concert_name",
      "concert.concert_id",
      "concert.stadium_id",
      "concert.*",
      "stadium.location",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.lowest",
      "stadium.*",
      "singer.name",
      "singer.country",
      "singer.age",
      "singer.singer_id",
      "singer.song_name",
      "singer.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "Show the stadium names without any concert. | stadium : stadium.name , stadium.highest , stadium.lowest , stadium.stadium_id , stadium.capacity , stadium.* | concert : concert.stadium_id , concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "stadium.name",
      "stadium.highest",
      "stadium.lowest",
      "stadium.stadium_id",
      "stadium.capacity",
      "stadium.*",
      "concert.stadium_id",
      "concert.theme",
      "concert.year",
      "concert.concert_id",
      "concert.concert_name",
      "concert.*",
      "singer.name",
      "singer.country",
      "singer.age",
      "singer.singer_id",
      "singer.song_name",
      "singer.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "What are the names of the stadiums without any concerts? | stadium : stadium.name , stadium.stadium_id , stadium.highest , stadium.lowest , stadium.capacity , stadium.* | concert : concert.stadium_id , concert.theme , concert.year , concert.concert_name , concert.concert_id , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "stadium.name",
      "stadium.stadium_id",
      "stadium.highest",
      "stadium.lowest",
      "stadium.capacity",
      "stadium.*",
      "concert.stadium_id",
      "concert.theme",
      "concert.year",
      "concert.concert_name",
      "concert.concert_id",
      "concert.*",
      "singer.name",
      "singer.country",
      "singer.age",
      "singer.singer_id",
      "singer.song_name",
      "singer.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "Show countries where a singer above age 40 and a singer below 30 are from. | singer : singer.country , singer.age , singer.is_male , singer.name , singer.singer_id , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | singer_in_concert : singer_in_concert.singer_id , singer_in_concert.concert_id , singer_in_concert.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.country",
      "singer.age",
      "singer.is_male",
      "singer.name",
      "singer.singer_id",
      "singer.*",
      "stadium.location",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.lowest",
      "stadium.*",
      "singer_in_concert.singer_id",
      "singer_in_concert.concert_id",
      "singer_in_concert.*",
      "concert.theme",
      "concert.year",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "Show names for all stadiums except for stadiums having a concert in year 2014. | stadium : stadium.name , stadium.stadium_id , stadium.lowest , stadium.highest , stadium.capacity , stadium.* | concert : concert.year , concert.stadium_id , concert.theme , concert.concert_name , concert.concert_id , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "stadium.name",
      "stadium.stadium_id",
      "stadium.lowest",
      "stadium.highest",
      "stadium.capacity",
      "stadium.*",
      "concert.year",
      "concert.stadium_id",
      "concert.theme",
      "concert.concert_name",
      "concert.concert_id",
      "concert.*",
      "singer.name",
      "singer.country",
      "singer.age",
      "singer.singer_id",
      "singer.song_name",
      "singer.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "What are the names of all stadiums that did not have a concert in 2014? | stadium : stadium.name , stadium.stadium_id , stadium.lowest , stadium.highest , stadium.capacity , stadium.* | concert : concert.year , concert.stadium_id , concert.theme , concert.concert_id , concert.concert_name , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "stadium.name",
      "stadium.stadium_id",
      "stadium.lowest",
      "stadium.highest",
      "stadium.capacity",
      "stadium.*",
      "concert.year",
      "concert.stadium_id",
      "concert.theme",
      "concert.concert_id",
      "concert.concert_name",
      "concert.*",
      "singer.name",
      "singer.country",
      "singer.age",
      "singer.singer_id",
      "singer.song_name",
      "singer.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "Show the name and theme for all concerts and the number of singers in each concert. | concert : concert.concert_name , concert.theme , concert.concert_id , concert.year , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.*",
    "output_sequence": " | ",
    "tc_original": [
      "concert.concert_name",
      "concert.theme",
      "concert.concert_id",
      "concert.year",
      "concert.stadium_id",
      "concert.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*",
      "stadium.location",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.lowest",
      "stadium.*",
      "singer.name",
      "singer.country",
      "singer.age",
      "singer.singer_id",
      "singer.song_name",
      "singer.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "What are the names , themes , and number of singers for every concert ? | concert : concert.concert_name , concert.theme , concert.concert_id , concert.year , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.singer_id , singer_in_concert.concert_id , singer_in_concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.*",
    "output_sequence": " | ",
    "tc_original": [
      "concert.concert_name",
      "concert.theme",
      "concert.concert_id",
      "concert.year",
      "concert.stadium_id",
      "concert.*",
      "singer_in_concert.singer_id",
      "singer_in_concert.concert_id",
      "singer_in_concert.*",
      "stadium.location",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.lowest",
      "stadium.*",
      "singer.name",
      "singer.country",
      "singer.age",
      "singer.singer_id",
      "singer.song_name",
      "singer.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "List singer names and number of concerts for each singer. | singer : singer.name , singer.singer_id , singer.song_name , singer.country , singer.age , singer.* | singer_in_concert : singer_in_concert.singer_id , singer_in_concert.concert_id , singer_in_concert.* | concert : concert.theme , concert.year , concert.concert_name , concert.concert_id , concert.stadium_id , concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.name",
      "singer.singer_id",
      "singer.song_name",
      "singer.country",
      "singer.age",
      "singer.*",
      "singer_in_concert.singer_id",
      "singer_in_concert.concert_id",
      "singer_in_concert.*",
      "concert.theme",
      "concert.year",
      "concert.concert_name",
      "concert.concert_id",
      "concert.stadium_id",
      "concert.*",
      "stadium.location",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.lowest",
      "stadium.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "What are the names of the singers and number of concerts for each person? | singer : singer.name , singer.song_name , singer.singer_id , singer.country , singer.age , singer.* | singer_in_concert : singer_in_concert.singer_id , singer_in_concert.concert_id , singer_in_concert.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.name",
      "singer.song_name",
      "singer.singer_id",
      "singer.country",
      "singer.age",
      "singer.*",
      "singer_in_concert.singer_id",
      "singer_in_concert.concert_id",
      "singer_in_concert.*",
      "concert.theme",
      "concert.year",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*",
      "stadium.location",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.lowest",
      "stadium.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "List all singer names in concerts in year 2014. | singer : singer.name , singer.song_name , singer.singer_id , singer.country , singer.age , singer.* | concert : concert.year , concert.theme , concert.concert_name , concert.concert_id , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.singer_id , singer_in_concert.concert_id , singer_in_concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.name",
      "singer.song_name",
      "singer.singer_id",
      "singer.country",
      "singer.age",
      "singer.*",
      "concert.year",
      "concert.theme",
      "concert.concert_name",
      "concert.concert_id",
      "concert.stadium_id",
      "concert.*",
      "singer_in_concert.singer_id",
      "singer_in_concert.concert_id",
      "singer_in_concert.*",
      "stadium.location",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.lowest",
      "stadium.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "What are the names of the singers who performed in a concert in 2014? | singer : singer.name , singer.song_name , singer.country , singer.age , singer.singer_id , singer.* | concert : concert.year , concert.concert_name , concert.theme , concert.concert_id , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.singer_id , singer_in_concert.concert_id , singer_in_concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.name",
      "singer.song_name",
      "singer.country",
      "singer.age",
      "singer.singer_id",
      "singer.*",
      "concert.year",
      "concert.concert_name",
      "concert.theme",
      "concert.concert_id",
      "concert.stadium_id",
      "concert.*",
      "singer_in_concert.singer_id",
      "singer_in_concert.concert_id",
      "singer_in_concert.*",
      "stadium.location",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.lowest",
      "stadium.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "what is the name and nation of the singer who have a song having 'Hey' in its name? | singer : singer.song_name , singer.name , singer.country , singer.age , singer.singer_id , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | singer_in_concert : singer_in_concert.singer_id , singer_in_concert.concert_id , singer_in_concert.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.song_name",
      "singer.name",
      "singer.country",
      "singer.age",
      "singer.singer_id",
      "singer.*",
      "stadium.location",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.lowest",
      "stadium.*",
      "singer_in_concert.singer_id",
      "singer_in_concert.concert_id",
      "singer_in_concert.*",
      "concert.theme",
      "concert.year",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title? | singer : singer.song_name , singer.name , singer.country , singer.age , singer.singer_id , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.singer_id , singer_in_concert.concert_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.song_name",
      "singer.name",
      "singer.country",
      "singer.age",
      "singer.singer_id",
      "singer.*",
      "stadium.location",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.lowest",
      "stadium.*",
      "concert.theme",
      "concert.year",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*",
      "singer_in_concert.singer_id",
      "singer_in_concert.concert_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015. | stadium : stadium.location , stadium.name , stadium.stadium_id , stadium.capacity , stadium.highest , stadium.* | concert : concert.year , concert.stadium_id , concert.theme , concert.concert_id , concert.concert_name , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "stadium.location",
      "stadium.name",
      "stadium.stadium_id",
      "stadium.capacity",
      "stadium.highest",
      "stadium.*",
      "concert.year",
      "concert.stadium_id",
      "concert.theme",
      "concert.concert_id",
      "concert.concert_name",
      "concert.*",
      "singer.name",
      "singer.country",
      "singer.age",
      "singer.singer_id",
      "singer.song_name",
      "singer.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015? | stadium : stadium.location , stadium.name , stadium.stadium_id , stadium.capacity , stadium.highest , stadium.* | concert : concert.year , concert.stadium_id , concert.theme , concert.concert_id , concert.concert_name , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "stadium.location",
      "stadium.name",
      "stadium.stadium_id",
      "stadium.capacity",
      "stadium.highest",
      "stadium.*",
      "concert.year",
      "concert.stadium_id",
      "concert.theme",
      "concert.concert_id",
      "concert.concert_name",
      "concert.*",
      "singer.name",
      "singer.country",
      "singer.age",
      "singer.singer_id",
      "singer.song_name",
      "singer.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "Find the number of concerts happened in the stadium with the highest capacity . | stadium : stadium.highest , stadium.capacity , stadium.lowest , stadium.stadium_id , stadium.average , stadium.* | concert : concert.stadium_id , concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "stadium.highest",
      "stadium.capacity",
      "stadium.lowest",
      "stadium.stadium_id",
      "stadium.average",
      "stadium.*",
      "concert.stadium_id",
      "concert.theme",
      "concert.year",
      "concert.concert_id",
      "concert.concert_name",
      "concert.*",
      "singer.name",
      "singer.country",
      "singer.age",
      "singer.singer_id",
      "singer.song_name",
      "singer.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "What are the number of concerts that occurred in the stadium with the largest capacity ? | stadium : stadium.capacity , stadium.highest , stadium.lowest , stadium.stadium_id , stadium.average , stadium.* | concert : concert.stadium_id , concert.concert_name , concert.theme , concert.year , concert.concert_id , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "stadium.capacity",
      "stadium.highest",
      "stadium.lowest",
      "stadium.stadium_id",
      "stadium.average",
      "stadium.*",
      "concert.stadium_id",
      "concert.concert_name",
      "concert.theme",
      "concert.year",
      "concert.concert_id",
      "concert.*",
      "singer.name",
      "singer.country",
      "singer.age",
      "singer.singer_id",
      "singer.song_name",
      "singer.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "Find the number of pets whose weight is heavier than 10. | pets : pets.weight , pets.petid , pets.pettype , pets.pet_age , pets.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*",
    "output_sequence": " | ",
    "tc_original": [
      "pets.weight",
      "pets.petid",
      "pets.pettype",
      "pets.pet_age",
      "pets.*",
      "student.age",
      "student.sex",
      "student.major",
      "student.advisor",
      "student.stuid",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "How many pets have a greater weight than 10? | pets : pets.weight , pets.petid , pets.pettype , pets.pet_age , pets.* | student : student.age , student.sex , student.major , student.advisor , student.fname , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*",
    "output_sequence": " | ",
    "tc_original": [
      "pets.weight",
      "pets.petid",
      "pets.pettype",
      "pets.pet_age",
      "pets.*",
      "student.age",
      "student.sex",
      "student.major",
      "student.advisor",
      "student.fname",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "Find the weight of the youngest dog. | pets : pets.weight , pets.pet_age , pets.pettype ( dog ) , pets.petid , pets.* | student : student.age , student.sex , student.major , student.advisor , student.lname , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*",
    "output_sequence": " | ",
    "tc_original": [
      "pets.weight",
      "pets.pet_age",
      "pets.pettype",
      "pets.petid",
      "pets.*",
      "student.age",
      "student.sex",
      "student.major",
      "student.advisor",
      "student.lname",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "How much does the youngest dog weigh? | pets : pets.pet_age , pets.weight , pets.pettype ( dog ) , pets.petid , pets.* | student : student.age , student.sex , student.major , student.advisor , student.lname , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*",
    "output_sequence": " | ",
    "tc_original": [
      "pets.pet_age",
      "pets.weight",
      "pets.pettype",
      "pets.petid",
      "pets.*",
      "student.age",
      "student.sex",
      "student.major",
      "student.advisor",
      "student.lname",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "Find the maximum weight for each type of pet. List the maximum weight and pet type. | pets : pets.pettype , pets.weight , pets.petid , pets.pet_age , pets.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*",
    "output_sequence": " | ",
    "tc_original": [
      "pets.pettype",
      "pets.weight",
      "pets.petid",
      "pets.pet_age",
      "pets.*",
      "student.age",
      "student.sex",
      "student.major",
      "student.advisor",
      "student.stuid",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "List the maximum weight and type for each type of pet. | pets : pets.pettype , pets.weight , pets.petid , pets.pet_age , pets.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*",
    "output_sequence": " | ",
    "tc_original": [
      "pets.pettype",
      "pets.weight",
      "pets.petid",
      "pets.pet_age",
      "pets.*",
      "student.age",
      "student.sex",
      "student.major",
      "student.advisor",
      "student.stuid",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "Find number of pets owned by students who are older than 20. | student : student.age , student.stuid , student.sex , student.major , student.advisor , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.pet_age , pets.weight , pets.petid , pets.pettype , pets.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.age",
      "student.stuid",
      "student.sex",
      "student.major",
      "student.advisor",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*",
      "pets.pet_age",
      "pets.weight",
      "pets.petid",
      "pets.pettype",
      "pets.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "How many pets are owned by students that have an age greater than 20? | student : student.age , student.stuid , student.sex , student.major , student.advisor , student.* | pets : pets.pet_age , pets.weight , pets.petid , pets.pettype , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.age",
      "student.stuid",
      "student.sex",
      "student.major",
      "student.advisor",
      "student.*",
      "pets.pet_age",
      "pets.weight",
      "pets.petid",
      "pets.pettype",
      "pets.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "Find the number of dog pets that are raised by female students (with sex F). | student : student.sex , student.stuid , student.age , student.major , student.advisor , student.* | pets : pets.pettype ( dog ) , pets.petid , pets.weight , pets.pet_age , pets.* | has_pet : has_pet.petid , has_pet.stuid , has_pet.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.sex",
      "student.stuid",
      "student.age",
      "student.major",
      "student.advisor",
      "student.*",
      "pets.pettype",
      "pets.petid",
      "pets.weight",
      "pets.pet_age",
      "pets.*",
      "has_pet.petid",
      "has_pet.stuid",
      "has_pet.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "How many dog pets are raised by female students? | student : student.sex , student.stuid , student.age , student.major , student.advisor , student.* | pets : pets.pettype ( dog ) , pets.petid , pets.weight , pets.pet_age , pets.* | has_pet : has_pet.petid , has_pet.stuid , has_pet.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.sex",
      "student.stuid",
      "student.age",
      "student.major",
      "student.advisor",
      "student.*",
      "pets.pettype",
      "pets.petid",
      "pets.weight",
      "pets.pet_age",
      "pets.*",
      "has_pet.petid",
      "has_pet.stuid",
      "has_pet.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "Find the number of distinct type of pets. | pets : pets.pettype , pets.weight , pets.petid , pets.pet_age , pets.* | student : student.age , student.sex , student.major , student.advisor , student.lname , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*",
    "output_sequence": " | ",
    "tc_original": [
      "pets.pettype",
      "pets.weight",
      "pets.petid",
      "pets.pet_age",
      "pets.*",
      "student.age",
      "student.sex",
      "student.major",
      "student.advisor",
      "student.lname",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "How many different types of pet are there? | pets : pets.pettype , pets.weight , pets.petid , pets.pet_age , pets.* | student : student.age , student.sex , student.major , student.advisor , student.lname , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*",
    "output_sequence": " | ",
    "tc_original": [
      "pets.pettype",
      "pets.weight",
      "pets.petid",
      "pets.pet_age",
      "pets.*",
      "student.age",
      "student.sex",
      "student.major",
      "student.advisor",
      "student.lname",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "Find the first name of students who have cat or dog pet. | student : student.fname , student.stuid , student.age , student.sex , student.major , student.* | pets : pets.pettype ( cat , dog ) , pets.weight , pets.petid , pets.pet_age , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.fname",
      "student.stuid",
      "student.age",
      "student.sex",
      "student.major",
      "student.*",
      "pets.pettype",
      "pets.weight",
      "pets.petid",
      "pets.pet_age",
      "pets.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "What are the first names of every student who has a cat or dog as a pet? | student : student.fname , student.stuid , student.age , student.sex , student.major , student.* | pets : pets.pettype ( cat , dog ) , pets.weight , pets.petid , pets.pet_age , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.fname",
      "student.stuid",
      "student.age",
      "student.sex",
      "student.major",
      "student.*",
      "pets.pettype",
      "pets.weight",
      "pets.petid",
      "pets.pet_age",
      "pets.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "Find the first name of students who have both cat and dog pets . | student : student.fname , student.stuid , student.age , student.sex , student.major , student.* | pets : pets.pettype ( cat , dog ) , pets.weight , pets.petid , pets.pet_age , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.fname",
      "student.stuid",
      "student.age",
      "student.sex",
      "student.major",
      "student.*",
      "pets.pettype",
      "pets.weight",
      "pets.petid",
      "pets.pet_age",
      "pets.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "What are the students' first names who have both cats and dogs as pets? | student : student.fname , student.stuid , student.age , student.sex , student.major , student.* | pets : pets.pettype ( cat , dog ) , pets.weight , pets.petid , pets.pet_age , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.fname",
      "student.stuid",
      "student.age",
      "student.sex",
      "student.major",
      "student.*",
      "pets.pettype",
      "pets.weight",
      "pets.petid",
      "pets.pet_age",
      "pets.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "Find the major and age of students who do not have a cat pet. | student : student.age , student.major , student.stuid , student.sex , student.advisor , student.* | pets : pets.pettype ( cat ) , pets.pet_age , pets.weight , pets.petid , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.age",
      "student.major",
      "student.stuid",
      "student.sex",
      "student.advisor",
      "student.*",
      "pets.pettype",
      "pets.pet_age",
      "pets.weight",
      "pets.petid",
      "pets.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "What major is every student who does not own a cat as a pet, and also how old are they? | pets : pets.pettype ( cat ) , pets.weight , pets.petid , pets.pet_age , pets.* | student : student.major , student.age , student.stuid , student.sex , student.advisor , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*",
    "output_sequence": " | ",
    "tc_original": [
      "pets.pettype",
      "pets.weight",
      "pets.petid",
      "pets.pet_age",
      "pets.*",
      "student.major",
      "student.age",
      "student.stuid",
      "student.sex",
      "student.advisor",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "Find the id of students who do not have a cat pet. | pets : pets.pettype ( cat ) , pets.petid , pets.weight , pets.pet_age , pets.* | student : student.stuid , student.age , student.sex , student.major , student.advisor , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*",
    "output_sequence": " | ",
    "tc_original": [
      "pets.pettype",
      "pets.petid",
      "pets.weight",
      "pets.pet_age",
      "pets.*",
      "student.stuid",
      "student.age",
      "student.sex",
      "student.major",
      "student.advisor",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "What are the ids of the students who do not own cats as pets? | pets : pets.pettype ( cat ) , pets.petid , pets.weight , pets.pet_age , pets.* | student : student.stuid , student.age , student.sex , student.major , student.advisor , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*",
    "output_sequence": " | ",
    "tc_original": [
      "pets.pettype",
      "pets.petid",
      "pets.weight",
      "pets.pet_age",
      "pets.*",
      "student.stuid",
      "student.age",
      "student.sex",
      "student.major",
      "student.advisor",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "Find the first name and age of students who have a dog but do not have a cat as a pet. | student : student.fname , student.age , student.stuid , student.sex , student.major , student.* | pets : pets.pettype ( cat , dog ) , pets.petid , pets.weight , pets.pet_age , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.fname",
      "student.age",
      "student.stuid",
      "student.sex",
      "student.major",
      "student.*",
      "pets.pettype",
      "pets.petid",
      "pets.weight",
      "pets.pet_age",
      "pets.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "What is the first name of every student who has a dog but does not have a cat? | student : student.fname , student.stuid , student.age , student.sex , student.major , student.* | pets : pets.pettype ( cat , dog ) , pets.petid , pets.weight , pets.pet_age , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.fname",
      "student.stuid",
      "student.age",
      "student.sex",
      "student.major",
      "student.*",
      "pets.pettype",
      "pets.petid",
      "pets.weight",
      "pets.pet_age",
      "pets.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "Find the type and weight of the youngest pet. | pets : pets.pettype , pets.pet_age , pets.weight , pets.petid , pets.* | student : student.age , student.sex , student.major , student.advisor , student.lname , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*",
    "output_sequence": " | ",
    "tc_original": [
      "pets.pettype",
      "pets.pet_age",
      "pets.weight",
      "pets.petid",
      "pets.*",
      "student.age",
      "student.sex",
      "student.major",
      "student.advisor",
      "student.lname",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "What type of pet is the youngest animal, and how much does it weigh? | pets : pets.pet_age , pets.pettype , pets.weight , pets.petid , pets.* | student : student.age , student.sex , student.major , student.advisor , student.lname , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*",
    "output_sequence": " | ",
    "tc_original": [
      "pets.pet_age",
      "pets.pettype",
      "pets.weight",
      "pets.petid",
      "pets.*",
      "student.age",
      "student.sex",
      "student.major",
      "student.advisor",
      "student.lname",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "Find the id and weight of all pets whose age is older than 1. | pets : pets.pet_age , pets.weight , pets.petid , pets.pettype , pets.* | student : student.age , student.sex , student.major , student.advisor , student.lname , student.* | has_pet : has_pet.petid , has_pet.stuid , has_pet.*",
    "output_sequence": " | ",
    "tc_original": [
      "pets.pet_age",
      "pets.weight",
      "pets.petid",
      "pets.pettype",
      "pets.*",
      "student.age",
      "student.sex",
      "student.major",
      "student.advisor",
      "student.lname",
      "student.*",
      "has_pet.petid",
      "has_pet.stuid",
      "has_pet.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "What is the id and weight of every pet who is older than 1? | pets : pets.pet_age , pets.weight , pets.petid , pets.pettype , pets.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.* | has_pet : has_pet.petid , has_pet.stuid , has_pet.*",
    "output_sequence": " | ",
    "tc_original": [
      "pets.pet_age",
      "pets.weight",
      "pets.petid",
      "pets.pettype",
      "pets.*",
      "student.age",
      "student.sex",
      "student.major",
      "student.advisor",
      "student.stuid",
      "student.*",
      "has_pet.petid",
      "has_pet.stuid",
      "has_pet.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "Find the average and maximum age for each type of pet. | pets : pets.pet_age , pets.pettype , pets.weight , pets.petid , pets.* | student : student.age , student.sex , student.major , student.advisor , student.fname , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*",
    "output_sequence": " | ",
    "tc_original": [
      "pets.pet_age",
      "pets.pettype",
      "pets.weight",
      "pets.petid",
      "pets.*",
      "student.age",
      "student.sex",
      "student.major",
      "student.advisor",
      "student.fname",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "What is the average and maximum age for each pet type? | pets : pets.pet_age , pets.pettype , pets.weight , pets.petid , pets.* | student : student.age , student.sex , student.major , student.advisor , student.lname , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*",
    "output_sequence": " | ",
    "tc_original": [
      "pets.pet_age",
      "pets.pettype",
      "pets.weight",
      "pets.petid",
      "pets.*",
      "student.age",
      "student.sex",
      "student.major",
      "student.advisor",
      "student.lname",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "Find the average weight for each pet type. | pets : pets.pettype , pets.weight , pets.petid , pets.pet_age , pets.* | student : student.age , student.sex , student.major , student.advisor , student.lname , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*",
    "output_sequence": " | ",
    "tc_original": [
      "pets.pettype",
      "pets.weight",
      "pets.petid",
      "pets.pet_age",
      "pets.*",
      "student.age",
      "student.sex",
      "student.major",
      "student.advisor",
      "student.lname",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "What is the average weight for each type of pet? | pets : pets.weight , pets.pettype , pets.petid , pets.pet_age , pets.* | student : student.age , student.sex , student.major , student.advisor , student.fname , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*",
    "output_sequence": " | ",
    "tc_original": [
      "pets.weight",
      "pets.pettype",
      "pets.petid",
      "pets.pet_age",
      "pets.*",
      "student.age",
      "student.sex",
      "student.major",
      "student.advisor",
      "student.fname",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "Find the first name and age of students who have a pet. | student : student.fname , student.age , student.stuid , student.sex , student.major , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.weight , pets.pet_age , pets.petid , pets.pettype , pets.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.fname",
      "student.age",
      "student.stuid",
      "student.sex",
      "student.major",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*",
      "pets.weight",
      "pets.pet_age",
      "pets.petid",
      "pets.pettype",
      "pets.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "What are the different first names and ages of the students who do have pets? | student : student.fname , student.age , student.stuid , student.sex , student.major , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.weight , pets.pet_age , pets.petid , pets.pettype , pets.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.fname",
      "student.age",
      "student.stuid",
      "student.sex",
      "student.major",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*",
      "pets.weight",
      "pets.pet_age",
      "pets.petid",
      "pets.pettype",
      "pets.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "Find the id of the pet owned by student whose last name is 'Smith'. | student : student.lname ( Smith ) , student.stuid , student.age , student.sex , student.major , student.* | has_pet : has_pet.petid , has_pet.stuid , has_pet.* | pets : pets.weight , pets.petid , pets.pettype , pets.pet_age , pets.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.lname",
      "student.stuid",
      "student.age",
      "student.sex",
      "student.major",
      "student.*",
      "has_pet.petid",
      "has_pet.stuid",
      "has_pet.*",
      "pets.weight",
      "pets.petid",
      "pets.pettype",
      "pets.pet_age",
      "pets.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "What is the id of the pet owned by the student whose last name is 'Smith'? | student : student.lname ( Smith ) , student.stuid , student.age , student.sex , student.major , student.* | has_pet : has_pet.petid , has_pet.stuid , has_pet.* | pets : pets.petid , pets.weight , pets.pettype , pets.pet_age , pets.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.lname",
      "student.stuid",
      "student.age",
      "student.sex",
      "student.major",
      "student.*",
      "has_pet.petid",
      "has_pet.stuid",
      "has_pet.*",
      "pets.petid",
      "pets.weight",
      "pets.pettype",
      "pets.pet_age",
      "pets.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "Find the number of pets for each student who has any pet and student id. | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | student : student.stuid , student.age , student.sex , student.major , student.advisor , student.* | pets : pets.weight , pets.petid , pets.pettype , pets.pet_age , pets.*",
    "output_sequence": " | ",
    "tc_original": [
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*",
      "student.stuid",
      "student.age",
      "student.sex",
      "student.major",
      "student.advisor",
      "student.*",
      "pets.weight",
      "pets.petid",
      "pets.pettype",
      "pets.pet_age",
      "pets.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "For students who have pets , how many pets does each student have ? list their ids instead of names . | student : student.lname , student.fname , student.stuid , student.age , student.sex , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.weight , pets.petid , pets.pettype , pets.pet_age , pets.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.lname",
      "student.fname",
      "student.stuid",
      "student.age",
      "student.sex",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*",
      "pets.weight",
      "pets.petid",
      "pets.pettype",
      "pets.pet_age",
      "pets.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "Find the first name and gender of student who have more than one pet. | student : student.fname , student.sex , student.stuid , student.age , student.major , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.weight , pets.petid , pets.pettype , pets.pet_age , pets.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.fname",
      "student.sex",
      "student.stuid",
      "student.age",
      "student.major",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*",
      "pets.weight",
      "pets.petid",
      "pets.pettype",
      "pets.pet_age",
      "pets.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "What is the first name and gender of the all the students who have more than one pet? | student : student.fname , student.sex , student.stuid , student.age , student.major , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.weight , pets.pettype , pets.petid , pets.pet_age , pets.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.fname",
      "student.sex",
      "student.stuid",
      "student.age",
      "student.major",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*",
      "pets.weight",
      "pets.pettype",
      "pets.petid",
      "pets.pet_age",
      "pets.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "Find the last name of the student who has a cat that is age 3. | student : student.lname , student.stuid , student.age , student.fname , student.sex , student.* | pets : pets.pet_age , pets.pettype ( cat ) , pets.weight , pets.petid , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.lname",
      "student.stuid",
      "student.age",
      "student.fname",
      "student.sex",
      "student.*",
      "pets.pet_age",
      "pets.pettype",
      "pets.weight",
      "pets.petid",
      "pets.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "What is the last name of the student who has a cat that is 3 years old? | pets : pets.pet_age , pets.pettype ( cat ) , pets.weight , pets.petid , pets.* | student : student.lname , student.stuid , student.age , student.sex , student.major , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*",
    "output_sequence": " | ",
    "tc_original": [
      "pets.pet_age",
      "pets.pettype",
      "pets.weight",
      "pets.petid",
      "pets.*",
      "student.lname",
      "student.stuid",
      "student.age",
      "student.sex",
      "student.major",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "Find the average age of students who do not have any pet . | student : student.age , student.stuid , student.sex , student.major , student.advisor , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.pet_age , pets.weight , pets.petid , pets.pettype , pets.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.age",
      "student.stuid",
      "student.sex",
      "student.major",
      "student.advisor",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*",
      "pets.pet_age",
      "pets.weight",
      "pets.petid",
      "pets.pettype",
      "pets.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "What is the average age for all students who do not own any pets ? | student : student.age , student.stuid , student.sex , student.advisor , student.major , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.pet_age , pets.weight , pets.petid , pets.pettype , pets.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.age",
      "student.stuid",
      "student.sex",
      "student.advisor",
      "student.major",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*",
      "pets.pet_age",
      "pets.weight",
      "pets.petid",
      "pets.pettype",
      "pets.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "How many continents are there? | continents : continents.continent , continents.contid , continents.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*",
    "output_sequence": " | ",
    "tc_original": [
      "continents.continent",
      "continents.contid",
      "continents.*",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What is the number of continents? | continents : continents.continent , continents.contid , continents.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*",
    "output_sequence": " | ",
    "tc_original": [
      "continents.continent",
      "continents.contid",
      "continents.*",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "How many countries does each continent have? List the continent id, continent name and the number of countries. | continents : continents.continent , continents.contid , continents.* | countries : countries.continent , countries.countryid , countries.countryname , countries.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*",
    "output_sequence": " | ",
    "tc_original": [
      "continents.continent",
      "continents.contid",
      "continents.*",
      "countries.continent",
      "countries.countryid",
      "countries.countryname",
      "countries.*",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "For each continent, list its id, name, and how many countries it has? | continents : continents.continent , continents.contid , continents.* | countries : countries.continent , countries.countryname , countries.countryid , countries.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*",
    "output_sequence": " | ",
    "tc_original": [
      "continents.continent",
      "continents.contid",
      "continents.*",
      "countries.continent",
      "countries.countryname",
      "countries.countryid",
      "countries.*",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "How many countries are listed? | countries : countries.countryname , countries.continent , countries.countryid , countries.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*",
    "output_sequence": " | ",
    "tc_original": [
      "countries.countryname",
      "countries.continent",
      "countries.countryid",
      "countries.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "How many countries exist? | countries : countries.countryname , countries.continent , countries.countryid , countries.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*",
    "output_sequence": " | ",
    "tc_original": [
      "countries.countryname",
      "countries.continent",
      "countries.countryid",
      "countries.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "How many models does each car maker produce? List maker full name, id and the number. | car_makers : car_makers.fullname , car_makers.maker , car_makers.id , car_makers.country , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_makers.fullname",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What is the full name of each car maker, along with its id and how many models it produces? | car_makers : car_makers.fullname , car_makers.id , car_makers.maker , car_makers.country , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_makers.fullname",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "Which model of the car has the minimum horsepower? | cars_data : cars_data.horsepower , cars_data.id , cars_data.cylinders , cars_data.weight , cars_data.accelerate , cars_data.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.horsepower",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What is the model of the car with the smallest amount of horsepower? | cars_data : cars_data.horsepower , cars_data.id , cars_data.cylinders , cars_data.weight , cars_data.accelerate , cars_data.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.horsepower",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "Find the model of the car whose weight is below the average weight. | cars_data : cars_data.weight , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.accelerate , cars_data.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.weight",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.accelerate",
      "cars_data.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What is the model for the car with a weight smaller than the average? | cars_data : cars_data.weight , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.accelerate , cars_data.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.weight",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.accelerate",
      "cars_data.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "Find the name of the makers that produced some cars in the year of 1970? | cars_data : cars_data.year , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.* | car_makers : car_makers.maker , car_makers.fullname , car_makers.country , car_makers.id , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.year",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.*",
      "car_makers.maker",
      "car_makers.fullname",
      "car_makers.country",
      "car_makers.id",
      "car_makers.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What is the name of the different car makers who produced a car in 1970? | cars_data : cars_data.year , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.* | car_makers : car_makers.maker , car_makers.fullname , car_makers.country , car_makers.id , car_makers.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.year",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.*",
      "car_makers.maker",
      "car_makers.fullname",
      "car_makers.country",
      "car_makers.id",
      "car_makers.*",
      "car_names.make",
      "car_names.model",
      "car_names.makeid",
      "car_names.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "Find the make and production time of the cars that were produced in the earliest year? | cars_data : cars_data.year , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.year",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.*",
      "car_names.make",
      "car_names.model",
      "car_names.makeid",
      "car_names.*",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What is the maker of the carr produced in the earliest year and what year was it? | cars_data : cars_data.year , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.* | car_makers : car_makers.maker , car_makers.fullname , car_makers.country , car_makers.id , car_makers.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.year",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.*",
      "car_makers.maker",
      "car_makers.fullname",
      "car_makers.country",
      "car_makers.id",
      "car_makers.*",
      "car_names.make",
      "car_names.model",
      "car_names.makeid",
      "car_names.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "Which distinct car models are the produced after 1980? | cars_data : cars_data.year , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.year",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What are the different models for the cards produced after 1980? | cars_data : cars_data.year , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.* | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.year",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.*",
      "model_list.model",
      "model_list.modelid",
      "model_list.maker",
      "model_list.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "How many car makers are there in each continents? List the continent name and the count. | continents : continents.continent , continents.contid , continents.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*",
    "output_sequence": " | ",
    "tc_original": [
      "continents.continent",
      "continents.contid",
      "continents.*",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What is the name of each continent and how many car makers are there in each one? | continents : continents.continent , continents.contid , continents.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*",
    "output_sequence": " | ",
    "tc_original": [
      "continents.continent",
      "continents.contid",
      "continents.*",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "Which of the countries has the most car makers? List the country name. | countries : countries.countryname , countries.countryid , countries.continent , countries.* | car_makers : car_makers.country , car_makers.id , car_makers.maker , car_makers.fullname , car_makers.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*",
    "output_sequence": " | ",
    "tc_original": [
      "countries.countryname",
      "countries.countryid",
      "countries.continent",
      "countries.*",
      "car_makers.country",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.fullname",
      "car_makers.*",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What is the name of the country with the most car makers? | countries : countries.countryname , countries.countryid , countries.continent , countries.* | car_makers : car_makers.country , car_makers.id , car_makers.maker , car_makers.fullname , car_makers.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*",
    "output_sequence": " | ",
    "tc_original": [
      "countries.countryname",
      "countries.countryid",
      "countries.continent",
      "countries.*",
      "car_makers.country",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.fullname",
      "car_makers.*",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "How many car models are produced by each maker ? Only list the count and the maker full name . | car_makers : car_makers.fullname , car_makers.maker , car_makers.country , car_makers.id , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_makers.fullname",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.id",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What is the number of car models that are produced by each maker and what is the id and full name of each maker? | car_makers : car_makers.fullname , car_makers.id , car_makers.maker , car_makers.country , car_makers.* | model_list : model_list.modelid , model_list.model , model_list.maker , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_makers.fullname",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.*",
      "model_list.modelid",
      "model_list.model",
      "model_list.maker",
      "model_list.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What is the accelerate of the car make amc hornet sportabout (sw)? | cars_data : cars_data.accelerate , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.* | car_names : car_names.make ( amc hornet , amc hornet sportabout (sw) ) , car_names.model ( amc ) , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.country , car_makers.maker ( amc ) , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model ( amc ) , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.accelerate",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.*",
      "car_names.make",
      "car_names.model",
      "car_names.makeid",
      "car_names.*",
      "car_makers.id",
      "car_makers.country",
      "car_makers.maker",
      "car_makers.fullname",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "How much does the car accelerate that makes amc hornet sportabout (sw)? | cars_data : cars_data.accelerate , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.* | car_names : car_names.make ( amc hornet , amc hornet sportabout (sw) ) , car_names.model ( amc ) , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.country , car_makers.maker ( amc ) , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model ( amc ) , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.accelerate",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.*",
      "car_names.make",
      "car_names.model",
      "car_names.makeid",
      "car_names.*",
      "car_makers.id",
      "car_makers.country",
      "car_makers.maker",
      "car_makers.fullname",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "How many car makers are there in france? | countries : countries.countryname ( france ) , countries.continent , countries.countryid , countries.* | car_makers : car_makers.country , car_makers.maker , car_makers.id , car_makers.fullname , car_makers.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*",
    "output_sequence": " | ",
    "tc_original": [
      "countries.countryname",
      "countries.continent",
      "countries.countryid",
      "countries.*",
      "car_makers.country",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.fullname",
      "car_makers.*",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What is the number of makers of care in France? | countries : countries.countryname ( france ) , countries.continent , countries.countryid , countries.* | car_makers : car_makers.maker , car_makers.country , car_makers.id , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "countries.countryname",
      "countries.continent",
      "countries.countryid",
      "countries.*",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.id",
      "car_makers.fullname",
      "car_makers.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "How many car models are produced in the usa? | countries : countries.countryname ( usa ) , countries.continent , countries.countryid , countries.* | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*",
    "output_sequence": " | ",
    "tc_original": [
      "countries.countryname",
      "countries.continent",
      "countries.countryid",
      "countries.*",
      "model_list.model",
      "model_list.modelid",
      "model_list.maker",
      "model_list.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What is the count of the car models produced in the United States? | countries : countries.countryname , countries.countryid , countries.continent , countries.* | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | car_makers : car_makers.country , car_makers.id , car_makers.maker , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*",
    "output_sequence": " | ",
    "tc_original": [
      "countries.countryname",
      "countries.countryid",
      "countries.continent",
      "countries.*",
      "model_list.model",
      "model_list.modelid",
      "model_list.maker",
      "model_list.*",
      "car_makers.country",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.fullname",
      "car_makers.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What is the average miles per gallon(mpg) of the cars with 4 cylinders? | cars_data : cars_data.mpg , cars_data.cylinders , cars_data.id , cars_data.horsepower , cars_data.weight , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.mpg",
      "cars_data.cylinders",
      "cars_data.id",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What is the average miles per gallon of all the cards with 4 cylinders? | cars_data : cars_data.mpg , cars_data.cylinders , cars_data.id , cars_data.horsepower , cars_data.weight , cars_data.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.mpg",
      "cars_data.cylinders",
      "cars_data.id",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What is the smallest weight of the car produced with 8 cylinders on 1974 ? | cars_data : cars_data.weight , cars_data.year , cars_data.cylinders , cars_data.id , cars_data.horsepower , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.weight",
      "cars_data.year",
      "cars_data.cylinders",
      "cars_data.id",
      "cars_data.horsepower",
      "cars_data.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What is the minimum weight of the car with 8 cylinders produced in 1974 ? | cars_data : cars_data.weight , cars_data.year , cars_data.cylinders , cars_data.id , cars_data.horsepower , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.weight",
      "cars_data.year",
      "cars_data.cylinders",
      "cars_data.id",
      "cars_data.horsepower",
      "cars_data.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What are all the makers and models? | car_makers : car_makers.maker , car_makers.country , car_makers.id , car_makers.fullname , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_makers.maker",
      "car_makers.country",
      "car_makers.id",
      "car_makers.fullname",
      "car_makers.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What are the makers and models? | car_makers : car_makers.maker , car_makers.country , car_makers.id , car_makers.fullname , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_makers.maker",
      "car_makers.country",
      "car_makers.id",
      "car_makers.fullname",
      "car_makers.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What are the countries having at least one car maker? List name and id. | countries : countries.countryname , countries.countryid , countries.continent , countries.* | car_makers : car_makers.id , car_makers.country , car_makers.maker , car_makers.fullname , car_makers.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*",
    "output_sequence": " | ",
    "tc_original": [
      "countries.countryname",
      "countries.countryid",
      "countries.continent",
      "countries.*",
      "car_makers.id",
      "car_makers.country",
      "car_makers.maker",
      "car_makers.fullname",
      "car_makers.*",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What are the names and ids of all countries with at least one car maker? | countries : countries.countryname , countries.countryid , countries.continent , countries.* | car_makers : car_makers.id , car_makers.country , car_makers.maker , car_makers.fullname , car_makers.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*",
    "output_sequence": " | ",
    "tc_original": [
      "countries.countryname",
      "countries.countryid",
      "countries.continent",
      "countries.*",
      "car_makers.id",
      "car_makers.country",
      "car_makers.maker",
      "car_makers.fullname",
      "car_makers.*",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What is the number of the cars with horsepower more than 150? | cars_data : cars_data.horsepower , cars_data.id , cars_data.cylinders , cars_data.weight , cars_data.accelerate , cars_data.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.horsepower",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What is the number of cars with a horsepower greater than 150? | cars_data : cars_data.horsepower , cars_data.id , cars_data.cylinders , cars_data.weight , cars_data.accelerate , cars_data.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.horsepower",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What is the average weight of cars each year? | cars_data : cars_data.weight , cars_data.year , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.weight",
      "cars_data.year",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What is the average weight and year for each year? | cars_data : cars_data.weight , cars_data.year , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.weight",
      "cars_data.year",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "Which countries in europe have at least 3 car manufacturers? | continents : continents.continent ( europe ) , continents.contid , continents.* | countries : countries.continent , countries.countryname , countries.countryid , countries.* | car_makers : car_makers.country , car_makers.id , car_makers.maker , car_makers.fullname , car_makers.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "continents.continent",
      "continents.contid",
      "continents.*",
      "countries.continent",
      "countries.countryname",
      "countries.countryid",
      "countries.*",
      "car_makers.country",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.fullname",
      "car_makers.*",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What are the names of all European countries with at least 3 manufacturers? | countries : countries.countryname , countries.countryid , countries.continent , countries.* | continents : continents.continent ( europe ) , continents.contid , continents.* | car_makers : car_makers.country , car_makers.id , car_makers.maker , car_makers.fullname , car_makers.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "countries.countryname",
      "countries.countryid",
      "countries.continent",
      "countries.*",
      "continents.continent",
      "continents.contid",
      "continents.*",
      "car_makers.country",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.fullname",
      "car_makers.*",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What is the maximum horsepower and the make of the car models with 3 cylinders? | cars_data : cars_data.horsepower , cars_data.cylinders , cars_data.id , cars_data.weight , cars_data.accelerate , cars_data.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.horsepower",
      "cars_data.cylinders",
      "cars_data.id",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*",
      "car_names.make",
      "car_names.model",
      "car_names.makeid",
      "car_names.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it? | cars_data : cars_data.horsepower , cars_data.cylinders , cars_data.id , cars_data.weight , cars_data.accelerate , cars_data.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.horsepower",
      "cars_data.cylinders",
      "cars_data.id",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*",
      "car_names.make",
      "car_names.model",
      "car_names.makeid",
      "car_names.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon. | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | cars_data : cars_data.mpg , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*",
    "output_sequence": " | ",
    "tc_original": [
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "cars_data.mpg",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What is the car model with the highest mpg ? | cars_data : cars_data.mpg , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.mpg",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What is the average horsepower of the cars before 1980? | cars_data : cars_data.horsepower , cars_data.year , cars_data.id , cars_data.cylinders , cars_data.weight , cars_data.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.horsepower",
      "cars_data.year",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.weight",
      "cars_data.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What is the average horsepower for all cars produced before 1980 ? | cars_data : cars_data.horsepower , cars_data.year , cars_data.id , cars_data.cylinders , cars_data.weight , cars_data.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.horsepower",
      "cars_data.year",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.weight",
      "cars_data.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What is the average edispl of the cars of model volvo? | cars_data : cars_data.edispl , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.* | model_list : model_list.model ( volvo ) , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model ( volvo ) , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.fullname ( Volvo ) , car_makers.country , car_makers.maker ( volvo ) , car_makers.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "car_makers.id",
      "car_makers.fullname",
      "car_makers.country",
      "car_makers.maker",
      "car_makers.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What is the average edispl for all volvos? | cars_data : cars_data.edispl , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.* | car_names : car_names.model ( volvo ) , car_names.make , car_names.makeid , car_names.* | model_list : model_list.model ( volvo ) , model_list.maker , model_list.modelid , model_list.* | car_makers : car_makers.id , car_makers.country , car_makers.maker ( volvo ) , car_makers.fullname , car_makers.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "car_makers.id",
      "car_makers.country",
      "car_makers.maker",
      "car_makers.fullname",
      "car_makers.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What is the maximum accelerate for different number of cylinders? | cars_data : cars_data.accelerate , cars_data.cylinders , cars_data.id , cars_data.horsepower , cars_data.weight , cars_data.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.accelerate",
      "cars_data.cylinders",
      "cars_data.id",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What is the maximum accelerate for all the different cylinders? | cars_data : cars_data.cylinders , cars_data.accelerate , cars_data.id , cars_data.horsepower , cars_data.weight , cars_data.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.cylinders",
      "cars_data.accelerate",
      "cars_data.id",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "Which model has the most version(make) of cars? | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*",
    "output_sequence": " | ",
    "tc_original": [
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "car_names.make",
      "car_names.model",
      "car_names.makeid",
      "car_names.*",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What model has the most different versions? | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "How many cars have more than 4 cylinders? | cars_data : cars_data.cylinders , cars_data.id , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.cylinders",
      "cars_data.id",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What is the number of cars with more than 4 cylinders? | cars_data : cars_data.cylinders , cars_data.id , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.cylinders",
      "cars_data.id",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "how many cars were produced in 1980? | cars_data : cars_data.year , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.year",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "In 1980, how many cars were made? | cars_data : cars_data.year , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.year",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "How many car models were produced by the maker with full name American Motor Company? | car_makers : car_makers.fullname ( American Motor Company ) , car_makers.maker , car_makers.id , car_makers.country , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_makers.fullname",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What is the number of car models created by the car maker American Motor Company? | car_makers : car_makers.fullname ( American Motor Company ) , car_makers.maker , car_makers.id , car_makers.country , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_makers.fullname",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "Which makers designed more than 3 car models? List full name and the id. | car_makers : car_makers.fullname , car_makers.id , car_makers.maker , car_makers.country , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_makers.fullname",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What are the names and ids of all makers with more than 3 models? | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.* | car_makers : car_makers.maker , car_makers.id , car_makers.fullname , car_makers.country , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.fullname",
      "car_makers.country",
      "car_makers.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500? | car_makers : car_makers.fullname ( General Motors ) , car_makers.maker , car_makers.id , car_makers.country , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | cars_data : cars_data.weight , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.accelerate , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_makers.fullname",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "cars_data.weight",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.accelerate",
      "cars_data.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What are the different models created by either the car maker General Motors or weighed more than 3500? | car_makers : car_makers.fullname ( General Motors ) , car_makers.maker , car_makers.id , car_makers.country , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | cars_data : cars_data.weight , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.accelerate , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_makers.fullname",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "cars_data.weight",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.accelerate",
      "cars_data.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "In which years cars were produced weighing no less than 3000 and no more than 4000 ? | cars_data : cars_data.year , cars_data.weight , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.year",
      "cars_data.weight",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ? | cars_data : cars_data.weight , cars_data.year , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.weight",
      "cars_data.year",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What is the horsepower of the car with the largest accelerate? | cars_data : cars_data.horsepower , cars_data.accelerate , cars_data.id , cars_data.cylinders , cars_data.weight , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.horsepower",
      "cars_data.accelerate",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.weight",
      "cars_data.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What is the horsepower of the car with the greatest accelerate? | cars_data : cars_data.horsepower , cars_data.accelerate , cars_data.id , cars_data.cylinders , cars_data.weight , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.horsepower",
      "cars_data.accelerate",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.weight",
      "cars_data.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "For model volvo, how many cylinders does the car with the least accelerate have? | cars_data : cars_data.accelerate , cars_data.cylinders , cars_data.year , cars_data.id , cars_data.horsepower , cars_data.* | model_list : model_list.model ( volvo ) , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model ( volvo ) , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.fullname ( Volvo ) , car_makers.country , car_makers.maker ( volvo ) , car_makers.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.accelerate",
      "cars_data.cylinders",
      "cars_data.year",
      "cars_data.id",
      "cars_data.horsepower",
      "cars_data.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "car_makers.id",
      "car_makers.fullname",
      "car_makers.country",
      "car_makers.maker",
      "car_makers.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "For a volvo model, how many cylinders does the version with least accelerate have? | model_list : model_list.model ( volvo ) , model_list.maker , model_list.modelid , model_list.* | cars_data : cars_data.accelerate , cars_data.cylinders , cars_data.id , cars_data.year , cars_data.horsepower , cars_data.* | car_names : car_names.model ( volvo ) , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.fullname ( Volvo ) , car_makers.country , car_makers.maker ( volvo ) , car_makers.*",
    "output_sequence": " | ",
    "tc_original": [
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "cars_data.accelerate",
      "cars_data.cylinders",
      "cars_data.id",
      "cars_data.year",
      "cars_data.horsepower",
      "cars_data.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "car_makers.id",
      "car_makers.fullname",
      "car_makers.country",
      "car_makers.maker",
      "car_makers.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "How many cars have a larger accelerate than the car with the largest horsepower? | cars_data : cars_data.horsepower , cars_data.accelerate , cars_data.id , cars_data.cylinders , cars_data.weight , cars_data.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.horsepower",
      "cars_data.accelerate",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.weight",
      "cars_data.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What is the number of cars with a greater accelerate than the one with the most horsepower? | cars_data : cars_data.accelerate , cars_data.horsepower , cars_data.id , cars_data.cylinders , cars_data.weight , cars_data.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.accelerate",
      "cars_data.horsepower",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.weight",
      "cars_data.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "How many countries has more than 2 car makers ? | car_makers : car_makers.country , car_makers.id , car_makers.maker , car_makers.fullname , car_makers.* | countries : countries.continent , countries.countryid , countries.countryname , countries.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_makers.country",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.fullname",
      "car_makers.*",
      "countries.continent",
      "countries.countryid",
      "countries.countryname",
      "countries.*",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What is the number of countries with more than 2 car makers ? | car_makers : car_makers.country , car_makers.id , car_makers.maker , car_makers.fullname , car_makers.* | countries : countries.countryid , countries.continent , countries.countryname , countries.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_makers.country",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.fullname",
      "car_makers.*",
      "countries.countryid",
      "countries.continent",
      "countries.countryname",
      "countries.*",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "How many cars has over 6 cylinders? | cars_data : cars_data.cylinders , cars_data.id , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.cylinders",
      "cars_data.id",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What is the number of carsw ith over 6 cylinders? | cars_data : cars_data.cylinders , cars_data.id , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.cylinders",
      "cars_data.id",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "For the cars with 4 cylinders, which model has the largest horsepower? | cars_data : cars_data.cylinders , cars_data.horsepower , cars_data.id , cars_data.weight , cars_data.accelerate , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.id",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "For all of the 4 cylinder cars, which model has the most horsepower? | cars_data : cars_data.horsepower , cars_data.cylinders , cars_data.id , cars_data.weight , cars_data.accelerate , cars_data.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.horsepower",
      "cars_data.cylinders",
      "cars_data.id",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name. | cars_data : cars_data.horsepower , cars_data.cylinders , cars_data.id , cars_data.weight , cars_data.accelerate , cars_data.* | car_names : car_names.make , car_names.makeid , car_names.model , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.horsepower",
      "cars_data.cylinders",
      "cars_data.id",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*",
      "car_names.make",
      "car_names.makeid",
      "car_names.model",
      "car_names.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ? | car_names : car_names.make , car_names.makeid , car_names.model , car_names.* | cars_data : cars_data.horsepower , cars_data.cylinders , cars_data.id , cars_data.weight , cars_data.accelerate , cars_data.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_names.make",
      "car_names.makeid",
      "car_names.model",
      "car_names.*",
      "cars_data.horsepower",
      "cars_data.cylinders",
      "cars_data.id",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ? | cars_data : cars_data.mpg , cars_data.year , cars_data.cylinders , cars_data.id , cars_data.horsepower , cars_data.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.mpg",
      "cars_data.year",
      "cars_data.cylinders",
      "cars_data.id",
      "cars_data.horsepower",
      "cars_data.*",
      "car_names.make",
      "car_names.model",
      "car_names.makeid",
      "car_names.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ? | cars_data : cars_data.mpg , cars_data.year , cars_data.cylinders , cars_data.id , cars_data.horsepower , cars_data.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.mpg",
      "cars_data.year",
      "cars_data.cylinders",
      "cars_data.id",
      "cars_data.horsepower",
      "cars_data.*",
      "car_names.make",
      "car_names.model",
      "car_names.makeid",
      "car_names.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'? | car_makers : car_makers.fullname ( Ford Motor Company ) , car_makers.id , car_makers.country , car_makers.maker ( ford ) , car_makers.* | model_list : model_list.model ( ford ) , model_list.maker , model_list.modelid , model_list.* | cars_data : cars_data.weight , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.accelerate , cars_data.* | car_names : car_names.make , car_names.model ( ford ) , car_names.makeid , car_names.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_makers.fullname",
      "car_makers.id",
      "car_makers.country",
      "car_makers.maker",
      "car_makers.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "cars_data.weight",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.accelerate",
      "cars_data.*",
      "car_names.make",
      "car_names.model",
      "car_names.makeid",
      "car_names.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company? | car_makers : car_makers.fullname ( Ford Motor Company ) , car_makers.maker ( ford ) , car_makers.id , car_makers.country , car_makers.* | model_list : model_list.model ( ford ) , model_list.maker , model_list.modelid , model_list.* | cars_data : cars_data.weight , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.accelerate , cars_data.* | car_names : car_names.make , car_names.model ( ford ) , car_names.makeid , car_names.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_makers.fullname",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "cars_data.weight",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.accelerate",
      "cars_data.*",
      "car_names.make",
      "car_names.model",
      "car_names.makeid",
      "car_names.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What are the name of the countries where there is not a single car maker? | countries : countries.countryname , countries.continent , countries.countryid , countries.* | car_makers : car_makers.country , car_makers.id , car_makers.maker , car_makers.fullname , car_makers.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*",
    "output_sequence": " | ",
    "tc_original": [
      "countries.countryname",
      "countries.continent",
      "countries.countryid",
      "countries.*",
      "car_makers.country",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.fullname",
      "car_makers.*",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What are the names of the countries with no car makers? | countries : countries.countryname , countries.continent , countries.countryid , countries.* | car_makers : car_makers.country , car_makers.id , car_makers.maker , car_makers.fullname , car_makers.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*",
    "output_sequence": " | ",
    "tc_original": [
      "countries.countryname",
      "countries.continent",
      "countries.countryid",
      "countries.*",
      "car_makers.country",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.fullname",
      "car_makers.*",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker . | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars? | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*",
      "car_names.make",
      "car_names.model",
      "car_names.makeid",
      "car_names.*",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.weight",
      "cars_data.accelerate",
      "cars_data.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model? | countries : countries.countryname , countries.countryid , countries.continent , countries.* | car_makers : car_makers.id , car_makers.fullname ( Fiat ) , car_makers.country , car_makers.maker ( fiat ) , car_makers.* | model_list : model_list.model ( fiat ) , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model ( fiat ) , car_names.make , car_names.makeid , car_names.*",
    "output_sequence": " | ",
    "tc_original": [
      "countries.countryname",
      "countries.countryid",
      "countries.continent",
      "countries.*",
      "car_makers.id",
      "car_makers.fullname",
      "car_makers.country",
      "car_makers.maker",
      "car_makers.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ? | countries : countries.countryname , countries.countryid , countries.continent , countries.* | model_list : model_list.model ( fiat ) , model_list.maker , model_list.modelid , model_list.* | car_makers : car_makers.id , car_makers.country , car_makers.maker ( fiat ) , car_makers.fullname ( Fiat ) , car_makers.* | car_names : car_names.model ( fiat ) , car_names.make , car_names.makeid , car_names.*",
    "output_sequence": " | ",
    "tc_original": [
      "countries.countryname",
      "countries.countryid",
      "countries.continent",
      "countries.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "car_makers.id",
      "car_makers.country",
      "car_makers.maker",
      "car_makers.fullname",
      "car_makers.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Which country does Airline \"JetBlue Airways\" belong to? | airlines : airlines.airline ( JetBlue Airways ) , airlines.country , airlines.abbreviation ( JetBlue ) , airlines.uid , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.airline",
      "airlines.country",
      "airlines.abbreviation",
      "airlines.uid",
      "airlines.*",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "What country is Jetblue Airways affiliated with? | airlines : airlines.airline ( JetBlue Airways ) , airlines.country , airlines.abbreviation ( JetBlue ) , airlines.uid , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.airline",
      "airlines.country",
      "airlines.abbreviation",
      "airlines.uid",
      "airlines.*",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "What is the abbreviation of Airline \"JetBlue Airways\"? | airlines : airlines.abbreviation ( JetBlue ) , airlines.airline ( JetBlue Airways ) , airlines.country , airlines.uid , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.abbreviation",
      "airlines.airline",
      "airlines.country",
      "airlines.uid",
      "airlines.*",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Which abbreviation corresponds to Jetblue Airways? | airlines : airlines.abbreviation ( JetBlue ) , airlines.airline ( JetBlue Airways ) , airlines.country , airlines.uid , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.abbreviation",
      "airlines.airline",
      "airlines.country",
      "airlines.uid",
      "airlines.*",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "List all airline names and their abbreviations in \"USA\". | airlines : airlines.country ( USA ) , airlines.airline , airlines.abbreviation , airlines.uid , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.country",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.uid",
      "airlines.*",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "What are the airline names and abbreviations for airlines in the USA? | airlines : airlines.country ( USA ) , airlines.airline , airlines.abbreviation , airlines.uid , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.country",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.uid",
      "airlines.*",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "List the airport code and name in the city of Anthony. | airports : airports.airportname ( Anthony ) , airports.airportcode , airports.city ( Anthony ) , airports.country , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.airportname",
      "airports.airportcode",
      "airports.city",
      "airports.country",
      "airports.countryabbrev",
      "airports.*",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Give the airport code and airport name corresonding to the city Anthony. | airports : airports.airportname ( Anthony ) , airports.airportcode , airports.city ( Anthony ) , airports.country , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.airportname",
      "airports.airportcode",
      "airports.city",
      "airports.country",
      "airports.countryabbrev",
      "airports.*",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "How many airlines do we have? | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.airline",
      "airlines.country",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "What is the total number of airlines? | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.airline",
      "airlines.country",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "How many airports do we have? | airports : airports.airportname , airports.country , airports.city , airports.airportcode , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.airportname",
      "airports.country",
      "airports.city",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Return the number of  airports. | airports : airports.airportname , airports.country , airports.city , airports.airportcode , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.airportname",
      "airports.country",
      "airports.city",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "How many flights do we have? | flights : flights.flightno , flights.airline , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.flightno",
      "flights.airline",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Return the number of flights. | flights : flights.flightno , flights.airline , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.flightno",
      "flights.airline",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Which airline has abbreviation 'UAL'? | airlines : airlines.abbreviation ( UAL ) , airlines.airline , airlines.country , airlines.uid , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.abbreviation",
      "airlines.airline",
      "airlines.country",
      "airlines.uid",
      "airlines.*",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Give the airline with abbreviation 'UAL'. | airlines : airlines.abbreviation ( UAL ) , airlines.airline , airlines.country , airlines.uid , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.abbreviation",
      "airlines.airline",
      "airlines.country",
      "airlines.uid",
      "airlines.*",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "How many airlines are from USA? | airlines : airlines.country ( USA ) , airlines.airline , airlines.uid , airlines.abbreviation , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.country",
      "airlines.airline",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Return the number of airlines in the USA. | airlines : airlines.country ( USA ) , airlines.airline , airlines.uid , airlines.abbreviation , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.country",
      "airlines.airline",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Which city and country is the Alton airport at? | airports : airports.city ( Alton ) , airports.country , airports.airportname ( Alton ) , airports.countryabbrev , airports.airportcode , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.country , airlines.airline , airlines.uid , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.city",
      "airports.country",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.airportcode",
      "airports.*",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*",
      "airlines.country",
      "airlines.airline",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Give the city and country for the Alton airport. | airports : airports.city ( Alton ) , airports.country , airports.airportname ( Alton ) , airports.countryabbrev , airports.airportcode , airports.* | flights : flights.airline , flights.sourceairport , flights.destairport , flights.flightno , flights.* | airlines : airlines.country , airlines.airline , airlines.uid , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.city",
      "airports.country",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.airportcode",
      "airports.*",
      "flights.airline",
      "flights.sourceairport",
      "flights.destairport",
      "flights.flightno",
      "flights.*",
      "airlines.country",
      "airlines.airline",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "What is the airport name for airport 'AKO'? | airports : airports.airportname , airports.airportcode ( AKO ) , airports.country , airports.city , airports.countryabbrev , airports.* | flights : flights.airline , flights.sourceairport ( AKO ) , flights.destairport ( AKO ) , flights.flightno , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.airportname",
      "airports.airportcode",
      "airports.country",
      "airports.city",
      "airports.countryabbrev",
      "airports.*",
      "flights.airline",
      "flights.sourceairport",
      "flights.destairport",
      "flights.flightno",
      "flights.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Return the name of the airport with code 'AKO'. | airports : airports.airportcode ( AKO ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.* | flights : flights.airline , flights.sourceairport ( AKO ) , flights.destairport ( AKO ) , flights.flightno , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.airportcode",
      "airports.airportname",
      "airports.city",
      "airports.country",
      "airports.countryabbrev",
      "airports.*",
      "flights.airline",
      "flights.sourceairport",
      "flights.destairport",
      "flights.flightno",
      "flights.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "What are airport names at City 'Aberdeen'? | airports : airports.city ( Aberdeen ) , airports.airportname , airports.country , airports.airportcode , airports.countryabbrev , airports.* | flights : flights.airline , flights.destairport , flights.flightno , flights.sourceairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.city",
      "airports.airportname",
      "airports.country",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "flights.airline",
      "flights.destairport",
      "flights.flightno",
      "flights.sourceairport",
      "flights.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "What are the names of airports in Aberdeen? | airports : airports.city ( Aberdeen ) , airports.airportname , airports.country , airports.airportcode , airports.countryabbrev , airports.* | flights : flights.airline , flights.destairport , flights.flightno , flights.sourceairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.city",
      "airports.airportname",
      "airports.country",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "flights.airline",
      "flights.destairport",
      "flights.flightno",
      "flights.sourceairport",
      "flights.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "How many flights depart from 'APG'? | flights : flights.sourceairport ( APG ) , flights.destairport ( APG ) , flights.airline , flights.flightno , flights.* | airports : airports.city , airports.country , airports.airportcode ( APG ) , airports.airportname , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.sourceairport",
      "flights.destairport",
      "flights.airline",
      "flights.flightno",
      "flights.*",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Count the number of flights departing from 'APG'. | flights : flights.sourceairport ( APG ) , flights.destairport ( APG ) , flights.airline , flights.flightno , flights.* | airports : airports.city , airports.country , airports.airportcode ( APG ) , airports.airportname , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.sourceairport",
      "flights.destairport",
      "flights.airline",
      "flights.flightno",
      "flights.*",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "How many flights have destination ATO? | flights : flights.destairport ( ATO ) , flights.flightno , flights.airline , flights.sourceairport ( ATO ) , flights.* | airports : airports.city , airports.country , airports.airportcode ( ATO ) , airports.airportname , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.airline , airlines.abbreviation , airlines.uid , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.destairport",
      "flights.flightno",
      "flights.airline",
      "flights.sourceairport",
      "flights.*",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*",
      "airlines.country",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.uid",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Count the number of flights into ATO. | flights : flights.sourceairport ( ATO ) , flights.destairport ( ATO ) , flights.airline , flights.flightno , flights.* | airports : airports.airportcode ( ATO ) , airports.city , airports.country , airports.airportname , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.sourceairport",
      "flights.destairport",
      "flights.airline",
      "flights.flightno",
      "flights.*",
      "airports.airportcode",
      "airports.city",
      "airports.country",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "How many flights depart from City Aberdeen? | airports : airports.city ( Aberdeen ) , airports.airportname , airports.country , airports.airportcode , airports.countryabbrev , airports.* | flights : flights.sourceairport , flights.destairport , flights.flightno , flights.airline , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.city",
      "airports.airportname",
      "airports.country",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "flights.sourceairport",
      "flights.destairport",
      "flights.flightno",
      "flights.airline",
      "flights.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Return the number of flights departing from Aberdeen. | airports : airports.city ( Aberdeen ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.sourceairport , flights.destairport , flights.flightno , flights.airline , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.city",
      "airports.airportname",
      "airports.airportcode",
      "airports.country",
      "airports.countryabbrev",
      "airports.*",
      "flights.sourceairport",
      "flights.destairport",
      "flights.flightno",
      "flights.airline",
      "flights.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "How many flights arriving in Aberdeen city? | airports : airports.city ( Aberdeen ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.sourceairport , flights.destairport , flights.flightno , flights.airline , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.city",
      "airports.airportname",
      "airports.airportcode",
      "airports.country",
      "airports.countryabbrev",
      "airports.*",
      "flights.sourceairport",
      "flights.destairport",
      "flights.flightno",
      "flights.airline",
      "flights.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Return the number of flights arriving in Aberdeen. | airports : airports.city ( Aberdeen ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.sourceairport , flights.destairport , flights.flightno , flights.airline , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.city",
      "airports.airportname",
      "airports.airportcode",
      "airports.country",
      "airports.countryabbrev",
      "airports.*",
      "flights.sourceairport",
      "flights.destairport",
      "flights.flightno",
      "flights.airline",
      "flights.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'? | airports : airports.city ( Aberdeen , Ashley ) , airports.country , airports.airportname ( Ashley ) , airports.airportcode , airports.countryabbrev , airports.* | flights : flights.sourceairport , flights.destairport , flights.flightno , flights.airline , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.city",
      "airports.country",
      "airports.airportname",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "flights.sourceairport",
      "flights.destairport",
      "flights.flightno",
      "flights.airline",
      "flights.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "How many flights fly from Aberdeen to Ashley? | airports : airports.city ( Aberdeen , Ashley ) , airports.airportname ( Ashley ) , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.sourceairport , flights.destairport , flights.flightno , flights.airline , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.city",
      "airports.airportname",
      "airports.airportcode",
      "airports.country",
      "airports.countryabbrev",
      "airports.*",
      "flights.sourceairport",
      "flights.destairport",
      "flights.flightno",
      "flights.airline",
      "flights.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "How many flights does airline 'JetBlue Airways' have? | airlines : airlines.airline ( JetBlue Airways ) , airlines.abbreviation ( JetBlue ) , airlines.country , airlines.uid , airlines.* | flights : flights.flightno , flights.airline , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.country",
      "airlines.uid",
      "airlines.*",
      "flights.flightno",
      "flights.airline",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Give the number of Jetblue Airways flights. | airlines : airlines.airline ( JetBlue Airways ) , airlines.abbreviation ( JetBlue ) , airlines.country , airlines.uid , airlines.* | flights : flights.flightno , flights.airline , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.country",
      "airlines.uid",
      "airlines.*",
      "flights.flightno",
      "flights.airline",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "How many 'United Airlines' flights go to Airport 'ASY'? | flights : flights.destairport ( ASY ) , flights.sourceairport ( ASY ) , flights.airline , flights.flightno , flights.* | airlines : airlines.airline ( United Airlines ) , airlines.country , airlines.uid , airlines.abbreviation , airlines.* | airports : airports.airportname , airports.airportcode ( ASY ) , airports.country , airports.city , airports.countryabbrev , airports.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.destairport",
      "flights.sourceairport",
      "flights.airline",
      "flights.flightno",
      "flights.*",
      "airlines.airline",
      "airlines.country",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*",
      "airports.airportname",
      "airports.airportcode",
      "airports.country",
      "airports.city",
      "airports.countryabbrev",
      "airports.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Count the number of United Airlines flights arriving in ASY Airport. | flights : flights.destairport ( ASY ) , flights.sourceairport ( ASY ) , flights.airline , flights.flightno , flights.* | airlines : airlines.airline ( United Airlines ) , airlines.country , airlines.uid , airlines.abbreviation , airlines.* | airports : airports.airportname , airports.airportcode ( ASY ) , airports.country , airports.city , airports.countryabbrev , airports.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.destairport",
      "flights.sourceairport",
      "flights.airline",
      "flights.flightno",
      "flights.*",
      "airlines.airline",
      "airlines.country",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*",
      "airports.airportname",
      "airports.airportcode",
      "airports.country",
      "airports.city",
      "airports.countryabbrev",
      "airports.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "How many 'United Airlines' flights depart from Airport 'AHD'? | airlines : airlines.airline ( United Airlines ) , airlines.country , airlines.uid , airlines.abbreviation , airlines.* | flights : flights.sourceairport ( AHD ) , flights.destairport ( AHD ) , flights.airline , flights.flightno , flights.* | airports : airports.airportcode ( AHD ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.airline",
      "airlines.country",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*",
      "flights.sourceairport",
      "flights.destairport",
      "flights.airline",
      "flights.flightno",
      "flights.*",
      "airports.airportcode",
      "airports.airportname",
      "airports.city",
      "airports.country",
      "airports.countryabbrev",
      "airports.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Return the number of United Airlines flights leaving from AHD Airport. | flights : flights.sourceairport ( AHD ) , flights.destairport ( AHD ) , flights.airline , flights.flightno , flights.* | airlines : airlines.airline ( United Airlines ) , airlines.country , airlines.uid , airlines.abbreviation , airlines.* | airports : airports.airportcode ( AHD ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.sourceairport",
      "flights.destairport",
      "flights.airline",
      "flights.flightno",
      "flights.*",
      "airlines.airline",
      "airlines.country",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*",
      "airports.airportcode",
      "airports.airportname",
      "airports.city",
      "airports.country",
      "airports.countryabbrev",
      "airports.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "How many United Airlines flights go to City 'Aberdeen'? | airports : airports.city ( Aberdeen ) , airports.airportname , airports.country , airports.airportcode , airports.countryabbrev , airports.* | airlines : airlines.airline ( United Airlines ) , airlines.country , airlines.uid , airlines.abbreviation , airlines.* | flights : flights.destairport , flights.airline , flights.flightno , flights.sourceairport , flights.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.city",
      "airports.airportname",
      "airports.country",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "airlines.airline",
      "airlines.country",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*",
      "flights.destairport",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Count the number of United Airlines flights that arrive in Aberdeen. | airports : airports.city ( Aberdeen ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | airlines : airlines.airline ( United Airlines ) , airlines.country , airlines.uid , airlines.abbreviation , airlines.* | flights : flights.sourceairport , flights.destairport , flights.airline , flights.flightno , flights.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.city",
      "airports.airportname",
      "airports.airportcode",
      "airports.country",
      "airports.countryabbrev",
      "airports.*",
      "airlines.airline",
      "airlines.country",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*",
      "flights.sourceairport",
      "flights.destairport",
      "flights.airline",
      "flights.flightno",
      "flights.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Which city has most number of arriving flights? | flights : flights.sourceairport , flights.destairport , flights.airline , flights.flightno , flights.* | airports : airports.city , airports.country , airports.airportname , airports.airportcode , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.sourceairport",
      "flights.destairport",
      "flights.airline",
      "flights.flightno",
      "flights.*",
      "airports.city",
      "airports.country",
      "airports.airportname",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Which city has the most frequent destination airport? | airports : airports.city , airports.airportname , airports.country , airports.airportcode , airports.countryabbrev , airports.* | flights : flights.destairport , flights.airline , flights.flightno , flights.sourceairport , flights.* | airlines : airlines.country , airlines.airline , airlines.uid , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.city",
      "airports.airportname",
      "airports.country",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "flights.destairport",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.*",
      "airlines.country",
      "airlines.airline",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Which city has most number of departing flights? | flights : flights.sourceairport , flights.destairport , flights.flightno , flights.airline , flights.* | airports : airports.city , airports.country , airports.airportname , airports.airportcode , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.sourceairport",
      "flights.destairport",
      "flights.flightno",
      "flights.airline",
      "flights.*",
      "airports.city",
      "airports.country",
      "airports.airportname",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Which city is the most frequent source airport? | airports : airports.city , airports.airportname , airports.country , airports.airportcode , airports.countryabbrev , airports.* | flights : flights.sourceairport , flights.airline , flights.flightno , flights.destairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.city",
      "airports.airportname",
      "airports.country",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "flights.sourceairport",
      "flights.airline",
      "flights.flightno",
      "flights.destairport",
      "flights.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "What is the code of airport that has the highest number of flights? | flights : flights.sourceairport , flights.flightno , flights.destairport , flights.airline , flights.* | airports : airports.airportcode , airports.country , airports.city , airports.airportname , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.airline , airlines.uid , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.sourceairport",
      "flights.flightno",
      "flights.destairport",
      "flights.airline",
      "flights.*",
      "airports.airportcode",
      "airports.country",
      "airports.city",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*",
      "airlines.country",
      "airlines.airline",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "What is the airport code of the airport with the most flights? | flights : flights.sourceairport , flights.destairport , flights.flightno , flights.airline , flights.* | airports : airports.airportcode , airports.country , airports.city , airports.airportname , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.airline , airlines.uid , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.sourceairport",
      "flights.destairport",
      "flights.flightno",
      "flights.airline",
      "flights.*",
      "airports.airportcode",
      "airports.country",
      "airports.city",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*",
      "airlines.country",
      "airlines.airline",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "What is the code of airport that has fewest number of flights? | flights : flights.sourceairport , flights.flightno , flights.destairport , flights.airline , flights.* | airports : airports.airportcode , airports.airportname , airports.country , airports.city , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.airline , airlines.uid , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.sourceairport",
      "flights.flightno",
      "flights.destairport",
      "flights.airline",
      "flights.*",
      "airports.airportcode",
      "airports.airportname",
      "airports.country",
      "airports.city",
      "airports.countryabbrev",
      "airports.*",
      "airlines.country",
      "airlines.airline",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Give the code of the airport with the least flights. | flights : flights.sourceairport , flights.destairport , flights.flightno , flights.airline , flights.* | airports : airports.airportcode , airports.city , airports.country , airports.airportname , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.airline , airlines.uid , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.sourceairport",
      "flights.destairport",
      "flights.flightno",
      "flights.airline",
      "flights.*",
      "airports.airportcode",
      "airports.city",
      "airports.country",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*",
      "airlines.country",
      "airlines.airline",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Which airline has most number of flights? | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*",
      "airlines.airline",
      "airlines.country",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "What airline serves the most flights? | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*",
      "airlines.airline",
      "airlines.country",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Find the abbreviation and country of the airline that has fewest number of flights? | airlines : airlines.abbreviation , airlines.country , airlines.airline , airlines.uid , airlines.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.abbreviation",
      "airlines.country",
      "airlines.airline",
      "airlines.uid",
      "airlines.*",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "What is the abbreviation of the airilne has the fewest flights and what country is it in? | airlines : airlines.abbreviation , airlines.country , airlines.airline , airlines.uid , airlines.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.abbreviation",
      "airlines.country",
      "airlines.airline",
      "airlines.uid",
      "airlines.*",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "What are airlines that have some flight departing from airport 'AHD'? | flights : flights.sourceairport ( AHD ) , flights.destairport ( AHD ) , flights.airline , flights.flightno , flights.* | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | airports : airports.city , airports.country , airports.airportcode ( AHD ) , airports.airportname , airports.countryabbrev , airports.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.sourceairport",
      "flights.destairport",
      "flights.airline",
      "flights.flightno",
      "flights.*",
      "airlines.airline",
      "airlines.uid",
      "airlines.country",
      "airlines.abbreviation",
      "airlines.*",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Which airlines have a flight with source airport AHD? | flights : flights.sourceairport ( AHD ) , flights.airline , flights.flightno , flights.destairport ( AHD ) , flights.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.* | airports : airports.city , airports.country , airports.airportcode ( AHD ) , airports.airportname , airports.countryabbrev , airports.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.sourceairport",
      "flights.airline",
      "flights.flightno",
      "flights.destairport",
      "flights.*",
      "airlines.airline",
      "airlines.country",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "What are airlines that have flights arriving at airport 'AHD'? | flights : flights.destairport ( AHD ) , flights.sourceairport ( AHD ) , flights.airline , flights.flightno , flights.* | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | airports : airports.airportcode ( AHD ) , airports.city , airports.country , airports.airportname , airports.countryabbrev , airports.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.destairport",
      "flights.sourceairport",
      "flights.airline",
      "flights.flightno",
      "flights.*",
      "airlines.airline",
      "airlines.uid",
      "airlines.country",
      "airlines.abbreviation",
      "airlines.*",
      "airports.airportcode",
      "airports.city",
      "airports.country",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Which airlines have a flight with destination airport AHD? | flights : flights.destairport ( AHD ) , flights.airline , flights.flightno , flights.sourceairport ( AHD ) , flights.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.* | airports : airports.city , airports.country , airports.airportcode ( AHD ) , airports.airportname , airports.countryabbrev , airports.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.destairport",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.*",
      "airlines.airline",
      "airlines.country",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Find all airlines that have flights from both airports 'APG' and 'CVO'. | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.sourceairport ( APG , CVO ) , flights.airline , flights.destairport ( APG , CVO ) , flights.flightno , flights.* | airports : airports.airportcode ( APG , CVO ) , airports.airportname , airports.country , airports.city , airports.countryabbrev , airports.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.airline",
      "airlines.uid",
      "airlines.country",
      "airlines.abbreviation",
      "airlines.*",
      "flights.sourceairport",
      "flights.airline",
      "flights.destairport",
      "flights.flightno",
      "flights.*",
      "airports.airportcode",
      "airports.airportname",
      "airports.country",
      "airports.city",
      "airports.countryabbrev",
      "airports.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Which airlines have departing flights from both APG and CVO airports? | flights : flights.sourceairport ( APG , CVO ) , flights.airline , flights.destairport ( APG , CVO ) , flights.flightno , flights.* | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | airports : airports.airportcode ( APG , CVO ) , airports.country , airports.city , airports.airportname , airports.countryabbrev , airports.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.sourceairport",
      "flights.airline",
      "flights.destairport",
      "flights.flightno",
      "flights.*",
      "airlines.airline",
      "airlines.uid",
      "airlines.country",
      "airlines.abbreviation",
      "airlines.*",
      "airports.airportcode",
      "airports.country",
      "airports.city",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Find all airlines that have flights from airport 'CVO' but not from 'APG'. | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.sourceairport ( APG , CVO ) , flights.destairport ( APG , CVO ) , flights.airline , flights.flightno , flights.* | airports : airports.airportcode ( APG , CVO ) , airports.airportname , airports.country , airports.city , airports.countryabbrev , airports.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.airline",
      "airlines.uid",
      "airlines.country",
      "airlines.abbreviation",
      "airlines.*",
      "flights.sourceairport",
      "flights.destairport",
      "flights.airline",
      "flights.flightno",
      "flights.*",
      "airports.airportcode",
      "airports.airportname",
      "airports.country",
      "airports.city",
      "airports.countryabbrev",
      "airports.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Which airlines have departures from CVO but not from APG airports? | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.sourceairport ( APG , CVO ) , flights.destairport ( APG , CVO ) , flights.airline , flights.flightno , flights.* | airports : airports.airportcode ( APG , CVO ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.airline",
      "airlines.uid",
      "airlines.country",
      "airlines.abbreviation",
      "airlines.*",
      "flights.sourceairport",
      "flights.destairport",
      "flights.airline",
      "flights.flightno",
      "flights.*",
      "airports.airportcode",
      "airports.airportname",
      "airports.city",
      "airports.country",
      "airports.countryabbrev",
      "airports.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Find all airlines that have at least 10 flights. | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*",
      "airlines.airline",
      "airlines.uid",
      "airlines.country",
      "airlines.abbreviation",
      "airlines.*",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Which airlines have at least 10 flights? | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*",
      "airlines.airline",
      "airlines.uid",
      "airlines.country",
      "airlines.abbreviation",
      "airlines.*",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Find all airlines that have fewer than 200 flights. | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.airline",
      "airlines.uid",
      "airlines.country",
      "airlines.abbreviation",
      "airlines.*",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Which airlines have less than 200 flights? | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*",
      "airlines.airline",
      "airlines.uid",
      "airlines.country",
      "airlines.abbreviation",
      "airlines.*",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "What are flight numbers of Airline \"United Airlines\"? | airlines : airlines.airline ( United Airlines ) , airlines.country , airlines.abbreviation , airlines.uid , airlines.* | flights : flights.flightno , flights.airline , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.airline",
      "airlines.country",
      "airlines.abbreviation",
      "airlines.uid",
      "airlines.*",
      "flights.flightno",
      "flights.airline",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Which flight numbers correspond to United Airlines flights? | flights : flights.flightno , flights.airline , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.airline ( United Airlines ) , airlines.country , airlines.abbreviation , airlines.uid , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.flightno",
      "flights.airline",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*",
      "airlines.airline",
      "airlines.country",
      "airlines.abbreviation",
      "airlines.uid",
      "airlines.*",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "What are flight numbers of flights departing from Airport \"APG\"? | flights : flights.flightno , flights.destairport ( APG ) , flights.sourceairport ( APG ) , flights.airline , flights.* | airports : airports.airportname , airports.airportcode ( APG ) , airports.city , airports.country , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.airline , airlines.abbreviation , airlines.uid , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.flightno",
      "flights.destairport",
      "flights.sourceairport",
      "flights.airline",
      "flights.*",
      "airports.airportname",
      "airports.airportcode",
      "airports.city",
      "airports.country",
      "airports.countryabbrev",
      "airports.*",
      "airlines.country",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.uid",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Give the flight numbers of flights leaving from APG. | flights : flights.flightno , flights.sourceairport ( APG ) , flights.destairport ( APG ) , flights.airline , flights.* | airports : airports.city , airports.country , airports.airportcode ( APG ) , airports.airportname , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.airline , airlines.uid , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.airline",
      "flights.*",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*",
      "airlines.country",
      "airlines.airline",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "What are flight numbers of flights arriving at Airport \"APG\"? | flights : flights.destairport ( APG ) , flights.flightno , flights.sourceairport ( APG ) , flights.airline , flights.* | airports : airports.airportname , airports.city , airports.airportcode ( APG ) , airports.country , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.destairport",
      "flights.flightno",
      "flights.sourceairport",
      "flights.airline",
      "flights.*",
      "airports.airportname",
      "airports.city",
      "airports.airportcode",
      "airports.country",
      "airports.countryabbrev",
      "airports.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Give the flight numbers of flights landing at APG. | flights : flights.flightno , flights.destairport ( APG ) , flights.sourceairport ( APG ) , flights.airline , flights.* | airports : airports.city , airports.country , airports.airportcode ( APG ) , airports.airportname , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.flightno",
      "flights.destairport",
      "flights.sourceairport",
      "flights.airline",
      "flights.*",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "What are flight numbers of flights departing from City \"Aberdeen \"? | flights : flights.flightno , flights.sourceairport , flights.airline , flights.destairport , flights.* | airports : airports.city ( Aberdeen ) , airports.airportname , airports.country , airports.airportcode , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.airline , airlines.uid , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.flightno",
      "flights.sourceairport",
      "flights.airline",
      "flights.destairport",
      "flights.*",
      "airports.city",
      "airports.airportname",
      "airports.country",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "airlines.country",
      "airlines.airline",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Give the flight numbers of flights leaving from Aberdeen. | flights : flights.flightno , flights.sourceairport , flights.airline , flights.destairport , flights.* | airports : airports.city ( Aberdeen ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.airline , airlines.uid , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.flightno",
      "flights.sourceairport",
      "flights.airline",
      "flights.destairport",
      "flights.*",
      "airports.city",
      "airports.airportname",
      "airports.airportcode",
      "airports.country",
      "airports.countryabbrev",
      "airports.*",
      "airlines.country",
      "airlines.airline",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "What are flight numbers of flights arriving at City \"Aberdeen\"? | airports : airports.city ( Aberdeen ) , airports.airportname , airports.country , airports.airportcode , airports.countryabbrev , airports.* | flights : flights.flightno , flights.destairport , flights.sourceairport , flights.airline , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.city",
      "airports.airportname",
      "airports.country",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "flights.flightno",
      "flights.destairport",
      "flights.sourceairport",
      "flights.airline",
      "flights.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Give the flight numbers of flights arriving in Aberdeen. | flights : flights.flightno , flights.sourceairport , flights.destairport , flights.airline , flights.* | airports : airports.city ( Aberdeen ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.airline",
      "flights.*",
      "airports.city",
      "airports.airportname",
      "airports.airportcode",
      "airports.country",
      "airports.countryabbrev",
      "airports.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Find the number of flights landing in the city of Aberdeen or Abilene. | airports : airports.city ( Aberdeen , Abilene ) , airports.country , airports.airportname , airports.airportcode , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.destairport , flights.sourceairport , flights.* | airlines : airlines.country , airlines.airline , airlines.uid , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.city",
      "airports.country",
      "airports.airportname",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "flights.airline",
      "flights.flightno",
      "flights.destairport",
      "flights.sourceairport",
      "flights.*",
      "airlines.country",
      "airlines.airline",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "How many flights land in Aberdeen or Abilene? | airports : airports.city ( Aberdeen , Abilene ) , airports.airportname , airports.country , airports.airportcode , airports.countryabbrev , airports.* | flights : flights.airline , flights.sourceairport , flights.flightno , flights.destairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.city",
      "airports.airportname",
      "airports.country",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "flights.airline",
      "flights.sourceairport",
      "flights.flightno",
      "flights.destairport",
      "flights.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Find the name of airports which do not have any flight in and out. | airports : airports.airportname , airports.country , airports.city , airports.airportcode , airports.countryabbrev , airports.* | flights : flights.sourceairport , flights.destairport , flights.flightno , flights.airline , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.airportname",
      "airports.country",
      "airports.city",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "flights.sourceairport",
      "flights.destairport",
      "flights.flightno",
      "flights.airline",
      "flights.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "Which airports do not have departing or arriving flights? | airports : airports.airportname , airports.country , airports.airportcode , airports.city , airports.countryabbrev , airports.* | flights : flights.sourceairport , flights.destairport , flights.flightno , flights.airline , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.airportname",
      "airports.country",
      "airports.airportcode",
      "airports.city",
      "airports.countryabbrev",
      "airports.*",
      "flights.sourceairport",
      "flights.destairport",
      "flights.flightno",
      "flights.airline",
      "flights.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "How many employees are there? | employee : employee.employee_id , employee.name , employee.age , employee.city , employee.* | hiring : hiring.employee_id , hiring.shop_id , hiring.start_from , hiring.is_full_time , hiring.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*",
    "output_sequence": " | ",
    "tc_original": [
      "employee.employee_id",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.*",
      "hiring.employee_id",
      "hiring.shop_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*",
      "shop.name",
      "shop.location",
      "shop.district",
      "shop.shop_id",
      "shop.number_products",
      "shop.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "Count the number of employees | employee : employee.employee_id , employee.name , employee.age , employee.city , employee.* | hiring : hiring.employee_id , hiring.shop_id , hiring.start_from , hiring.is_full_time , hiring.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*",
    "output_sequence": " | ",
    "tc_original": [
      "employee.employee_id",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.*",
      "hiring.employee_id",
      "hiring.shop_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*",
      "shop.name",
      "shop.location",
      "shop.district",
      "shop.shop_id",
      "shop.number_products",
      "shop.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "Sort employee names by their age in ascending order. | employee : employee.name , employee.age , employee.employee_id , employee.city , employee.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "employee.name",
      "employee.age",
      "employee.employee_id",
      "employee.city",
      "employee.*",
      "shop.name",
      "shop.location",
      "shop.district",
      "shop.shop_id",
      "shop.number_products",
      "shop.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "List the names of employees and sort in ascending order of age. | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.*",
      "shop.name",
      "shop.location",
      "shop.district",
      "shop.shop_id",
      "shop.number_products",
      "shop.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "What is the number of employees from each city? | employee : employee.city , employee.employee_id , employee.name , employee.age , employee.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | hiring : hiring.employee_id , hiring.shop_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "employee.city",
      "employee.employee_id",
      "employee.name",
      "employee.age",
      "employee.*",
      "shop.name",
      "shop.location",
      "shop.district",
      "shop.shop_id",
      "shop.number_products",
      "shop.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "hiring.employee_id",
      "hiring.shop_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "Count the number of employees for each city. | employee : employee.city , employee.employee_id , employee.name , employee.age , employee.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | hiring : hiring.employee_id , hiring.shop_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "employee.city",
      "employee.employee_id",
      "employee.name",
      "employee.age",
      "employee.*",
      "shop.name",
      "shop.location",
      "shop.district",
      "shop.shop_id",
      "shop.number_products",
      "shop.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "hiring.employee_id",
      "hiring.shop_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "Which cities do more than one employee under age 30 come from? | employee : employee.age , employee.city , employee.name , employee.employee_id , employee.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "employee.age",
      "employee.city",
      "employee.name",
      "employee.employee_id",
      "employee.*",
      "shop.name",
      "shop.location",
      "shop.district",
      "shop.shop_id",
      "shop.number_products",
      "shop.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "Find the cities that have more than one employee under age 30. | employee : employee.age , employee.city , employee.name , employee.employee_id , employee.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "employee.age",
      "employee.city",
      "employee.name",
      "employee.employee_id",
      "employee.*",
      "shop.name",
      "shop.location",
      "shop.district",
      "shop.shop_id",
      "shop.number_products",
      "shop.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "Find the number of shops in each location. | shop : shop.location , shop.name , shop.district , shop.shop_id , shop.number_products , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "shop.location",
      "shop.name",
      "shop.district",
      "shop.shop_id",
      "shop.number_products",
      "shop.*",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "How many shops are there in each location? | shop : shop.location , shop.district , shop.name , shop.shop_id , shop.number_products , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "shop.location",
      "shop.district",
      "shop.name",
      "shop.shop_id",
      "shop.number_products",
      "shop.*",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "Find the manager name and district of the shop whose number of products is the largest. | shop : shop.manager_name , shop.number_products , shop.district , shop.name , shop.location , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "shop.manager_name",
      "shop.number_products",
      "shop.district",
      "shop.name",
      "shop.location",
      "shop.*",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "What are the manager name and district of the shop that sells the largest number of products? | shop : shop.manager_name , shop.number_products , shop.district , shop.shop_id , shop.name , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*",
    "output_sequence": " | ",
    "tc_original": [
      "shop.manager_name",
      "shop.number_products",
      "shop.district",
      "shop.shop_id",
      "shop.name",
      "shop.*",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "find the minimum and maximum number of products of all stores. | shop : shop.number_products , shop.name , shop.location , shop.district , shop.shop_id , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "shop.number_products",
      "shop.name",
      "shop.location",
      "shop.district",
      "shop.shop_id",
      "shop.*",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "What are the minimum and maximum number of products across all the shops? | shop : shop.number_products , shop.name , shop.location , shop.district , shop.shop_id , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "shop.number_products",
      "shop.name",
      "shop.location",
      "shop.district",
      "shop.shop_id",
      "shop.*",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "Return the name, location and district of all shops in descending order of number of products. | shop : shop.number_products , shop.name , shop.location , shop.district , shop.shop_id , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "shop.number_products",
      "shop.name",
      "shop.location",
      "shop.district",
      "shop.shop_id",
      "shop.*",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "Sort all the shops by number products in descending order, and return the name, location and district of each shop. | shop : shop.number_products , shop.name , shop.district , shop.location , shop.shop_id , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "shop.number_products",
      "shop.name",
      "shop.district",
      "shop.location",
      "shop.shop_id",
      "shop.*",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "Find the names of stores whose number products is more than the average number of products. | shop : shop.number_products , shop.name , shop.shop_id , shop.location , shop.district , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "shop.number_products",
      "shop.name",
      "shop.shop_id",
      "shop.location",
      "shop.district",
      "shop.*",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "Which shops' number products is above the average? Give me the shop names. | shop : shop.number_products , shop.name , shop.shop_id , shop.location , shop.district , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "shop.number_products",
      "shop.name",
      "shop.shop_id",
      "shop.location",
      "shop.district",
      "shop.*",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "find the name of employee who was awarded the most times in the evaluation. | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus , evaluation.* | employee : employee.name , employee.employee_id , employee.age , employee.city , employee.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.employee_id , hiring.shop_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.bonus",
      "evaluation.*",
      "employee.name",
      "employee.employee_id",
      "employee.age",
      "employee.city",
      "employee.*",
      "shop.name",
      "shop.location",
      "shop.district",
      "shop.shop_id",
      "shop.number_products",
      "shop.*",
      "hiring.employee_id",
      "hiring.shop_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "Which employee received the most awards in evaluations? Give me the employee name. | employee : employee.name , employee.employee_id , employee.age , employee.city , employee.* | evaluation : evaluation.year_awarded , evaluation.employee_id , evaluation.bonus , evaluation.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.employee_id , hiring.shop_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "employee.name",
      "employee.employee_id",
      "employee.age",
      "employee.city",
      "employee.*",
      "evaluation.year_awarded",
      "evaluation.employee_id",
      "evaluation.bonus",
      "evaluation.*",
      "shop.name",
      "shop.location",
      "shop.district",
      "shop.shop_id",
      "shop.number_products",
      "shop.*",
      "hiring.employee_id",
      "hiring.shop_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "Find the name of the employee who got the highest one time bonus. | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | employee : employee.name , employee.employee_id , employee.age , employee.city , employee.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.employee_id , hiring.shop_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "employee.name",
      "employee.employee_id",
      "employee.age",
      "employee.city",
      "employee.*",
      "shop.name",
      "shop.location",
      "shop.district",
      "shop.shop_id",
      "shop.number_products",
      "shop.*",
      "hiring.employee_id",
      "hiring.shop_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "Which employee received the biggest bonus? Give me the employee name. | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | employee : employee.name , employee.employee_id , employee.age , employee.city , employee.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.employee_id , hiring.shop_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "employee.name",
      "employee.employee_id",
      "employee.age",
      "employee.city",
      "employee.*",
      "shop.name",
      "shop.location",
      "shop.district",
      "shop.shop_id",
      "shop.number_products",
      "shop.*",
      "hiring.employee_id",
      "hiring.shop_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "Find the names of employees who never won any award in the evaluation. | employee : employee.name , employee.employee_id , employee.age , employee.city , employee.* | evaluation : evaluation.year_awarded , evaluation.employee_id , evaluation.bonus , evaluation.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.employee_id , hiring.shop_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "employee.name",
      "employee.employee_id",
      "employee.age",
      "employee.city",
      "employee.*",
      "evaluation.year_awarded",
      "evaluation.employee_id",
      "evaluation.bonus",
      "evaluation.*",
      "shop.name",
      "shop.location",
      "shop.district",
      "shop.shop_id",
      "shop.number_products",
      "shop.*",
      "hiring.employee_id",
      "hiring.shop_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "What are the names of the employees who never received any evaluation? | employee : employee.name , employee.employee_id , employee.age , employee.city , employee.* | evaluation : evaluation.employee_id , evaluation.bonus , evaluation.year_awarded , evaluation.* | hiring : hiring.employee_id , hiring.shop_id , hiring.start_from , hiring.is_full_time , hiring.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.*",
    "output_sequence": " | ",
    "tc_original": [
      "employee.name",
      "employee.employee_id",
      "employee.age",
      "employee.city",
      "employee.*",
      "evaluation.employee_id",
      "evaluation.bonus",
      "evaluation.year_awarded",
      "evaluation.*",
      "hiring.employee_id",
      "hiring.shop_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*",
      "shop.name",
      "shop.location",
      "shop.district",
      "shop.shop_id",
      "shop.number_products",
      "shop.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "What is the name of the shop that is hiring the largest number of employees? | shop : shop.name , shop.shop_id , shop.location , shop.district , shop.number_products , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*",
    "output_sequence": " | ",
    "tc_original": [
      "shop.name",
      "shop.shop_id",
      "shop.location",
      "shop.district",
      "shop.number_products",
      "shop.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "Which shop has the most employees? Give me the shop name. | shop : shop.name , shop.shop_id , shop.location , shop.district , shop.number_products , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*",
    "output_sequence": " | ",
    "tc_original": [
      "shop.name",
      "shop.shop_id",
      "shop.location",
      "shop.district",
      "shop.number_products",
      "shop.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "Find the name of the shops that do not hire any employee. | shop : shop.name , shop.shop_id , shop.location , shop.district , shop.manager_name , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*",
    "output_sequence": " | ",
    "tc_original": [
      "shop.name",
      "shop.shop_id",
      "shop.location",
      "shop.district",
      "shop.manager_name",
      "shop.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "Which shops run with no employees? Find the shop names | shop : shop.name , shop.shop_id , shop.location , shop.district , shop.manager_name , shop.* | hiring : hiring.employee_id , hiring.shop_id , hiring.start_from , hiring.is_full_time , hiring.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*",
    "output_sequence": " | ",
    "tc_original": [
      "shop.name",
      "shop.shop_id",
      "shop.location",
      "shop.district",
      "shop.manager_name",
      "shop.*",
      "hiring.employee_id",
      "hiring.shop_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "Find the number of employees hired in each shop; show the shop name as well. | shop : shop.name , shop.shop_id , shop.manager_name , shop.location , shop.district , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*",
    "output_sequence": " | ",
    "tc_original": [
      "shop.name",
      "shop.shop_id",
      "shop.manager_name",
      "shop.location",
      "shop.district",
      "shop.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "For each shop, return the number of employees working there and the name of the shop. | shop : shop.name , shop.shop_id , shop.location , shop.district , shop.manager_name , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*",
    "output_sequence": " | ",
    "tc_original": [
      "shop.name",
      "shop.shop_id",
      "shop.location",
      "shop.district",
      "shop.manager_name",
      "shop.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "What is total bonus given in all evaluations? | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.*",
      "shop.name",
      "shop.location",
      "shop.district",
      "shop.shop_id",
      "shop.number_products",
      "shop.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "Find the total amount of bonus given in all the evaluations. | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.*",
      "shop.name",
      "shop.location",
      "shop.district",
      "shop.shop_id",
      "shop.number_products",
      "shop.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "Give me all the information about hiring. | hiring : hiring.employee_id , hiring.shop_id , hiring.start_from , hiring.is_full_time , hiring.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*",
    "output_sequence": " | ",
    "tc_original": [
      "hiring.employee_id",
      "hiring.shop_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.*",
      "shop.name",
      "shop.location",
      "shop.district",
      "shop.shop_id",
      "shop.number_products",
      "shop.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "What is all the information about hiring? | hiring : hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.shop_id , hiring.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*",
    "output_sequence": " | ",
    "tc_original": [
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.shop_id",
      "hiring.*",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.*",
      "shop.name",
      "shop.location",
      "shop.district",
      "shop.shop_id",
      "shop.number_products",
      "shop.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "Which district has both stores with less than 3000 products and stores with more than 10000 products? | shop : shop.number_products , shop.district , shop.name , shop.location , shop.shop_id , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "shop.number_products",
      "shop.district",
      "shop.name",
      "shop.location",
      "shop.shop_id",
      "shop.*",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products. | shop : shop.number_products , shop.district , shop.name , shop.location , shop.shop_id , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "shop.number_products",
      "shop.district",
      "shop.name",
      "shop.location",
      "shop.shop_id",
      "shop.*",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "How many different store locations are there? | shop : shop.location , shop.name , shop.district , shop.shop_id , shop.number_products , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "shop.location",
      "shop.name",
      "shop.district",
      "shop.shop_id",
      "shop.number_products",
      "shop.*",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "Count the number of distinct store locations. | shop : shop.location , shop.name , shop.district , shop.shop_id , shop.number_products , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "shop.location",
      "shop.name",
      "shop.district",
      "shop.shop_id",
      "shop.number_products",
      "shop.*",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "How many documents do we have? | documents : documents.document_name , documents.document_description , documents.document_id , documents.template_id , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.document_name",
      "documents.document_description",
      "documents.document_id",
      "documents.template_id",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.date_effective_to",
      "templates.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "Count the number of documents. | documents : documents.document_name , documents.document_description , documents.document_id , documents.template_id , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.document_name",
      "documents.document_description",
      "documents.document_id",
      "documents.template_id",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.date_effective_to",
      "templates.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "List document IDs, document names, and document descriptions for all documents. | documents : documents.document_name , documents.document_description , documents.document_id , documents.template_id , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.document_name",
      "documents.document_description",
      "documents.document_id",
      "documents.template_id",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.date_effective_to",
      "templates.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "What are the ids, names, and descriptions for all documents? | documents : documents.document_name , documents.document_description , documents.document_id , documents.template_id , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.document_name",
      "documents.document_description",
      "documents.document_id",
      "documents.template_id",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.date_effective_to",
      "templates.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "What is the document name and template id for document with description with the letter 'w' in it? | documents : documents.document_name , documents.document_description , documents.template_id , documents.document_id , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.document_name",
      "documents.document_description",
      "documents.template_id",
      "documents.document_id",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.date_effective_to",
      "templates.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "Return the names and template ids for documents that contain the letter w in their description. | documents : documents.document_name , documents.document_description , documents.template_id , documents.document_id , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.document_name",
      "documents.document_description",
      "documents.template_id",
      "documents.document_id",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.date_effective_to",
      "templates.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "What is the document id, template id and description for document named \"Robbin CV\"? | documents : documents.document_id , documents.document_name ( Robbin CV ) , documents.document_description , documents.template_id , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code ( CV ) , ref_template_types.template_type_description ( CV ) , ref_template_types.* | templates : templates.template_type_code ( CV ) , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.document_id",
      "documents.document_name",
      "documents.document_description",
      "documents.template_id",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_type_code",
      "templates.template_id",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.date_effective_to",
      "templates.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "Return the document id, template id, and description for the document with the name Robbin CV. | documents : documents.document_id , documents.document_name ( Robbin CV ) , documents.document_description , documents.template_id , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code ( CV ) , ref_template_types.template_type_description ( CV ) , ref_template_types.* | templates : templates.template_type_code ( CV ) , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.document_id",
      "documents.document_name",
      "documents.document_description",
      "documents.template_id",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_type_code",
      "templates.template_id",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.date_effective_to",
      "templates.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "How many different templates do all document use? | documents : documents.template_id , documents.document_name , documents.document_id , documents.document_description , documents.other_details , documents.* | templates : templates.template_id , templates.template_type_code , templates.template_details , templates.version_number , templates.date_effective_from , templates.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.template_id",
      "documents.document_name",
      "documents.document_id",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "templates.template_id",
      "templates.template_type_code",
      "templates.template_details",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "Count the number of different templates used for documents. | documents : documents.template_id , documents.document_name , documents.document_description , documents.document_id , documents.other_details , documents.* | templates : templates.template_id , templates.template_type_code , templates.template_details , templates.version_number , templates.date_effective_from , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.document_id",
      "documents.other_details",
      "documents.*",
      "templates.template_id",
      "templates.template_type_code",
      "templates.template_details",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "How many documents are using the template with type code 'PPT'? | templates : templates.template_type_code ( PPT ) , templates.template_id , templates.version_number , templates.template_details , templates.date_effective_from , templates.* | documents : documents.template_id , documents.document_name , documents.document_description , documents.document_id , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code ( PPT ) , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_id",
      "templates.version_number",
      "templates.template_details",
      "templates.date_effective_from",
      "templates.*",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.document_id",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "Count the number of documents that use the PPT template type. | templates : templates.template_type_code ( PPT ) , templates.template_id , templates.version_number , templates.template_details , templates.date_effective_from , templates.* | documents : documents.document_name , documents.template_id , documents.document_description , documents.document_id , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code ( PPT ) , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_id",
      "templates.version_number",
      "templates.template_details",
      "templates.date_effective_from",
      "templates.*",
      "documents.document_name",
      "documents.template_id",
      "documents.document_description",
      "documents.document_id",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "Show all template ids and number of documents using each template. | documents : documents.template_id , documents.document_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.template_details , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.template_id",
      "documents.document_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.template_details",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "What are all different template ids used for documents, and how many times were each of them used? | documents : documents.template_id , documents.document_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.template_id",
      "documents.document_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.date_effective_to",
      "templates.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "What is the id and type code for the template used by the most documents? | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.template_details , templates.date_effective_from , templates.* | documents : documents.template_id , documents.document_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_id",
      "templates.version_number",
      "templates.template_details",
      "templates.date_effective_from",
      "templates.*",
      "documents.template_id",
      "documents.document_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "Return the id and type code of the template that is used for the greatest number of documents. | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.template_details , templates.date_effective_from , templates.* | documents : documents.template_id , documents.document_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_id",
      "templates.version_number",
      "templates.template_details",
      "templates.date_effective_from",
      "templates.*",
      "documents.template_id",
      "documents.document_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "Show ids for all templates that are used by more than one document. | documents : documents.template_id , documents.document_id , documents.document_name , documents.document_description , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.template_details , templates.date_effective_from , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.template_id",
      "documents.document_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_type_code",
      "templates.template_details",
      "templates.date_effective_from",
      "templates.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "What are the template ids of any templates used in more than a single document? | documents : documents.template_id , documents.document_id , documents.document_name , documents.document_description , documents.other_details , documents.* | templates : templates.template_id , templates.template_details , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.template_id",
      "documents.document_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "templates.template_id",
      "templates.template_details",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "Show ids for all templates not used by any document. | templates : templates.template_id , templates.template_type_code , templates.template_details , templates.version_number , templates.date_effective_from , templates.* | documents : documents.template_id , documents.document_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_id",
      "templates.template_type_code",
      "templates.template_details",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "documents.template_id",
      "documents.document_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "What are the ids for templates that are not used in any documents? | templates : templates.template_id , templates.template_details , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.* | documents : documents.template_id , documents.document_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_id",
      "templates.template_details",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.*",
      "documents.template_id",
      "documents.document_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "How many templates do we have? | templates : templates.template_id , templates.template_type_code , templates.template_details , templates.version_number , templates.date_effective_from , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_id",
      "templates.template_type_code",
      "templates.template_details",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "Count the number of templates. | templates : templates.template_id , templates.template_type_code , templates.template_details , templates.version_number , templates.date_effective_from , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_id",
      "templates.template_type_code",
      "templates.template_details",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "Show template ids, version numbers, and template type codes for all templates. | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.template_details , templates.date_effective_from , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_id",
      "templates.version_number",
      "templates.template_details",
      "templates.date_effective_from",
      "templates.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "What are the ids, version numbers, and type codes for each template? | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.template_details , templates.date_effective_from , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_id",
      "templates.version_number",
      "templates.template_details",
      "templates.date_effective_from",
      "templates.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "Show all distinct template type codes for all templates. | templates : templates.template_type_code , templates.template_details , templates.template_id , templates.version_number , templates.date_effective_from , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_details",
      "templates.template_id",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "What are the different template type codes? | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_id",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.date_effective_to",
      "templates.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "What are the ids of templates with template type code PP or PPT? | templates : templates.template_type_code ( PP , PPT ) , templates.template_id , templates.version_number , templates.template_details , templates.date_effective_from , templates.* | ref_template_types : ref_template_types.template_type_code ( PP , PPT ) , ref_template_types.template_type_description , ref_template_types.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_id",
      "templates.version_number",
      "templates.template_details",
      "templates.date_effective_from",
      "templates.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "Return the ids of templates that have the code PP or PPT. | templates : templates.template_id , templates.template_type_code ( PP , PPT ) , templates.template_details , templates.version_number , templates.date_effective_from , templates.* | ref_template_types : ref_template_types.template_type_code ( PP , PPT ) , ref_template_types.template_type_description , ref_template_types.* | documents : documents.template_id , documents.document_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_id",
      "templates.template_type_code",
      "templates.template_details",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "documents.template_id",
      "documents.document_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "How many templates have template type code CV? | templates : templates.template_type_code ( CV ) , templates.template_id , templates.template_details , templates.version_number , templates.date_effective_from , templates.* | ref_template_types : ref_template_types.template_type_code ( CV ) , ref_template_types.template_type_description ( CV ) , ref_template_types.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_id",
      "templates.template_details",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "Count the number of templates of the type CV. | templates : templates.template_type_code ( CV ) , templates.template_id , templates.template_details , templates.version_number , templates.date_effective_from , templates.* | ref_template_types : ref_template_types.template_type_code ( CV ) , ref_template_types.template_type_description ( CV ) , ref_template_types.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_id",
      "templates.template_details",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "What is the version number and template type code for the template with version number later than 5? | templates : templates.version_number , templates.template_type_code , templates.template_id , templates.template_details , templates.date_effective_from , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.version_number",
      "templates.template_type_code",
      "templates.template_id",
      "templates.template_details",
      "templates.date_effective_from",
      "templates.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "Return the version numbers and template type codes of templates with a version number greater than 5. | templates : templates.version_number , templates.template_type_code , templates.template_details , templates.template_id , templates.date_effective_from , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.version_number",
      "templates.template_type_code",
      "templates.template_details",
      "templates.template_id",
      "templates.date_effective_from",
      "templates.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "Show all template type codes and number of templates for each. | templates : templates.template_type_code , templates.template_details , templates.template_id , templates.version_number , templates.date_effective_from , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_details",
      "templates.template_id",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "What are the different template type codes, and how many templates correspond to each? | templates : templates.template_type_code , templates.template_details , templates.template_id , templates.version_number , templates.date_effective_from , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_details",
      "templates.template_id",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "Which template type code has most number of templates? | templates : templates.template_type_code , templates.template_details , templates.template_id , templates.version_number , templates.date_effective_from , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_details",
      "templates.template_id",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "Return the type code of the template type that the most templates belong to. | templates : templates.template_type_code , templates.template_details , templates.template_id , templates.version_number , templates.date_effective_from , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_details",
      "templates.template_id",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "Show all template type codes with less than three templates. | templates : templates.template_type_code , templates.template_id , templates.template_details , templates.version_number , templates.date_effective_from , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_id",
      "templates.template_details",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "What are the codes of template types that have fewer than 3 templates? | templates : templates.template_type_code , templates.template_id , templates.template_details , templates.version_number , templates.date_effective_from , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_id",
      "templates.template_details",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "What the smallest version number and its template type code? | templates : templates.template_type_code , templates.version_number , templates.template_id , templates.template_details , templates.date_effective_from , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | documents : documents.document_name , documents.document_id , documents.template_id , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.version_number",
      "templates.template_id",
      "templates.template_details",
      "templates.date_effective_from",
      "templates.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "documents.document_name",
      "documents.document_id",
      "documents.template_id",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "Return the lowest version number, along with its corresponding template type code. | templates : templates.template_type_code , templates.version_number , templates.template_id , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.version_number",
      "templates.template_id",
      "templates.date_effective_from",
      "templates.date_effective_to",
      "templates.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "What is the template type code of the template used by document with the name \"Data base\"? | documents : documents.document_name ( Data base ) , documents.template_id , documents.document_id , documents.document_description , documents.other_details , documents.* | templates : templates.template_type_code , templates.template_id , templates.template_details , templates.version_number , templates.date_effective_from , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.document_name",
      "documents.template_id",
      "documents.document_id",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "templates.template_type_code",
      "templates.template_id",
      "templates.template_details",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "Return the template type code of the template that is used by a document named Data base. | templates : templates.template_type_code , templates.template_id , templates.template_details , templates.version_number , templates.date_effective_from , templates.* | documents : documents.document_name ( Data base ) , documents.template_id , documents.document_id , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_id",
      "templates.template_details",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "documents.document_name",
      "documents.template_id",
      "documents.document_id",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "Show all document names using templates with template type code BK. | documents : documents.document_name , documents.template_id , documents.document_description , documents.document_id , documents.other_details , documents.* | templates : templates.template_type_code ( BK ) , templates.template_id , templates.template_details , templates.version_number , templates.date_effective_from , templates.* | ref_template_types : ref_template_types.template_type_code ( BK ) , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.document_name",
      "documents.template_id",
      "documents.document_description",
      "documents.document_id",
      "documents.other_details",
      "documents.*",
      "templates.template_type_code",
      "templates.template_id",
      "templates.template_details",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "What are the names of documents that use templates with the code BK? | documents : documents.document_name , documents.template_id , documents.document_description , documents.document_id , documents.other_details , documents.* | templates : templates.template_type_code ( BK ) , templates.template_id , templates.template_details , templates.version_number , templates.date_effective_from , templates.* | ref_template_types : ref_template_types.template_type_code ( BK ) , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.document_name",
      "documents.template_id",
      "documents.document_description",
      "documents.document_id",
      "documents.other_details",
      "documents.*",
      "templates.template_type_code",
      "templates.template_id",
      "templates.template_details",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "Show all template type codes and the number of documents using each type. | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.template_id , documents.document_name , documents.document_description , documents.document_id , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_id",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.date_effective_to",
      "templates.*",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.document_id",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "What are the different template type codes, and how many documents use each type? | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.template_id , documents.document_name , documents.document_description , documents.document_id , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_id",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.date_effective_to",
      "templates.*",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.document_id",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "Which template type code is used by most number of documents? | templates : templates.template_type_code , templates.template_id , templates.template_details , templates.version_number , templates.date_effective_from , templates.* | documents : documents.template_id , documents.document_name , documents.document_description , documents.document_id , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_id",
      "templates.template_details",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.document_id",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "Return the code of the template type that is most commonly used in documents. | templates : templates.template_type_code , templates.template_id , templates.template_details , templates.version_number , templates.date_effective_from , templates.* | documents : documents.template_id , documents.document_name , documents.document_id , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_id",
      "templates.template_details",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "documents.template_id",
      "documents.document_name",
      "documents.document_id",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "Show all template type codes that are not used by any document. | templates : templates.template_type_code , templates.template_id , templates.template_details , templates.version_number , templates.date_effective_from , templates.* | documents : documents.document_name , documents.document_description , documents.document_id , documents.template_id , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_id",
      "templates.template_details",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "documents.document_name",
      "documents.document_description",
      "documents.document_id",
      "documents.template_id",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "What are the codes of template types that are not used for any document? | templates : templates.template_type_code , templates.template_id , templates.template_details , templates.version_number , templates.date_effective_from , templates.* | documents : documents.template_id , documents.document_name , documents.document_id , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_id",
      "templates.template_details",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "documents.template_id",
      "documents.document_name",
      "documents.document_id",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "Show all template type codes and descriptions. | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.date_effective_to",
      "templates.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "What are the type codes and descriptions for all template types? | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.date_effective_to",
      "templates.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "What is the template type descriptions for template type code \"AD\". | ref_template_types : ref_template_types.template_type_description , ref_template_types.template_type_code ( AD ) , ref_template_types.* | templates : templates.template_type_code ( AD ) , templates.template_details , templates.template_id , templates.version_number , templates.date_effective_from , templates.* | documents : documents.document_description , documents.document_id , documents.template_id , documents.document_name , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "ref_template_types.template_type_description",
      "ref_template_types.template_type_code",
      "ref_template_types.*",
      "templates.template_type_code",
      "templates.template_details",
      "templates.template_id",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "documents.document_description",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.other_details",
      "documents.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "Return the template type description of the template type with the code AD. | ref_template_types : ref_template_types.template_type_description , ref_template_types.template_type_code ( AD ) , ref_template_types.* | templates : templates.template_type_code ( AD ) , templates.template_details , templates.template_id , templates.version_number , templates.date_effective_from , templates.* | documents : documents.document_description , documents.document_id , documents.template_id , documents.document_name , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "ref_template_types.template_type_description",
      "ref_template_types.template_type_code",
      "ref_template_types.*",
      "templates.template_type_code",
      "templates.template_details",
      "templates.template_id",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "documents.document_description",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.other_details",
      "documents.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "What is the template type code for template type description \"Book\". | ref_template_types : ref_template_types.template_type_description ( Book ) , ref_template_types.template_type_code , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_name , documents.document_description , documents.document_id , documents.template_id , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "ref_template_types.template_type_description",
      "ref_template_types.template_type_code",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.date_effective_to",
      "templates.*",
      "documents.document_name",
      "documents.document_description",
      "documents.document_id",
      "documents.template_id",
      "documents.other_details",
      "documents.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "Return the type code of the template type with the description \"Book\". | ref_template_types : ref_template_types.template_type_description ( Book ) , ref_template_types.template_type_code , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "ref_template_types.template_type_description",
      "ref_template_types.template_type_code",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.date_effective_to",
      "templates.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "What are the distinct template type descriptions for the templates ever used by any document? | documents : documents.template_id , documents.document_name , documents.document_description , documents.document_id , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_description , ref_template_types.template_type_code , ref_template_types.* | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.template_details , templates.date_effective_from , templates.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.document_id",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_description",
      "ref_template_types.template_type_code",
      "ref_template_types.*",
      "templates.template_type_code",
      "templates.template_id",
      "templates.version_number",
      "templates.template_details",
      "templates.date_effective_from",
      "templates.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "Return the different descriptions for templates that have been used in a document. | documents : documents.document_description , documents.template_id , documents.document_name , documents.document_id , documents.other_details , documents.* | templates : templates.template_details , templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.* | ref_template_types : ref_template_types.template_type_description , ref_template_types.template_type_code , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.document_description",
      "documents.template_id",
      "documents.document_name",
      "documents.document_id",
      "documents.other_details",
      "documents.*",
      "templates.template_details",
      "templates.template_id",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.*",
      "ref_template_types.template_type_description",
      "ref_template_types.template_type_code",
      "ref_template_types.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "What are the template ids with template type description \"Presentation\". | ref_template_types : ref_template_types.template_type_description ( Presentation ) , ref_template_types.template_type_code , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.template_details , templates.date_effective_from , templates.* | documents : documents.template_id , documents.document_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "ref_template_types.template_type_description",
      "ref_template_types.template_type_code",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_type_code",
      "templates.template_details",
      "templates.date_effective_from",
      "templates.*",
      "documents.template_id",
      "documents.document_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "Return the ids corresponding to templates with the description 'Presentation'. | ref_template_types : ref_template_types.template_type_description ( Presentation ) , ref_template_types.template_type_code , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_details , templates.template_type_code , templates.date_effective_from , templates.* | documents : documents.template_id , documents.document_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "ref_template_types.template_type_description",
      "ref_template_types.template_type_code",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_details",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.*",
      "documents.template_id",
      "documents.document_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "How many paragraphs in total? | paragraphs : paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.document_id , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.*",
    "output_sequence": " | ",
    "tc_original": [
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.document_id",
      "paragraphs.other_details",
      "paragraphs.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.date_effective_to",
      "templates.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "Count the number of paragraphs. | paragraphs : paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.document_id , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.*",
    "output_sequence": " | ",
    "tc_original": [
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.document_id",
      "paragraphs.other_details",
      "paragraphs.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.date_effective_to",
      "templates.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "How many paragraphs for the document with name 'Summer Show'? | documents : documents.document_name ( Summer Show ) , documents.document_id , documents.document_description , documents.template_id , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_text , paragraphs.paragraph_id , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.document_name",
      "documents.document_id",
      "documents.document_description",
      "documents.template_id",
      "documents.other_details",
      "documents.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.paragraph_id",
      "paragraphs.other_details",
      "paragraphs.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.date_effective_to",
      "templates.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "Count the number of paragraphs in the document named 'Summer Show'. | documents : documents.document_name ( Summer Show ) , documents.document_description , documents.document_id , documents.template_id , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_text , paragraphs.paragraph_id , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.document_name",
      "documents.document_description",
      "documents.document_id",
      "documents.template_id",
      "documents.other_details",
      "documents.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.paragraph_id",
      "paragraphs.other_details",
      "paragraphs.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.date_effective_to",
      "templates.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "Show paragraph details for paragraph with text 'Korea ' . | paragraphs : paragraphs.paragraph_text ( Korea ) , paragraphs.other_details , paragraphs.paragraph_id , paragraphs.document_id , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_details , templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.*",
    "output_sequence": " | ",
    "tc_original": [
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_details",
      "templates.template_id",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "What are the details for the paragraph that includes the text 'Korea ' ? | paragraphs : paragraphs.paragraph_text ( Korea ) , paragraphs.other_details , paragraphs.paragraph_id , paragraphs.document_id , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_details , templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.*",
    "output_sequence": " | ",
    "tc_original": [
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_details",
      "templates.template_id",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "Show all paragraph ids and texts for the document with name 'Welcome to NY'. | documents : documents.document_name ( Welcome to NY ) , documents.document_id , documents.document_description , documents.template_id , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_text , paragraphs.paragraph_id , paragraphs.document_id , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.document_name",
      "documents.document_id",
      "documents.document_description",
      "documents.template_id",
      "documents.other_details",
      "documents.*",
      "paragraphs.paragraph_text",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.other_details",
      "paragraphs.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.date_effective_to",
      "templates.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'? | documents : documents.document_name ( Welcome to NY ) , documents.document_id , documents.document_description , documents.template_id , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_text , paragraphs.document_id , paragraphs.paragraph_id , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.document_name",
      "documents.document_id",
      "documents.document_description",
      "documents.template_id",
      "documents.other_details",
      "documents.*",
      "paragraphs.paragraph_text",
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.other_details",
      "paragraphs.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.date_effective_to",
      "templates.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "Show all paragraph texts for the document \"Customer reviews\". | documents : documents.document_name ( Customer reviews ) , documents.document_id , documents.document_description , documents.template_id , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_text , paragraphs.document_id , paragraphs.other_details , paragraphs.paragraph_id , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.document_name",
      "documents.document_id",
      "documents.document_description",
      "documents.template_id",
      "documents.other_details",
      "documents.*",
      "paragraphs.paragraph_text",
      "paragraphs.document_id",
      "paragraphs.other_details",
      "paragraphs.paragraph_id",
      "paragraphs.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.date_effective_to",
      "templates.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "What are the paragraph texts for the document with the name 'Customer reviews'? | documents : documents.document_name ( Customer reviews ) , documents.document_id , documents.document_description , documents.template_id , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_text , paragraphs.document_id , paragraphs.other_details , paragraphs.paragraph_id , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.document_name",
      "documents.document_id",
      "documents.document_description",
      "documents.template_id",
      "documents.other_details",
      "documents.*",
      "paragraphs.paragraph_text",
      "paragraphs.document_id",
      "paragraphs.other_details",
      "paragraphs.paragraph_id",
      "paragraphs.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.date_effective_to",
      "templates.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "Show all document ids and the number of paragraphs in each document. Order by document id. | paragraphs : paragraphs.document_id , paragraphs.paragraph_text , paragraphs.paragraph_id , paragraphs.other_details , paragraphs.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.paragraph_id",
      "paragraphs.other_details",
      "paragraphs.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.date_effective_to",
      "templates.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id. | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.*",
    "output_sequence": " | ",
    "tc_original": [
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.date_effective_to",
      "templates.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "Show all document ids, names and the number of paragraphs in each document. | documents : documents.document_name , documents.document_id , documents.document_description , documents.template_id , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.version_number , templates.template_id , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.document_name",
      "documents.document_id",
      "documents.document_description",
      "documents.template_id",
      "documents.other_details",
      "documents.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.version_number",
      "templates.template_id",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.date_effective_to",
      "templates.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "What are the ids and names of each document, as well as the number of paragraphs in each? | documents : documents.document_name , documents.document_id , documents.template_id , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_details , templates.template_type_code , templates.date_effective_from , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.document_name",
      "documents.document_id",
      "documents.template_id",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_details",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "List all document ids with at least two paragraphs. | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.date_effective_to",
      "templates.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "What are the ids of documents that have 2 or more paragraphs? | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | documents : documents.document_id , documents.document_name , documents.template_id , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*",
      "documents.document_id",
      "documents.document_name",
      "documents.template_id",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.date_effective_to",
      "templates.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "What is the document id and name with greatest number of paragraphs? | documents : documents.document_name , documents.document_id , documents.template_id , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_details , templates.template_type_code , templates.date_effective_from , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.document_name",
      "documents.document_id",
      "documents.template_id",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_details",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "Return the id and name of the document with the most paragraphs. | documents : documents.document_name , documents.document_id , documents.template_id , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.document_name",
      "documents.document_id",
      "documents.template_id",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.date_effective_to",
      "templates.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "What is the document id with least number of paragraphs? | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.date_effective_to",
      "templates.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "Return the id of the document with the fewest paragraphs. | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | documents : documents.document_id , documents.document_name , documents.template_id , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*",
      "documents.document_id",
      "documents.document_name",
      "documents.template_id",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.date_effective_to",
      "templates.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "What is the document id with 1 to 2 paragraphs? | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | documents : documents.document_name , documents.document_description , documents.document_id , documents.template_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "documents.document_name",
      "documents.document_description",
      "documents.document_id",
      "documents.template_id",
      "documents.other_details",
      "documents.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.date_effective_to",
      "templates.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "Give the ids of documents that have between one and two paragraphs. | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | documents : documents.document_id , documents.document_name , documents.document_description , documents.template_id , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*",
      "documents.document_id",
      "documents.document_name",
      "documents.document_description",
      "documents.template_id",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.date_effective_to",
      "templates.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "Show the document id with paragraph text 'Brazil' and 'Ireland'. | paragraphs : paragraphs.paragraph_text ( Brazil , Ireland ) , paragraphs.document_id , paragraphs.paragraph_id , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "paragraphs.paragraph_text",
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.other_details",
      "paragraphs.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.date_effective_to",
      "templates.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'? | paragraphs : paragraphs.paragraph_text ( Brazil , Ireland ) , paragraphs.document_id , paragraphs.paragraph_id , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "paragraphs.paragraph_text",
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.other_details",
      "paragraphs.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.date_effective_to",
      "templates.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "How many teachers are there? | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown , teacher.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.teacher_id",
      "teacher.name",
      "teacher.age",
      "teacher.hometown",
      "teacher.*",
      "course_arrange.grade",
      "course_arrange.course_id",
      "course_arrange.teacher_id",
      "course_arrange.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "What is the total count of teachers? | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown , teacher.* | course_arrange : course_arrange.grade , course_arrange.teacher_id , course_arrange.course_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.teacher_id",
      "teacher.name",
      "teacher.age",
      "teacher.hometown",
      "teacher.*",
      "course_arrange.grade",
      "course_arrange.teacher_id",
      "course_arrange.course_id",
      "course_arrange.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "List the names of teachers in ascending order of age. | teacher : teacher.name , teacher.age , teacher.hometown , teacher.teacher_id , teacher.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.name",
      "teacher.age",
      "teacher.hometown",
      "teacher.teacher_id",
      "teacher.*",
      "course_arrange.grade",
      "course_arrange.course_id",
      "course_arrange.teacher_id",
      "course_arrange.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "What are the names of the teachers ordered by ascending age? | teacher : teacher.name , teacher.age , teacher.hometown , teacher.teacher_id , teacher.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.name",
      "teacher.age",
      "teacher.hometown",
      "teacher.teacher_id",
      "teacher.*",
      "course_arrange.grade",
      "course_arrange.course_id",
      "course_arrange.teacher_id",
      "course_arrange.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "What are the age and hometown of teachers? | teacher : teacher.age , teacher.hometown , teacher.name , teacher.teacher_id , teacher.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.age",
      "teacher.hometown",
      "teacher.name",
      "teacher.teacher_id",
      "teacher.*",
      "course_arrange.grade",
      "course_arrange.course_id",
      "course_arrange.teacher_id",
      "course_arrange.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "What is the age and hometown of every teacher? | teacher : teacher.age , teacher.hometown , teacher.name , teacher.teacher_id , teacher.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.age",
      "teacher.hometown",
      "teacher.name",
      "teacher.teacher_id",
      "teacher.*",
      "course_arrange.grade",
      "course_arrange.course_id",
      "course_arrange.teacher_id",
      "course_arrange.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "List the name of teachers whose hometown is not `` Little Lever Urban District '' . | teacher : teacher.hometown ( Little Lever Urban District ) , teacher.name , teacher.age , teacher.teacher_id , teacher.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.hometown",
      "teacher.name",
      "teacher.age",
      "teacher.teacher_id",
      "teacher.*",
      "course_arrange.grade",
      "course_arrange.course_id",
      "course_arrange.teacher_id",
      "course_arrange.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ? | teacher : teacher.hometown ( Little Lever Urban District ) , teacher.name , teacher.age , teacher.teacher_id , teacher.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.hometown",
      "teacher.name",
      "teacher.age",
      "teacher.teacher_id",
      "teacher.*",
      "course_arrange.grade",
      "course_arrange.course_id",
      "course_arrange.teacher_id",
      "course_arrange.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "Show the name of teachers aged either 32 or 33? | teacher : teacher.name , teacher.age , teacher.hometown , teacher.teacher_id , teacher.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.name",
      "teacher.age",
      "teacher.hometown",
      "teacher.teacher_id",
      "teacher.*",
      "course_arrange.grade",
      "course_arrange.course_id",
      "course_arrange.teacher_id",
      "course_arrange.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "What are the names of the teachers who are aged either 32 or 33? | teacher : teacher.name , teacher.age , teacher.hometown , teacher.teacher_id , teacher.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.name",
      "teacher.age",
      "teacher.hometown",
      "teacher.teacher_id",
      "teacher.*",
      "course_arrange.grade",
      "course_arrange.course_id",
      "course_arrange.teacher_id",
      "course_arrange.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "What is the hometown of the youngest teacher? | teacher : teacher.age , teacher.hometown , teacher.name , teacher.teacher_id , teacher.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.age",
      "teacher.hometown",
      "teacher.name",
      "teacher.teacher_id",
      "teacher.*",
      "course_arrange.grade",
      "course_arrange.course_id",
      "course_arrange.teacher_id",
      "course_arrange.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "Where is the youngest teacher from? | teacher : teacher.age , teacher.hometown , teacher.name , teacher.teacher_id , teacher.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.age",
      "teacher.hometown",
      "teacher.name",
      "teacher.teacher_id",
      "teacher.*",
      "course_arrange.grade",
      "course_arrange.course_id",
      "course_arrange.teacher_id",
      "course_arrange.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "Show different hometown of teachers and the number of teachers from each hometown. | teacher : teacher.hometown , teacher.name , teacher.age , teacher.teacher_id , teacher.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.hometown",
      "teacher.name",
      "teacher.age",
      "teacher.teacher_id",
      "teacher.*",
      "course_arrange.grade",
      "course_arrange.course_id",
      "course_arrange.teacher_id",
      "course_arrange.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "For each hometown, how many teachers are there? | teacher : teacher.hometown , teacher.name , teacher.age , teacher.teacher_id , teacher.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.hometown",
      "teacher.name",
      "teacher.age",
      "teacher.teacher_id",
      "teacher.*",
      "course_arrange.grade",
      "course_arrange.course_id",
      "course_arrange.teacher_id",
      "course_arrange.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "List the most common hometown of teachers. | teacher : teacher.hometown , teacher.name , teacher.age , teacher.teacher_id , teacher.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.hometown",
      "teacher.name",
      "teacher.age",
      "teacher.teacher_id",
      "teacher.*",
      "course_arrange.grade",
      "course_arrange.course_id",
      "course_arrange.teacher_id",
      "course_arrange.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "What is the most commmon hometowns for teachers? | teacher : teacher.hometown , teacher.name , teacher.age , teacher.teacher_id , teacher.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.hometown",
      "teacher.name",
      "teacher.age",
      "teacher.teacher_id",
      "teacher.*",
      "course_arrange.grade",
      "course_arrange.course_id",
      "course_arrange.teacher_id",
      "course_arrange.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "Show the hometowns shared by at least two teachers. | teacher : teacher.hometown , teacher.name , teacher.age , teacher.teacher_id , teacher.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.hometown",
      "teacher.name",
      "teacher.age",
      "teacher.teacher_id",
      "teacher.*",
      "course_arrange.grade",
      "course_arrange.course_id",
      "course_arrange.teacher_id",
      "course_arrange.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "What are the towns from which at least two teachers come from? | teacher : teacher.hometown , teacher.name , teacher.age , teacher.teacher_id , teacher.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.hometown",
      "teacher.name",
      "teacher.age",
      "teacher.teacher_id",
      "teacher.*",
      "course_arrange.grade",
      "course_arrange.course_id",
      "course_arrange.teacher_id",
      "course_arrange.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "Show names of teachers and the courses they are arranged to teach. | teacher : teacher.name , teacher.age , teacher.hometown , teacher.teacher_id , teacher.* | course_arrange : course_arrange.teacher_id , course_arrange.course_id , course_arrange.grade , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.name",
      "teacher.age",
      "teacher.hometown",
      "teacher.teacher_id",
      "teacher.*",
      "course_arrange.teacher_id",
      "course_arrange.course_id",
      "course_arrange.grade",
      "course_arrange.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "What is the name of each teacher and what course they teach? | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.teacher_id , course_arrange.grade , course_arrange.course_id , course_arrange.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.name",
      "teacher.teacher_id",
      "teacher.age",
      "teacher.hometown",
      "teacher.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*",
      "course_arrange.teacher_id",
      "course_arrange.grade",
      "course_arrange.course_id",
      "course_arrange.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name. | teacher : teacher.name , teacher.age , teacher.hometown , teacher.teacher_id , teacher.* | course_arrange : course_arrange.teacher_id , course_arrange.course_id , course_arrange.grade , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.name",
      "teacher.age",
      "teacher.hometown",
      "teacher.teacher_id",
      "teacher.*",
      "course_arrange.teacher_id",
      "course_arrange.course_id",
      "course_arrange.grade",
      "course_arrange.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher? | teacher : teacher.name , teacher.age , teacher.hometown , teacher.teacher_id , teacher.* | course_arrange : course_arrange.teacher_id , course_arrange.grade , course_arrange.course_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.name",
      "teacher.age",
      "teacher.hometown",
      "teacher.teacher_id",
      "teacher.*",
      "course_arrange.teacher_id",
      "course_arrange.grade",
      "course_arrange.course_id",
      "course_arrange.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "Show the name of the teacher for the math course. | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course : course.course ( Math ) , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.teacher_id , course_arrange.course_id , course_arrange.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.name",
      "teacher.teacher_id",
      "teacher.age",
      "teacher.hometown",
      "teacher.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*",
      "course_arrange.grade",
      "course_arrange.teacher_id",
      "course_arrange.course_id",
      "course_arrange.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "What are the names of the people who teach math courses? | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course : course.course ( Math ) , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.teacher_id , course_arrange.course_id , course_arrange.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.name",
      "teacher.teacher_id",
      "teacher.age",
      "teacher.hometown",
      "teacher.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*",
      "course_arrange.grade",
      "course_arrange.teacher_id",
      "course_arrange.course_id",
      "course_arrange.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "Show names of teachers and the number of courses they teach. | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course_arrange : course_arrange.teacher_id , course_arrange.course_id , course_arrange.grade , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.name",
      "teacher.teacher_id",
      "teacher.age",
      "teacher.hometown",
      "teacher.*",
      "course_arrange.teacher_id",
      "course_arrange.course_id",
      "course_arrange.grade",
      "course_arrange.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "What are the names of the teachers and how many courses do they teach? | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course_arrange : course_arrange.teacher_id , course_arrange.grade , course_arrange.course_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.name",
      "teacher.teacher_id",
      "teacher.age",
      "teacher.hometown",
      "teacher.*",
      "course_arrange.teacher_id",
      "course_arrange.grade",
      "course_arrange.course_id",
      "course_arrange.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "Show names of teachers that teach at least two courses. | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course_arrange : course_arrange.teacher_id , course_arrange.grade , course_arrange.course_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.name",
      "teacher.teacher_id",
      "teacher.age",
      "teacher.hometown",
      "teacher.*",
      "course_arrange.teacher_id",
      "course_arrange.grade",
      "course_arrange.course_id",
      "course_arrange.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "What are the names of the teachers who teach at least two courses? | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course_arrange : course_arrange.teacher_id , course_arrange.grade , course_arrange.course_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.name",
      "teacher.teacher_id",
      "teacher.age",
      "teacher.hometown",
      "teacher.*",
      "course_arrange.teacher_id",
      "course_arrange.grade",
      "course_arrange.course_id",
      "course_arrange.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "List the names of teachers who have not been arranged to teach courses. | teacher : teacher.name , teacher.age , teacher.hometown , teacher.teacher_id , teacher.* | course_arrange : course_arrange.teacher_id , course_arrange.grade , course_arrange.course_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.name",
      "teacher.age",
      "teacher.hometown",
      "teacher.teacher_id",
      "teacher.*",
      "course_arrange.teacher_id",
      "course_arrange.grade",
      "course_arrange.course_id",
      "course_arrange.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "What are the names of the teachers whose courses have not been arranged? | teacher : teacher.name , teacher.age , teacher.hometown , teacher.teacher_id , teacher.* | course_arrange : course_arrange.teacher_id , course_arrange.grade , course_arrange.course_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.name",
      "teacher.age",
      "teacher.hometown",
      "teacher.teacher_id",
      "teacher.*",
      "course_arrange.teacher_id",
      "course_arrange.grade",
      "course_arrange.course_id",
      "course_arrange.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*"
    ]
  },
  {
    "db_id": "museum_visit",
    "input_sequence": "How many visitors below age 30 are there? | visitor : visitor.age , visitor.name , visitor.id , visitor.level_of_membership , visitor.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.* | museum : museum.name , museum.museum_id , museum.num_of_staff , museum.open_year , museum.*",
    "output_sequence": " | ",
    "tc_original": [
      "visitor.age",
      "visitor.name",
      "visitor.id",
      "visitor.level_of_membership",
      "visitor.*",
      "visit.museum_id",
      "visit.visitor_id",
      "visit.num_of_ticket",
      "visit.total_spent",
      "visit.*",
      "museum.name",
      "museum.museum_id",
      "museum.num_of_staff",
      "museum.open_year",
      "museum.*"
    ]
  },
  {
    "db_id": "museum_visit",
    "input_sequence": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low. | visitor : visitor.level_of_membership , visitor.name , visitor.id , visitor.age , visitor.* | visit : visit.visitor_id , visit.museum_id , visit.num_of_ticket , visit.total_spent , visit.* | museum : museum.name , museum.museum_id , museum.num_of_staff , museum.open_year , museum.*",
    "output_sequence": " | ",
    "tc_original": [
      "visitor.level_of_membership",
      "visitor.name",
      "visitor.id",
      "visitor.age",
      "visitor.*",
      "visit.visitor_id",
      "visit.museum_id",
      "visit.num_of_ticket",
      "visit.total_spent",
      "visit.*",
      "museum.name",
      "museum.museum_id",
      "museum.num_of_staff",
      "museum.open_year",
      "museum.*"
    ]
  },
  {
    "db_id": "museum_visit",
    "input_sequence": "What is the average age of the visitors whose membership level is not higher than 4? | visitor : visitor.level_of_membership , visitor.age , visitor.id , visitor.name , visitor.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.* | museum : museum.name , museum.museum_id , museum.num_of_staff , museum.open_year , museum.*",
    "output_sequence": " | ",
    "tc_original": [
      "visitor.level_of_membership",
      "visitor.age",
      "visitor.id",
      "visitor.name",
      "visitor.*",
      "visit.museum_id",
      "visit.visitor_id",
      "visit.num_of_ticket",
      "visit.total_spent",
      "visit.*",
      "museum.name",
      "museum.museum_id",
      "museum.num_of_staff",
      "museum.open_year",
      "museum.*"
    ]
  },
  {
    "db_id": "museum_visit",
    "input_sequence": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young. | visitor : visitor.level_of_membership , visitor.name , visitor.age , visitor.id , visitor.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.* | museum : museum.name , museum.museum_id , museum.num_of_staff , museum.open_year , museum.*",
    "output_sequence": " | ",
    "tc_original": [
      "visitor.level_of_membership",
      "visitor.name",
      "visitor.age",
      "visitor.id",
      "visitor.*",
      "visit.museum_id",
      "visit.visitor_id",
      "visit.num_of_ticket",
      "visit.total_spent",
      "visit.*",
      "museum.name",
      "museum.museum_id",
      "museum.num_of_staff",
      "museum.open_year",
      "museum.*"
    ]
  },
  {
    "db_id": "museum_visit",
    "input_sequence": "Find the id and name of the museum that has the most staff members? | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year , museum.* | visitor : visitor.name , visitor.age , visitor.id , visitor.level_of_membership , visitor.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.*",
    "output_sequence": " | ",
    "tc_original": [
      "museum.museum_id",
      "museum.name",
      "museum.num_of_staff",
      "museum.open_year",
      "museum.*",
      "visitor.name",
      "visitor.age",
      "visitor.id",
      "visitor.level_of_membership",
      "visitor.*",
      "visit.museum_id",
      "visit.visitor_id",
      "visit.num_of_ticket",
      "visit.total_spent",
      "visit.*"
    ]
  },
  {
    "db_id": "museum_visit",
    "input_sequence": "Find the average number of staff working for the museums that were open before 2009. | museum : museum.num_of_staff , museum.open_year , museum.name , museum.museum_id , museum.* | visitor : visitor.name , visitor.age , visitor.level_of_membership , visitor.id , visitor.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.*",
    "output_sequence": " | ",
    "tc_original": [
      "museum.num_of_staff",
      "museum.open_year",
      "museum.name",
      "museum.museum_id",
      "museum.*",
      "visitor.name",
      "visitor.age",
      "visitor.level_of_membership",
      "visitor.id",
      "visitor.*",
      "visit.museum_id",
      "visit.visitor_id",
      "visit.num_of_ticket",
      "visit.total_spent",
      "visit.*"
    ]
  },
  {
    "db_id": "museum_visit",
    "input_sequence": "What are the opening year and staff number of the museum named Plaza Museum? | museum : museum.name ( Plaza Museum ) , museum.open_year , museum.num_of_staff , museum.museum_id , museum.* | visitor : visitor.name , visitor.age , visitor.level_of_membership , visitor.id , visitor.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.*",
    "output_sequence": " | ",
    "tc_original": [
      "museum.name",
      "museum.open_year",
      "museum.num_of_staff",
      "museum.museum_id",
      "museum.*",
      "visitor.name",
      "visitor.age",
      "visitor.level_of_membership",
      "visitor.id",
      "visitor.*",
      "visit.museum_id",
      "visit.visitor_id",
      "visit.num_of_ticket",
      "visit.total_spent",
      "visit.*"
    ]
  },
  {
    "db_id": "museum_visit",
    "input_sequence": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010. | museum : museum.num_of_staff , museum.open_year , museum.name , museum.museum_id , museum.* | visitor : visitor.name , visitor.age , visitor.level_of_membership , visitor.id , visitor.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.*",
    "output_sequence": " | ",
    "tc_original": [
      "museum.num_of_staff",
      "museum.open_year",
      "museum.name",
      "museum.museum_id",
      "museum.*",
      "visitor.name",
      "visitor.age",
      "visitor.level_of_membership",
      "visitor.id",
      "visitor.*",
      "visit.museum_id",
      "visit.visitor_id",
      "visit.num_of_ticket",
      "visit.total_spent",
      "visit.*"
    ]
  },
  {
    "db_id": "museum_visit",
    "input_sequence": "find the id, name and age for visitors who visited some museums more than once. | visitor : visitor.name , visitor.age , visitor.id , visitor.level_of_membership , visitor.* | visit : visit.visitor_id , visit.museum_id , visit.total_spent , visit.num_of_ticket , visit.* | museum : museum.name , museum.museum_id , museum.num_of_staff , museum.open_year , museum.*",
    "output_sequence": " | ",
    "tc_original": [
      "visitor.name",
      "visitor.age",
      "visitor.id",
      "visitor.level_of_membership",
      "visitor.*",
      "visit.visitor_id",
      "visit.museum_id",
      "visit.total_spent",
      "visit.num_of_ticket",
      "visit.*",
      "museum.name",
      "museum.museum_id",
      "museum.num_of_staff",
      "museum.open_year",
      "museum.*"
    ]
  },
  {
    "db_id": "museum_visit",
    "input_sequence": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets? | visit : visit.total_spent , visit.visitor_id , visit.museum_id , visit.num_of_ticket , visit.* | visitor : visitor.level_of_membership , visitor.name , visitor.id , visitor.age , visitor.* | museum : museum.name , museum.museum_id , museum.num_of_staff , museum.open_year , museum.*",
    "output_sequence": " | ",
    "tc_original": [
      "visit.total_spent",
      "visit.visitor_id",
      "visit.museum_id",
      "visit.num_of_ticket",
      "visit.*",
      "visitor.level_of_membership",
      "visitor.name",
      "visitor.id",
      "visitor.age",
      "visitor.*",
      "museum.name",
      "museum.museum_id",
      "museum.num_of_staff",
      "museum.open_year",
      "museum.*"
    ]
  },
  {
    "db_id": "museum_visit",
    "input_sequence": "What are the id and name of the museum visited most times? | museum : museum.name , museum.museum_id , museum.open_year , museum.num_of_staff , museum.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.* | visitor : visitor.name , visitor.age , visitor.id , visitor.level_of_membership , visitor.*",
    "output_sequence": " | ",
    "tc_original": [
      "museum.name",
      "museum.museum_id",
      "museum.open_year",
      "museum.num_of_staff",
      "museum.*",
      "visit.museum_id",
      "visit.visitor_id",
      "visit.num_of_ticket",
      "visit.total_spent",
      "visit.*",
      "visitor.name",
      "visitor.age",
      "visitor.id",
      "visitor.level_of_membership",
      "visitor.*"
    ]
  },
  {
    "db_id": "museum_visit",
    "input_sequence": "What is the name of the museum that had no visitor yet? | museum : museum.name , museum.museum_id , museum.open_year , museum.num_of_staff , museum.* | visit : visit.museum_id , visit.visitor_id , visit.total_spent , visit.num_of_ticket , visit.* | visitor : visitor.name , visitor.age , visitor.level_of_membership , visitor.id , visitor.*",
    "output_sequence": " | ",
    "tc_original": [
      "museum.name",
      "museum.museum_id",
      "museum.open_year",
      "museum.num_of_staff",
      "museum.*",
      "visit.museum_id",
      "visit.visitor_id",
      "visit.total_spent",
      "visit.num_of_ticket",
      "visit.*",
      "visitor.name",
      "visitor.age",
      "visitor.level_of_membership",
      "visitor.id",
      "visitor.*"
    ]
  },
  {
    "db_id": "museum_visit",
    "input_sequence": "Find the name and age of the visitor who bought the most tickets at once. | visitor : visitor.name , visitor.age , visitor.id , visitor.level_of_membership , visitor.* | visit : visit.visitor_id , visit.num_of_ticket , visit.museum_id , visit.total_spent , visit.* | museum : museum.name , museum.museum_id , museum.num_of_staff , museum.open_year , museum.*",
    "output_sequence": " | ",
    "tc_original": [
      "visitor.name",
      "visitor.age",
      "visitor.id",
      "visitor.level_of_membership",
      "visitor.*",
      "visit.visitor_id",
      "visit.num_of_ticket",
      "visit.museum_id",
      "visit.total_spent",
      "visit.*",
      "museum.name",
      "museum.museum_id",
      "museum.num_of_staff",
      "museum.open_year",
      "museum.*"
    ]
  },
  {
    "db_id": "museum_visit",
    "input_sequence": "What are the average and maximum number of tickets bought in all visits? | visit : visit.num_of_ticket , visit.museum_id , visit.total_spent , visit.visitor_id , visit.* | visitor : visitor.name , visitor.age , visitor.level_of_membership , visitor.id , visitor.* | museum : museum.name , museum.museum_id , museum.num_of_staff , museum.open_year , museum.*",
    "output_sequence": " | ",
    "tc_original": [
      "visit.num_of_ticket",
      "visit.museum_id",
      "visit.total_spent",
      "visit.visitor_id",
      "visit.*",
      "visitor.name",
      "visitor.age",
      "visitor.level_of_membership",
      "visitor.id",
      "visitor.*",
      "museum.name",
      "museum.museum_id",
      "museum.num_of_staff",
      "museum.open_year",
      "museum.*"
    ]
  },
  {
    "db_id": "museum_visit",
    "input_sequence": "What is the total ticket expense of the visitors whose membership level is 1? | visit : visit.total_spent , visit.visitor_id , visit.num_of_ticket , visit.museum_id , visit.* | visitor : visitor.level_of_membership , visitor.name , visitor.id , visitor.age , visitor.* | museum : museum.name , museum.museum_id , museum.num_of_staff , museum.open_year , museum.*",
    "output_sequence": " | ",
    "tc_original": [
      "visit.total_spent",
      "visit.visitor_id",
      "visit.num_of_ticket",
      "visit.museum_id",
      "visit.*",
      "visitor.level_of_membership",
      "visitor.name",
      "visitor.id",
      "visitor.age",
      "visitor.*",
      "museum.name",
      "museum.museum_id",
      "museum.num_of_staff",
      "museum.open_year",
      "museum.*"
    ]
  },
  {
    "db_id": "museum_visit",
    "input_sequence": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011? | museum : museum.open_year , museum.museum_id , museum.name , museum.num_of_staff , museum.* | visitor : visitor.name , visitor.id , visitor.age , visitor.level_of_membership , visitor.* | visit : visit.visitor_id , visit.museum_id , visit.total_spent , visit.num_of_ticket , visit.*",
    "output_sequence": " | ",
    "tc_original": [
      "museum.open_year",
      "museum.museum_id",
      "museum.name",
      "museum.num_of_staff",
      "museum.*",
      "visitor.name",
      "visitor.id",
      "visitor.age",
      "visitor.level_of_membership",
      "visitor.*",
      "visit.visitor_id",
      "visit.museum_id",
      "visit.total_spent",
      "visit.num_of_ticket",
      "visit.*"
    ]
  },
  {
    "db_id": "museum_visit",
    "input_sequence": "Find the number of visitors who did not visit any museum opened after 2010. | museum : museum.open_year , museum.museum_id , museum.name , museum.num_of_staff , museum.* | visit : visit.visitor_id , visit.total_spent , visit.museum_id , visit.num_of_ticket , visit.* | visitor : visitor.name , visitor.id , visitor.age , visitor.level_of_membership , visitor.*",
    "output_sequence": " | ",
    "tc_original": [
      "museum.open_year",
      "museum.museum_id",
      "museum.name",
      "museum.num_of_staff",
      "museum.*",
      "visit.visitor_id",
      "visit.total_spent",
      "visit.museum_id",
      "visit.num_of_ticket",
      "visit.*",
      "visitor.name",
      "visitor.id",
      "visitor.age",
      "visitor.level_of_membership",
      "visitor.*"
    ]
  },
  {
    "db_id": "museum_visit",
    "input_sequence": "How many museums were opened after 2013 or before 2008? | museum : museum.open_year , museum.museum_id , museum.name , museum.num_of_staff , museum.* | visitor : visitor.name , visitor.age , visitor.level_of_membership , visitor.id , visitor.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.*",
    "output_sequence": " | ",
    "tc_original": [
      "museum.open_year",
      "museum.museum_id",
      "museum.name",
      "museum.num_of_staff",
      "museum.*",
      "visitor.name",
      "visitor.age",
      "visitor.level_of_membership",
      "visitor.id",
      "visitor.*",
      "visit.museum_id",
      "visit.visitor_id",
      "visit.num_of_ticket",
      "visit.total_spent",
      "visit.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "Find the total number of players. | players : players.player_id , players.hand , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_points , rankings.ranking_date , rankings.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.player_id",
      "players.hand",
      "players.first_name",
      "players.last_name",
      "players.birth_date",
      "players.*",
      "rankings.player_id",
      "rankings.ranking",
      "rankings.tours",
      "rankings.ranking_points",
      "rankings.ranking_date",
      "rankings.*",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.surface",
      "matches.year",
      "matches.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "How many players are there? | players : players.player_id , players.hand , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_points , rankings.ranking_date , rankings.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.player_id",
      "players.hand",
      "players.first_name",
      "players.last_name",
      "players.birth_date",
      "players.*",
      "rankings.player_id",
      "rankings.ranking",
      "rankings.tours",
      "rankings.ranking_points",
      "rankings.ranking_date",
      "rankings.*",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.surface",
      "matches.year",
      "matches.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "Find the total number of matches. | matches : matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.* | rankings : rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.* | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.match_num",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.surface",
      "matches.*",
      "rankings.ranking",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.*",
      "players.hand",
      "players.player_id",
      "players.first_name",
      "players.last_name",
      "players.birth_date",
      "players.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "Count the number of matches. | matches : matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.* | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.match_num",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.surface",
      "matches.*",
      "players.hand",
      "players.player_id",
      "players.first_name",
      "players.last_name",
      "players.birth_date",
      "players.*",
      "rankings.ranking",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "List the first name and birth date of all players from the country with code USA. | players : players.first_name , players.birth_date , players.country_code ( USA ) , players.last_name ( Date ) , players.player_id , players.* | rankings : rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.first_name",
      "players.birth_date",
      "players.country_code",
      "players.last_name",
      "players.player_id",
      "players.*",
      "rankings.ranking",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.*",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.surface",
      "matches.year",
      "matches.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "What are the first names and birth dates of players from the USA? | players : players.birth_date , players.first_name , players.country_code ( USA ) , players.player_id , players.hand , players.* | rankings : rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.birth_date",
      "players.first_name",
      "players.country_code",
      "players.player_id",
      "players.hand",
      "players.*",
      "rankings.ranking",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.*",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.surface",
      "matches.year",
      "matches.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "Find the average age of losers and winners of all matches. | matches : matches.loser_age , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.loser_entry , matches.* | rankings : rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.* | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.loser_age",
      "matches.winner_age",
      "matches.winner_entry",
      "matches.winner_hand",
      "matches.loser_entry",
      "matches.*",
      "rankings.ranking",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.*",
      "players.hand",
      "players.player_id",
      "players.first_name",
      "players.last_name",
      "players.birth_date",
      "players.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "What are the average ages of losers and winners across matches? | matches : matches.loser_age , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.loser_entry , matches.* | rankings : rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.* | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.loser_age",
      "matches.winner_age",
      "matches.winner_entry",
      "matches.winner_hand",
      "matches.loser_entry",
      "matches.*",
      "rankings.ranking",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.*",
      "players.hand",
      "players.player_id",
      "players.first_name",
      "players.last_name",
      "players.birth_date",
      "players.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "Find the average rank of winners in all matches. | matches : matches.winner_rank , matches.winner_entry , matches.winner_rank_points , matches.winner_hand , matches.winner_id , matches.* | rankings : rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.* | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.winner_rank",
      "matches.winner_entry",
      "matches.winner_rank_points",
      "matches.winner_hand",
      "matches.winner_id",
      "matches.*",
      "rankings.ranking",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.*",
      "players.hand",
      "players.player_id",
      "players.first_name",
      "players.last_name",
      "players.birth_date",
      "players.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "What is the average rank for winners in all matches? | matches : matches.winner_rank , matches.winner_entry , matches.winner_rank_points , matches.winner_hand , matches.winner_id , matches.* | rankings : rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.* | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.winner_rank",
      "matches.winner_entry",
      "matches.winner_rank_points",
      "matches.winner_hand",
      "matches.winner_id",
      "matches.*",
      "rankings.ranking",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.*",
      "players.hand",
      "players.player_id",
      "players.first_name",
      "players.last_name",
      "players.birth_date",
      "players.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "Find the highest rank of losers in all matches. | matches : matches.loser_rank , matches.loser_rank_points , matches.loser_name , matches.loser_id , matches.loser_seed , matches.* | rankings : rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_points , rankings.ranking_date , rankings.* | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.loser_rank",
      "matches.loser_rank_points",
      "matches.loser_name",
      "matches.loser_id",
      "matches.loser_seed",
      "matches.*",
      "rankings.ranking",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking_points",
      "rankings.ranking_date",
      "rankings.*",
      "players.hand",
      "players.player_id",
      "players.first_name",
      "players.last_name",
      "players.birth_date",
      "players.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "What is the best rank of losers across all matches? | matches : matches.loser_rank , matches.loser_rank_points , matches.loser_name , matches.loser_id , matches.loser_seed , matches.* | rankings : rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_points , rankings.ranking_date , rankings.* | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.loser_rank",
      "matches.loser_rank_points",
      "matches.loser_name",
      "matches.loser_id",
      "matches.loser_seed",
      "matches.*",
      "rankings.ranking",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking_points",
      "rankings.ranking_date",
      "rankings.*",
      "players.hand",
      "players.player_id",
      "players.first_name",
      "players.last_name",
      "players.birth_date",
      "players.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "find the number of distinct country codes of all players. | players : players.country_code , players.hand , players.player_id , players.first_name , players.last_name , players.* | rankings : rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.country_code",
      "players.hand",
      "players.player_id",
      "players.first_name",
      "players.last_name",
      "players.*",
      "rankings.ranking",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.*",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.surface",
      "matches.year",
      "matches.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "How many distinct countries do players come from? | players : players.country_code , players.hand , players.player_id , players.first_name , players.last_name , players.* | rankings : rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.country_code",
      "players.hand",
      "players.player_id",
      "players.first_name",
      "players.last_name",
      "players.*",
      "rankings.player_id",
      "rankings.ranking",
      "rankings.tours",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.*",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.surface",
      "matches.year",
      "matches.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "Find the number of distinct name of losers. | matches : matches.loser_name , matches.loser_rank , matches.loser_id , matches.loser_seed , matches.minutes , matches.* | rankings : rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.* | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.loser_name",
      "matches.loser_rank",
      "matches.loser_id",
      "matches.loser_seed",
      "matches.minutes",
      "matches.*",
      "rankings.ranking",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.*",
      "players.hand",
      "players.player_id",
      "players.first_name",
      "players.last_name",
      "players.birth_date",
      "players.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "How many different loser names are there? | matches : matches.loser_name , matches.loser_rank , matches.minutes , matches.round , matches.score , matches.* | rankings : rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.* | players : players.hand , players.first_name , players.last_name , players.player_id , players.birth_date , players.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.loser_name",
      "matches.loser_rank",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.*",
      "rankings.ranking",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.*",
      "players.hand",
      "players.first_name",
      "players.last_name",
      "players.player_id",
      "players.birth_date",
      "players.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "Find the name of tourney that has more than 10 matches. | matches : matches.tourney_name , matches.tourney_id , matches.tourney_level , matches.match_num , matches.tourney_date , matches.* | rankings : rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.* | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.tourney_name",
      "matches.tourney_id",
      "matches.tourney_level",
      "matches.match_num",
      "matches.tourney_date",
      "matches.*",
      "rankings.ranking",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.*",
      "players.hand",
      "players.player_id",
      "players.first_name",
      "players.last_name",
      "players.birth_date",
      "players.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "What are the names of tournaments that have more than 10 matches? | matches : matches.tourney_name , matches.tourney_id , matches.tourney_level , matches.match_num , matches.tourney_date , matches.* | rankings : rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.* | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.tourney_name",
      "matches.tourney_id",
      "matches.tourney_level",
      "matches.match_num",
      "matches.tourney_date",
      "matches.*",
      "rankings.ranking",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.*",
      "players.hand",
      "players.player_id",
      "players.first_name",
      "players.last_name",
      "players.birth_date",
      "players.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "List the names of all winners who played in both 2013 and 2016. | matches : matches.winner_name , matches.year , matches.winner_id , matches.winner_age , matches.winner_entry , matches.* | rankings : rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.* | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.winner_name",
      "matches.year",
      "matches.winner_id",
      "matches.winner_age",
      "matches.winner_entry",
      "matches.*",
      "rankings.ranking",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.*",
      "players.hand",
      "players.player_id",
      "players.first_name",
      "players.last_name",
      "players.birth_date",
      "players.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "What are the names of players who won in both 2013 and 2016? | players : players.first_name , players.last_name , players.player_id , players.hand , players.birth_date , players.* | matches : matches.winner_name , matches.year , matches.winner_rank , matches.winner_id , matches.minutes , matches.* | rankings : rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.first_name",
      "players.last_name",
      "players.player_id",
      "players.hand",
      "players.birth_date",
      "players.*",
      "matches.winner_name",
      "matches.year",
      "matches.winner_rank",
      "matches.winner_id",
      "matches.minutes",
      "matches.*",
      "rankings.ranking",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "List the number of all matches who played in years of 2013 or 2016. | matches : matches.year , matches.match_num , matches.loser_age , matches.tourney_date , matches.loser_entry , matches.* | players : players.player_id , players.hand , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_points , rankings.ranking_date , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.year",
      "matches.match_num",
      "matches.loser_age",
      "matches.tourney_date",
      "matches.loser_entry",
      "matches.*",
      "players.player_id",
      "players.hand",
      "players.first_name",
      "players.last_name",
      "players.birth_date",
      "players.*",
      "rankings.player_id",
      "rankings.ranking",
      "rankings.tours",
      "rankings.ranking_points",
      "rankings.ranking_date",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "How many matches were played in 2013 or 2016? | matches : matches.year , matches.tourney_date , matches.match_num , matches.minutes , matches.round , matches.* | rankings : rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_points , rankings.ranking_date , rankings.* | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.year",
      "matches.tourney_date",
      "matches.match_num",
      "matches.minutes",
      "matches.round",
      "matches.*",
      "rankings.ranking",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking_points",
      "rankings.ranking_date",
      "rankings.*",
      "players.hand",
      "players.player_id",
      "players.first_name",
      "players.last_name",
      "players.birth_date",
      "players.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open? | players : players.country_code , players.first_name , players.hand , players.player_id , players.last_name , players.* | matches : matches.tourney_name ( Australian Open , WTA Championships ) , matches.winner_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.* | rankings : rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.country_code",
      "players.first_name",
      "players.hand",
      "players.player_id",
      "players.last_name",
      "players.*",
      "matches.tourney_name",
      "matches.winner_name",
      "matches.winner_age",
      "matches.winner_entry",
      "matches.winner_hand",
      "matches.*",
      "rankings.ranking",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open? | players : players.first_name , players.country_code , players.hand , players.player_id , players.last_name , players.* | matches : matches.tourney_name ( Australian Open , WTA Championships ) , matches.winner_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.* | rankings : rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.first_name",
      "players.country_code",
      "players.hand",
      "players.player_id",
      "players.last_name",
      "players.*",
      "matches.tourney_name",
      "matches.winner_name",
      "matches.winner_age",
      "matches.winner_entry",
      "matches.winner_hand",
      "matches.*",
      "rankings.ranking",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "Find the first name and country code of the oldest player. | players : players.first_name , players.country_code , players.birth_date , players.player_id , players.hand , players.* | matches : matches.loser_age , matches.winner_age , matches.minutes , matches.round , matches.score , matches.* | rankings : rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.first_name",
      "players.country_code",
      "players.birth_date",
      "players.player_id",
      "players.hand",
      "players.*",
      "matches.loser_age",
      "matches.winner_age",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.*",
      "rankings.ranking",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "What is the first name and country code of the oldest player? | players : players.first_name , players.country_code , players.birth_date , players.player_id , players.hand , players.* | matches : matches.winner_age , matches.minutes , matches.round , matches.score , matches.surface , matches.* | rankings : rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.first_name",
      "players.country_code",
      "players.birth_date",
      "players.player_id",
      "players.hand",
      "players.*",
      "matches.winner_age",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.surface",
      "matches.*",
      "rankings.ranking",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "List the first and last name of all players in the order of birth date. | players : players.birth_date , players.first_name , players.last_name ( Date , Last ) , players.player_id , players.hand , players.* | rankings : rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.birth_date",
      "players.first_name",
      "players.last_name",
      "players.player_id",
      "players.hand",
      "players.*",
      "rankings.ranking",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.*",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.surface",
      "matches.year",
      "matches.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "What are the full names of all players, sorted by birth date? | players : players.birth_date , players.first_name , players.last_name ( Date ) , players.player_id , players.hand , players.* | rankings : rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.birth_date",
      "players.first_name",
      "players.last_name",
      "players.player_id",
      "players.hand",
      "players.*",
      "rankings.ranking",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.*",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.surface",
      "matches.year",
      "matches.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "List the first and last name of all players who are left / L hand in the order of birth date. | players : players.birth_date , players.first_name , players.last_name ( Date , Last ) , players.hand , players.player_id , players.* | matches : matches.loser_hand , matches.minutes , matches.round , matches.score , matches.surface , matches.* | rankings : rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.birth_date",
      "players.first_name",
      "players.last_name",
      "players.hand",
      "players.player_id",
      "players.*",
      "matches.loser_hand",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.surface",
      "matches.*",
      "rankings.ranking",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "What are the full names of all left handed players, in order of birth date? | players : players.birth_date , players.first_name , players.last_name ( Date ) , players.hand , players.player_id , players.* | rankings : rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.birth_date",
      "players.first_name",
      "players.last_name",
      "players.hand",
      "players.player_id",
      "players.*",
      "rankings.ranking",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.*",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.surface",
      "matches.year",
      "matches.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "Find the first name and country code of the player who did the most number of tours. | players : players.country_code , players.first_name , players.player_id , players.hand , players.last_name , players.* | rankings : rankings.tours , rankings.player_id , rankings.ranking , rankings.ranking_points , rankings.ranking_date , rankings.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.country_code",
      "players.first_name",
      "players.player_id",
      "players.hand",
      "players.last_name",
      "players.*",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking",
      "rankings.ranking_points",
      "rankings.ranking_date",
      "rankings.*",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.surface",
      "matches.year",
      "matches.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "What is the first name and country code of the player with the most tours? | players : players.first_name , players.country_code , players.player_id , players.hand , players.last_name , players.* | rankings : rankings.tours , rankings.player_id , rankings.ranking , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.first_name",
      "players.country_code",
      "players.player_id",
      "players.hand",
      "players.last_name",
      "players.*",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.*",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.surface",
      "matches.year",
      "matches.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "Find the year that has the most number of matches. | matches : matches.year , matches.match_num , matches.minutes , matches.round , matches.score , matches.* | rankings : rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.* | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.year",
      "matches.match_num",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.*",
      "rankings.ranking",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.*",
      "players.hand",
      "players.player_id",
      "players.first_name",
      "players.last_name",
      "players.birth_date",
      "players.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "Which year had the most matches? | matches : matches.year , matches.match_num , matches.minutes , matches.round , matches.score , matches.* | rankings : rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.* | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.year",
      "matches.match_num",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.*",
      "rankings.ranking",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.*",
      "players.hand",
      "players.player_id",
      "players.first_name",
      "players.last_name",
      "players.birth_date",
      "players.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "Find the name and rank points of the winner who won the most times. | matches : matches.winner_name , matches.winner_rank_points , matches.winner_id , matches.winner_rank , matches.winner_entry , matches.* | rankings : rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_points , rankings.ranking_date , rankings.* | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.winner_name",
      "matches.winner_rank_points",
      "matches.winner_id",
      "matches.winner_rank",
      "matches.winner_entry",
      "matches.*",
      "rankings.ranking",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking_points",
      "rankings.ranking_date",
      "rankings.*",
      "players.hand",
      "players.player_id",
      "players.first_name",
      "players.last_name",
      "players.birth_date",
      "players.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "What is the name of the winner who has won the most matches, and how many rank points does this player have? | matches : matches.winner_name , matches.winner_rank_points , matches.winner_rank , matches.winner_id , matches.winner_entry , matches.* | rankings : rankings.ranking_points , rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.* | players : players.first_name , players.hand , players.player_id , players.last_name , players.birth_date , players.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.winner_name",
      "matches.winner_rank_points",
      "matches.winner_rank",
      "matches.winner_id",
      "matches.winner_entry",
      "matches.*",
      "rankings.ranking_points",
      "rankings.ranking",
      "rankings.player_id",
      "rankings.tours",
      "rankings.ranking_date",
      "rankings.*",
      "players.first_name",
      "players.hand",
      "players.player_id",
      "players.last_name",
      "players.birth_date",
      "players.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney. | matches : matches.tourney_name ( Australian Open ) , matches.winner_name , matches.winner_rank_points , matches.winner_entry , matches.winner_id , matches.* | rankings : rankings.ranking_points , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.player_id , rankings.* | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.tourney_name",
      "matches.winner_name",
      "matches.winner_rank_points",
      "matches.winner_entry",
      "matches.winner_id",
      "matches.*",
      "rankings.ranking_points",
      "rankings.ranking",
      "rankings.tours",
      "rankings.ranking_date",
      "rankings.player_id",
      "rankings.*",
      "players.hand",
      "players.player_id",
      "players.first_name",
      "players.last_name",
      "players.birth_date",
      "players.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "What is the name of the winner with the most rank points who participated in the Australian Open tournament? | matches : matches.tourney_name ( Australian Open ) , matches.winner_name , matches.winner_rank_points , matches.tourney_id , matches.winner_rank , matches.* | rankings : rankings.ranking_points , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.player_id , rankings.* | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.tourney_name",
      "matches.winner_name",
      "matches.winner_rank_points",
      "matches.tourney_id",
      "matches.winner_rank",
      "matches.*",
      "rankings.ranking_points",
      "rankings.ranking",
      "rankings.tours",
      "rankings.ranking_date",
      "rankings.player_id",
      "rankings.*",
      "players.hand",
      "players.player_id",
      "players.first_name",
      "players.last_name",
      "players.birth_date",
      "players.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "find the names of loser and winner who played in the match with greatest number of minutes. | matches : matches.loser_name , matches.minutes , matches.winner_name , matches.winner_entry , matches.match_num , matches.* | rankings : rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.* | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.loser_name",
      "matches.minutes",
      "matches.winner_name",
      "matches.winner_entry",
      "matches.match_num",
      "matches.*",
      "rankings.ranking",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.*",
      "players.hand",
      "players.player_id",
      "players.first_name",
      "players.last_name",
      "players.birth_date",
      "players.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "What are the names of the winner and loser who played in the longest match? | matches : matches.winner_name , matches.minutes , matches.loser_name , matches.round , matches.loser_age , matches.* | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_points , rankings.ranking_date , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.winner_name",
      "matches.minutes",
      "matches.loser_name",
      "matches.round",
      "matches.loser_age",
      "matches.*",
      "players.hand",
      "players.player_id",
      "players.first_name",
      "players.last_name",
      "players.birth_date",
      "players.*",
      "rankings.ranking",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking_points",
      "rankings.ranking_date",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "Find the average ranking for each player and their first name. | rankings : rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours , rankings.ranking_date , rankings.* | players : players.first_name , players.player_id , players.hand , players.last_name , players.birth_date , players.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*",
    "output_sequence": " | ",
    "tc_original": [
      "rankings.ranking",
      "rankings.player_id",
      "rankings.ranking_points",
      "rankings.tours",
      "rankings.ranking_date",
      "rankings.*",
      "players.first_name",
      "players.player_id",
      "players.hand",
      "players.last_name",
      "players.birth_date",
      "players.*",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.surface",
      "matches.year",
      "matches.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "What are the first names of all players, and their average rankings? | players : players.first_name , players.hand , players.player_id , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.ranking_points , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.first_name",
      "players.hand",
      "players.player_id",
      "players.last_name",
      "players.birth_date",
      "players.*",
      "rankings.ranking",
      "rankings.ranking_points",
      "rankings.player_id",
      "rankings.tours",
      "rankings.ranking_date",
      "rankings.*",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.surface",
      "matches.year",
      "matches.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "Find the total ranking points for each player and their first name. | rankings : rankings.ranking_points , rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.* | players : players.first_name , players.player_id , players.hand , players.last_name , players.birth_date , players.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*",
    "output_sequence": " | ",
    "tc_original": [
      "rankings.ranking_points",
      "rankings.player_id",
      "rankings.ranking",
      "rankings.tours",
      "rankings.ranking_date",
      "rankings.*",
      "players.first_name",
      "players.player_id",
      "players.hand",
      "players.last_name",
      "players.birth_date",
      "players.*",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.surface",
      "matches.year",
      "matches.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "What are the first names of all players, and their total ranking points? | players : players.first_name , players.hand , players.player_id , players.last_name , players.birth_date , players.* | rankings : rankings.ranking_points , rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.first_name",
      "players.hand",
      "players.player_id",
      "players.last_name",
      "players.birth_date",
      "players.*",
      "rankings.ranking_points",
      "rankings.player_id",
      "rankings.ranking",
      "rankings.tours",
      "rankings.ranking_date",
      "rankings.*",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.surface",
      "matches.year",
      "matches.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "find the number of players for each country. | players : players.country_code , players.hand , players.player_id , players.first_name , players.last_name , players.* | rankings : rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.country_code",
      "players.hand",
      "players.player_id",
      "players.first_name",
      "players.last_name",
      "players.*",
      "rankings.player_id",
      "rankings.ranking",
      "rankings.tours",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.*",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.surface",
      "matches.year",
      "matches.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "How many players are from each country? | players : players.country_code , players.player_id , players.hand , players.first_name , players.last_name , players.* | rankings : rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_points , rankings.ranking_date , rankings.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.country_code",
      "players.player_id",
      "players.hand",
      "players.first_name",
      "players.last_name",
      "players.*",
      "rankings.player_id",
      "rankings.ranking",
      "rankings.tours",
      "rankings.ranking_points",
      "rankings.ranking_date",
      "rankings.*",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.surface",
      "matches.year",
      "matches.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "find the code of the country where has the greatest number of players. | players : players.country_code , players.hand , players.player_id , players.first_name , players.last_name , players.* | rankings : rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.country_code",
      "players.hand",
      "players.player_id",
      "players.first_name",
      "players.last_name",
      "players.*",
      "rankings.ranking",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.*",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.surface",
      "matches.year",
      "matches.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "What is the code of the country with the most players? | players : players.country_code , players.hand , players.player_id , players.first_name , players.last_name , players.* | rankings : rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.country_code",
      "players.hand",
      "players.player_id",
      "players.first_name",
      "players.last_name",
      "players.*",
      "rankings.ranking",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.*",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.surface",
      "matches.year",
      "matches.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "Find the codes of countries that have more than 50 players. | players : players.country_code , players.player_id , players.hand , players.first_name , players.last_name , players.* | rankings : rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.country_code",
      "players.player_id",
      "players.hand",
      "players.first_name",
      "players.last_name",
      "players.*",
      "rankings.player_id",
      "rankings.ranking",
      "rankings.tours",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.*",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.surface",
      "matches.year",
      "matches.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "What are the codes of countries with more than 50 players? | players : players.country_code , players.player_id , players.hand , players.first_name , players.last_name , players.* | rankings : rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.country_code",
      "players.player_id",
      "players.hand",
      "players.first_name",
      "players.last_name",
      "players.*",
      "rankings.player_id",
      "rankings.ranking",
      "rankings.tours",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.*",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.surface",
      "matches.year",
      "matches.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "Find the total number of tours for each ranking date. | rankings : rankings.ranking_date , rankings.tours , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.* | players : players.last_name ( Date ) , players.hand , players.player_id , players.first_name , players.birth_date , players.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*",
    "output_sequence": " | ",
    "tc_original": [
      "rankings.ranking_date",
      "rankings.tours",
      "rankings.ranking",
      "rankings.player_id",
      "rankings.ranking_points",
      "rankings.*",
      "players.last_name",
      "players.hand",
      "players.player_id",
      "players.first_name",
      "players.birth_date",
      "players.*",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.surface",
      "matches.year",
      "matches.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "How many total tours were there for each ranking date? | rankings : rankings.ranking_date , rankings.tours , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.* | players : players.last_name ( Date ) , players.hand , players.player_id , players.first_name , players.birth_date , players.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*",
    "output_sequence": " | ",
    "tc_original": [
      "rankings.ranking_date",
      "rankings.tours",
      "rankings.ranking",
      "rankings.player_id",
      "rankings.ranking_points",
      "rankings.*",
      "players.last_name",
      "players.hand",
      "players.player_id",
      "players.first_name",
      "players.birth_date",
      "players.*",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.surface",
      "matches.year",
      "matches.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "Find the number of matches happened in each year. | matches : matches.year , matches.match_num , matches.minutes , matches.round , matches.score , matches.* | rankings : rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.* | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.year",
      "matches.match_num",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.*",
      "rankings.ranking",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.*",
      "players.hand",
      "players.player_id",
      "players.first_name",
      "players.last_name",
      "players.birth_date",
      "players.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "How many matches were played in each year? | matches : matches.year , matches.match_num , matches.minutes , matches.round , matches.score , matches.* | rankings : rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.* | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.year",
      "matches.match_num",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.*",
      "rankings.ranking",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.*",
      "players.hand",
      "players.player_id",
      "players.first_name",
      "players.last_name",
      "players.birth_date",
      "players.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "Find the name and rank of the 3 youngest winners across all matches. | matches : matches.winner_name , matches.winner_age , matches.winner_rank , matches.loser_age , matches.year , matches.* | rankings : rankings.ranking , rankings.tours , rankings.ranking_date , rankings.player_id , rankings.ranking_points , rankings.* | players : players.hand , players.birth_date , players.player_id , players.first_name , players.last_name , players.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.winner_name",
      "matches.winner_age",
      "matches.winner_rank",
      "matches.loser_age",
      "matches.year",
      "matches.*",
      "rankings.ranking",
      "rankings.tours",
      "rankings.ranking_date",
      "rankings.player_id",
      "rankings.ranking_points",
      "rankings.*",
      "players.hand",
      "players.birth_date",
      "players.player_id",
      "players.first_name",
      "players.last_name",
      "players.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "What are the names and ranks of the three youngest winners across all matches? | matches : matches.winner_name , matches.winner_age , matches.winner_rank , matches.loser_age , matches.year , matches.* | rankings : rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_points , rankings.ranking_date , rankings.* | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.winner_name",
      "matches.winner_age",
      "matches.winner_rank",
      "matches.loser_age",
      "matches.year",
      "matches.*",
      "rankings.ranking",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking_points",
      "rankings.ranking_date",
      "rankings.*",
      "players.hand",
      "players.player_id",
      "players.first_name",
      "players.last_name",
      "players.birth_date",
      "players.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "How many different winners both participated in the WTA Championships and were left handed? | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.* | matches : matches.tourney_name ( WTA Championships ) , matches.winner_hand , matches.winner_entry , matches.winner_id , matches.winner_age , matches.* | rankings : rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.hand",
      "players.player_id",
      "players.first_name",
      "players.last_name",
      "players.birth_date",
      "players.*",
      "matches.tourney_name",
      "matches.winner_hand",
      "matches.winner_entry",
      "matches.winner_id",
      "matches.winner_age",
      "matches.*",
      "rankings.ranking",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "Find the number of left handed winners who participated in the WTA Championships. | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.* | matches : matches.tourney_name ( WTA Championships ) , matches.winner_hand , matches.winner_entry , matches.tourney_id , matches.tourney_level , matches.* | rankings : rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.hand",
      "players.player_id",
      "players.first_name",
      "players.last_name",
      "players.birth_date",
      "players.*",
      "matches.tourney_name",
      "matches.winner_hand",
      "matches.winner_entry",
      "matches.tourney_id",
      "matches.tourney_level",
      "matches.*",
      "rankings.ranking",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches. | players : players.first_name , players.birth_date , players.country_code , players.last_name ( Date ) , players.hand , players.* | matches : matches.winner_rank_points , matches.winner_name , matches.loser_rank_points , matches.winner_entry , matches.winner_id , matches.* | rankings : rankings.ranking_points , rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_date , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.first_name",
      "players.birth_date",
      "players.country_code",
      "players.last_name",
      "players.hand",
      "players.*",
      "matches.winner_rank_points",
      "matches.winner_name",
      "matches.loser_rank_points",
      "matches.winner_entry",
      "matches.winner_id",
      "matches.*",
      "rankings.ranking_points",
      "rankings.ranking",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches? | players : players.first_name , players.birth_date , players.country_code , players.player_id , players.last_name ( Date ) , players.* | matches : matches.winner_rank_points , matches.loser_rank_points , matches.match_num , matches.minutes , matches.round , matches.* | rankings : rankings.player_id , rankings.ranking_points , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.first_name",
      "players.birth_date",
      "players.country_code",
      "players.player_id",
      "players.last_name",
      "players.*",
      "matches.winner_rank_points",
      "matches.loser_rank_points",
      "matches.match_num",
      "matches.minutes",
      "matches.round",
      "matches.*",
      "rankings.player_id",
      "rankings.ranking_points",
      "rankings.ranking",
      "rankings.tours",
      "rankings.ranking_date",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "Find the number of players for each hand type. | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.hand",
      "players.player_id",
      "players.first_name",
      "players.last_name",
      "players.birth_date",
      "players.*",
      "rankings.ranking",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.*",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.surface",
      "matches.year",
      "matches.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "How many players are there for each hand type? | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_points , rankings.ranking_date , rankings.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.hand",
      "players.player_id",
      "players.first_name",
      "players.last_name",
      "players.birth_date",
      "players.*",
      "rankings.ranking",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking_points",
      "rankings.ranking_date",
      "rankings.*",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.surface",
      "matches.year",
      "matches.*"
    ]
  },
  {
    "db_id": "battle_death",
    "input_sequence": "How many ships ended up being 'Captured'? | ship : ship.disposition_of_ship ( Captured ) , ship.name , ship.id , ship.location , ship.ship_type , ship.* | death : death.id , death.note , death.killed , death.injured , death.caused_by_ship_id , death.* | battle : battle.id , battle.name , battle.date , battle.result , battle.bulgarian_commander , battle.*",
    "output_sequence": " | ",
    "tc_original": [
      "ship.disposition_of_ship",
      "ship.name",
      "ship.id",
      "ship.location",
      "ship.ship_type",
      "ship.*",
      "death.id",
      "death.note",
      "death.killed",
      "death.injured",
      "death.caused_by_ship_id",
      "death.*",
      "battle.id",
      "battle.name",
      "battle.date",
      "battle.result",
      "battle.bulgarian_commander",
      "battle.*"
    ]
  },
  {
    "db_id": "battle_death",
    "input_sequence": "List the name and tonnage ordered by in descending alphaetical order for the names. | ship : ship.tonnage , ship.name , ship.id , ship.location , ship.ship_type , ship.* | death : death.id , death.note , death.killed , death.injured , death.caused_by_ship_id , death.* | battle : battle.id , battle.name , battle.date , battle.result , battle.bulgarian_commander , battle.*",
    "output_sequence": " | ",
    "tc_original": [
      "ship.tonnage",
      "ship.name",
      "ship.id",
      "ship.location",
      "ship.ship_type",
      "ship.*",
      "death.id",
      "death.note",
      "death.killed",
      "death.injured",
      "death.caused_by_ship_id",
      "death.*",
      "battle.id",
      "battle.name",
      "battle.date",
      "battle.result",
      "battle.bulgarian_commander",
      "battle.*"
    ]
  },
  {
    "db_id": "battle_death",
    "input_sequence": "List the name, date and result of each battle. | battle : battle.name , battle.date , battle.result , battle.id , battle.bulgarian_commander , battle.* | death : death.id , death.note , death.killed , death.injured , death.caused_by_ship_id , death.* | ship : ship.id , ship.name , ship.location , ship.lost_in_battle , ship.tonnage , ship.*",
    "output_sequence": " | ",
    "tc_original": [
      "battle.name",
      "battle.date",
      "battle.result",
      "battle.id",
      "battle.bulgarian_commander",
      "battle.*",
      "death.id",
      "death.note",
      "death.killed",
      "death.injured",
      "death.caused_by_ship_id",
      "death.*",
      "ship.id",
      "ship.name",
      "ship.location",
      "ship.lost_in_battle",
      "ship.tonnage",
      "ship.*"
    ]
  },
  {
    "db_id": "battle_death",
    "input_sequence": "What is maximum and minimum death toll caused each time? | death : death.caused_by_ship_id , death.killed , death.id , death.injured , death.note , death.* | battle : battle.id , battle.name , battle.date , battle.result , battle.bulgarian_commander , battle.* | ship : ship.id , ship.name , ship.location , ship.lost_in_battle , ship.tonnage , ship.*",
    "output_sequence": " | ",
    "tc_original": [
      "death.caused_by_ship_id",
      "death.killed",
      "death.id",
      "death.injured",
      "death.note",
      "death.*",
      "battle.id",
      "battle.name",
      "battle.date",
      "battle.result",
      "battle.bulgarian_commander",
      "battle.*",
      "ship.id",
      "ship.name",
      "ship.location",
      "ship.lost_in_battle",
      "ship.tonnage",
      "ship.*"
    ]
  },
  {
    "db_id": "battle_death",
    "input_sequence": "What is the average number of injuries caused each time? | death : death.injured , death.caused_by_ship_id , death.id , death.note , death.killed , death.* | battle : battle.id , battle.name , battle.date , battle.result , battle.bulgarian_commander , battle.* | ship : ship.id , ship.name , ship.location , ship.lost_in_battle , ship.tonnage , ship.*",
    "output_sequence": " | ",
    "tc_original": [
      "death.injured",
      "death.caused_by_ship_id",
      "death.id",
      "death.note",
      "death.killed",
      "death.*",
      "battle.id",
      "battle.name",
      "battle.date",
      "battle.result",
      "battle.bulgarian_commander",
      "battle.*",
      "ship.id",
      "ship.name",
      "ship.location",
      "ship.lost_in_battle",
      "ship.tonnage",
      "ship.*"
    ]
  },
  {
    "db_id": "battle_death",
    "input_sequence": "What are the death and injury situations caused by the ship with tonnage 't'? | ship : ship.tonnage , ship.id , ship.name , ship.location , ship.ship_type , ship.* | death : death.injured , death.killed , death.caused_by_ship_id , death.id , death.note , death.* | battle : battle.id , battle.name , battle.date , battle.result , battle.bulgarian_commander , battle.*",
    "output_sequence": " | ",
    "tc_original": [
      "ship.tonnage",
      "ship.id",
      "ship.name",
      "ship.location",
      "ship.ship_type",
      "ship.*",
      "death.injured",
      "death.killed",
      "death.caused_by_ship_id",
      "death.id",
      "death.note",
      "death.*",
      "battle.id",
      "battle.name",
      "battle.date",
      "battle.result",
      "battle.bulgarian_commander",
      "battle.*"
    ]
  },
  {
    "db_id": "battle_death",
    "input_sequence": "What are the name and results of the battles when the bulgarian commander is not 'Boril' | battle : battle.bulgarian_commander ( Boril ) , battle.name , battle.result , battle.id , battle.date , battle.* | death : death.id , death.note , death.killed , death.injured , death.caused_by_ship_id , death.* | ship : ship.id , ship.name , ship.location , ship.lost_in_battle , ship.tonnage , ship.*",
    "output_sequence": " | ",
    "tc_original": [
      "battle.bulgarian_commander",
      "battle.name",
      "battle.result",
      "battle.id",
      "battle.date",
      "battle.*",
      "death.id",
      "death.note",
      "death.killed",
      "death.injured",
      "death.caused_by_ship_id",
      "death.*",
      "ship.id",
      "ship.name",
      "ship.location",
      "ship.lost_in_battle",
      "ship.tonnage",
      "ship.*"
    ]
  },
  {
    "db_id": "battle_death",
    "input_sequence": "What are the different ids and names of the battles that lost any 'Brig' type shipes? | battle : battle.name , battle.id , battle.date , battle.result , battle.bulgarian_commander , battle.* | ship : ship.ship_type ( Brig ) , ship.lost_in_battle , ship.id , ship.name , ship.location , ship.* | death : death.id , death.note , death.killed , death.injured , death.caused_by_ship_id , death.*",
    "output_sequence": " | ",
    "tc_original": [
      "battle.name",
      "battle.id",
      "battle.date",
      "battle.result",
      "battle.bulgarian_commander",
      "battle.*",
      "ship.ship_type",
      "ship.lost_in_battle",
      "ship.id",
      "ship.name",
      "ship.location",
      "ship.*",
      "death.id",
      "death.note",
      "death.killed",
      "death.injured",
      "death.caused_by_ship_id",
      "death.*"
    ]
  },
  {
    "db_id": "battle_death",
    "input_sequence": "What are the ids and names of the battles that led to more than 10 people killed in total. | death : death.killed , death.id , death.note , death.injured , death.caused_by_ship_id , death.* | battle : battle.name , battle.id , battle.result , battle.date , battle.bulgarian_commander , battle.* | ship : ship.id , ship.name , ship.location , ship.lost_in_battle , ship.tonnage , ship.*",
    "output_sequence": " | ",
    "tc_original": [
      "death.killed",
      "death.id",
      "death.note",
      "death.injured",
      "death.caused_by_ship_id",
      "death.*",
      "battle.name",
      "battle.id",
      "battle.result",
      "battle.date",
      "battle.bulgarian_commander",
      "battle.*",
      "ship.id",
      "ship.name",
      "ship.location",
      "ship.lost_in_battle",
      "ship.tonnage",
      "ship.*"
    ]
  },
  {
    "db_id": "battle_death",
    "input_sequence": "What is the ship id and name that caused most total injuries? | ship : ship.name , ship.id , ship.location , ship.ship_type , ship.lost_in_battle , ship.* | death : death.injured , death.caused_by_ship_id , death.id , death.note , death.killed , death.* | battle : battle.id , battle.name , battle.date , battle.result , battle.bulgarian_commander , battle.*",
    "output_sequence": " | ",
    "tc_original": [
      "ship.name",
      "ship.id",
      "ship.location",
      "ship.ship_type",
      "ship.lost_in_battle",
      "ship.*",
      "death.injured",
      "death.caused_by_ship_id",
      "death.id",
      "death.note",
      "death.killed",
      "death.*",
      "battle.id",
      "battle.name",
      "battle.date",
      "battle.result",
      "battle.bulgarian_commander",
      "battle.*"
    ]
  },
  {
    "db_id": "battle_death",
    "input_sequence": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'? | battle : battle.latin_commander ( Baldwin I ) , battle.bulgarian_commander ( Kaloyan ) , battle.name , battle.id , battle.date , battle.* | death : death.id , death.note , death.killed , death.injured , death.caused_by_ship_id , death.* | ship : ship.id , ship.name , ship.location , ship.lost_in_battle , ship.tonnage , ship.*",
    "output_sequence": " | ",
    "tc_original": [
      "battle.latin_commander",
      "battle.bulgarian_commander",
      "battle.name",
      "battle.id",
      "battle.date",
      "battle.*",
      "death.id",
      "death.note",
      "death.killed",
      "death.injured",
      "death.caused_by_ship_id",
      "death.*",
      "ship.id",
      "ship.name",
      "ship.location",
      "ship.lost_in_battle",
      "ship.tonnage",
      "ship.*"
    ]
  },
  {
    "db_id": "battle_death",
    "input_sequence": "How many different results are there for the battles? | battle : battle.result , battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.* | death : death.id , death.note , death.killed , death.injured , death.caused_by_ship_id , death.* | ship : ship.id , ship.name , ship.location , ship.lost_in_battle , ship.tonnage , ship.*",
    "output_sequence": " | ",
    "tc_original": [
      "battle.result",
      "battle.id",
      "battle.name",
      "battle.date",
      "battle.bulgarian_commander",
      "battle.*",
      "death.id",
      "death.note",
      "death.killed",
      "death.injured",
      "death.caused_by_ship_id",
      "death.*",
      "ship.id",
      "ship.name",
      "ship.location",
      "ship.lost_in_battle",
      "ship.tonnage",
      "ship.*"
    ]
  },
  {
    "db_id": "battle_death",
    "input_sequence": "How many battles did not lose any ship with tonnage '225'? | ship : ship.tonnage , ship.lost_in_battle , ship.id , ship.name , ship.location , ship.* | battle : battle.id , battle.name , battle.result , battle.date , battle.bulgarian_commander , battle.* | death : death.id , death.note , death.killed , death.injured , death.caused_by_ship_id , death.*",
    "output_sequence": " | ",
    "tc_original": [
      "ship.tonnage",
      "ship.lost_in_battle",
      "ship.id",
      "ship.name",
      "ship.location",
      "ship.*",
      "battle.id",
      "battle.name",
      "battle.result",
      "battle.date",
      "battle.bulgarian_commander",
      "battle.*",
      "death.id",
      "death.note",
      "death.killed",
      "death.injured",
      "death.caused_by_ship_id",
      "death.*"
    ]
  },
  {
    "db_id": "battle_death",
    "input_sequence": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta' | battle : battle.name , battle.date , battle.result , battle.id , battle.bulgarian_commander , battle.* | ship : ship.name ( HMS Atalanta , Lettice ) , ship.lost_in_battle , ship.id , ship.location , ship.ship_type , ship.* | death : death.id , death.note , death.killed , death.injured , death.caused_by_ship_id , death.*",
    "output_sequence": " | ",
    "tc_original": [
      "battle.name",
      "battle.date",
      "battle.result",
      "battle.id",
      "battle.bulgarian_commander",
      "battle.*",
      "ship.name",
      "ship.lost_in_battle",
      "ship.id",
      "ship.location",
      "ship.ship_type",
      "ship.*",
      "death.id",
      "death.note",
      "death.killed",
      "death.injured",
      "death.caused_by_ship_id",
      "death.*"
    ]
  },
  {
    "db_id": "battle_death",
    "input_sequence": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'. | battle : battle.bulgarian_commander , battle.name , battle.result , battle.id , battle.date , battle.* | ship : ship.location ( English Channel ) , ship.lost_in_battle , ship.name , ship.id , ship.ship_type , ship.* | death : death.id , death.note , death.killed , death.injured , death.caused_by_ship_id , death.*",
    "output_sequence": " | ",
    "tc_original": [
      "battle.bulgarian_commander",
      "battle.name",
      "battle.result",
      "battle.id",
      "battle.date",
      "battle.*",
      "ship.location",
      "ship.lost_in_battle",
      "ship.name",
      "ship.id",
      "ship.ship_type",
      "ship.*",
      "death.id",
      "death.note",
      "death.killed",
      "death.injured",
      "death.caused_by_ship_id",
      "death.*"
    ]
  },
  {
    "db_id": "battle_death",
    "input_sequence": "What are the notes of the death events which has substring 'East'? | death : death.note , death.id , death.killed , death.injured , death.caused_by_ship_id , death.* | battle : battle.id , battle.name , battle.date , battle.result , battle.bulgarian_commander , battle.* | ship : ship.id , ship.name , ship.location , ship.lost_in_battle , ship.tonnage , ship.*",
    "output_sequence": " | ",
    "tc_original": [
      "death.note",
      "death.id",
      "death.killed",
      "death.injured",
      "death.caused_by_ship_id",
      "death.*",
      "battle.id",
      "battle.name",
      "battle.date",
      "battle.result",
      "battle.bulgarian_commander",
      "battle.*",
      "ship.id",
      "ship.name",
      "ship.location",
      "ship.lost_in_battle",
      "ship.tonnage",
      "ship.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "what are all the addresses including line 1 and line 2? | addresses : addresses.line_1 , addresses.line_2 , addresses.address_id , addresses.city , addresses.country , addresses.* | semesters : semesters.semester_name , semesters.semester_description , semesters.other_details , semesters.semester_id , semesters.* | student_enrolment : student_enrolment.student_id , student_enrolment.other_details , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.* | degree_programs : degree_programs.other_details , degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.*",
    "output_sequence": " | ",
    "tc_original": [
      "addresses.line_1",
      "addresses.line_2",
      "addresses.address_id",
      "addresses.city",
      "addresses.country",
      "addresses.*",
      "semesters.semester_name",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.semester_id",
      "semesters.*",
      "student_enrolment.student_id",
      "student_enrolment.other_details",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.semester_id",
      "student_enrolment.*",
      "degree_programs.other_details",
      "degree_programs.degree_program_id",
      "degree_programs.department_id",
      "degree_programs.degree_summary_name",
      "degree_programs.degree_summary_description",
      "degree_programs.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "What is the first and second line for all addresses? | addresses : addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.address_id , addresses.city , addresses.* | semesters : semesters.semester_description , semesters.other_details , semesters.semester_id , semesters.semester_name , semesters.* | student_enrolment : student_enrolment.student_id , student_enrolment.other_details , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.* | degree_programs : degree_programs.department_id , degree_programs.other_details , degree_programs.degree_program_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.*",
    "output_sequence": " | ",
    "tc_original": [
      "addresses.line_1",
      "addresses.line_2",
      "addresses.line_3",
      "addresses.address_id",
      "addresses.city",
      "addresses.*",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.semester_id",
      "semesters.semester_name",
      "semesters.*",
      "student_enrolment.student_id",
      "student_enrolment.other_details",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.semester_id",
      "student_enrolment.*",
      "degree_programs.department_id",
      "degree_programs.other_details",
      "degree_programs.degree_program_id",
      "degree_programs.degree_summary_name",
      "degree_programs.degree_summary_description",
      "degree_programs.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "How many courses in total are listed? | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.* | sections : sections.course_id , sections.section_id , sections.section_name , sections.section_description , sections.other_details , sections.* | semesters : semesters.semester_name , semesters.semester_description , semesters.other_details , semesters.semester_id , semesters.*",
    "output_sequence": " | ",
    "tc_original": [
      "courses.course_id",
      "courses.course_name",
      "courses.course_description",
      "courses.other_details",
      "courses.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.*",
      "sections.course_id",
      "sections.section_id",
      "sections.section_name",
      "sections.section_description",
      "sections.other_details",
      "sections.*",
      "semesters.semester_name",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.semester_id",
      "semesters.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "How many courses are there? | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.* | sections : sections.course_id , sections.section_name , sections.section_description , sections.other_details , sections.section_id , sections.* | semesters : semesters.semester_name , semesters.semester_description , semesters.other_details , semesters.semester_id , semesters.*",
    "output_sequence": " | ",
    "tc_original": [
      "courses.course_name",
      "courses.course_id",
      "courses.course_description",
      "courses.other_details",
      "courses.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.*",
      "sections.course_id",
      "sections.section_name",
      "sections.section_description",
      "sections.other_details",
      "sections.section_id",
      "sections.*",
      "semesters.semester_name",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.semester_id",
      "semesters.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "How is the math course described? | courses : courses.course_description , courses.course_name ( math ) , courses.course_id , courses.other_details , courses.* | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details , sections.* | departments : departments.department_name ( math ) , departments.department_id , departments.department_description , departments.other_details , departments.* | semesters : semesters.semester_description , semesters.other_details , semesters.semester_id , semesters.semester_name , semesters.*",
    "output_sequence": " | ",
    "tc_original": [
      "courses.course_description",
      "courses.course_name",
      "courses.course_id",
      "courses.other_details",
      "courses.*",
      "sections.section_id",
      "sections.course_id",
      "sections.section_name",
      "sections.section_description",
      "sections.other_details",
      "sections.*",
      "departments.department_name",
      "departments.department_id",
      "departments.department_description",
      "departments.other_details",
      "departments.*",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.semester_id",
      "semesters.semester_name",
      "semesters.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "What are the descriptions for all the math courses? | courses : courses.course_description , courses.course_name ( math ) , courses.course_id , courses.other_details , courses.* | departments : departments.department_name ( math ) , departments.department_id , departments.department_description , departments.other_details , departments.* | sections : sections.section_description , sections.section_id , sections.course_id , sections.section_name , sections.other_details , sections.* | semesters : semesters.semester_name , semesters.semester_description , semesters.other_details , semesters.semester_id , semesters.*",
    "output_sequence": " | ",
    "tc_original": [
      "courses.course_description",
      "courses.course_name",
      "courses.course_id",
      "courses.other_details",
      "courses.*",
      "departments.department_name",
      "departments.department_id",
      "departments.department_description",
      "departments.other_details",
      "departments.*",
      "sections.section_description",
      "sections.section_id",
      "sections.course_id",
      "sections.section_name",
      "sections.other_details",
      "sections.*",
      "semesters.semester_name",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.semester_id",
      "semesters.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "What is the zip code of the address in the city Port Chelsea? | addresses : addresses.city ( Port Chelsea ) , addresses.zip_postcode , addresses.address_id , addresses.country , addresses.line_1 , addresses.* | semesters : semesters.semester_description , semesters.other_details , semesters.semester_id , semesters.semester_name , semesters.* | student_enrolment : student_enrolment.student_id , student_enrolment.other_details , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "addresses.city",
      "addresses.zip_postcode",
      "addresses.address_id",
      "addresses.country",
      "addresses.line_1",
      "addresses.*",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.semester_id",
      "semesters.semester_name",
      "semesters.*",
      "student_enrolment.student_id",
      "student_enrolment.other_details",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.semester_id",
      "student_enrolment.*",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "What is the zip code for Port Chelsea? | addresses : addresses.zip_postcode , addresses.city ( Port Chelsea ) , addresses.country , addresses.address_id , addresses.line_1 , addresses.* | semesters : semesters.semester_name , semesters.semester_description , semesters.other_details , semesters.semester_id , semesters.* | student_enrolment : student_enrolment.student_id , student_enrolment.other_details , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "addresses.zip_postcode",
      "addresses.city",
      "addresses.country",
      "addresses.address_id",
      "addresses.line_1",
      "addresses.*",
      "semesters.semester_name",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.semester_id",
      "semesters.*",
      "student_enrolment.student_id",
      "student_enrolment.other_details",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.semester_id",
      "student_enrolment.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "Which department offers the most number of degrees? List department name and id. | departments : departments.department_name , departments.department_id , departments.department_description , departments.other_details , departments.* | degree_programs : degree_programs.department_id , degree_programs.degree_program_id , degree_programs.degree_summary_description , degree_programs.degree_summary_name , degree_programs.other_details , degree_programs.* | student_enrolment : student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details , student_enrolment.student_enrolment_id , student_enrolment.* | semesters : semesters.semester_name , semesters.semester_description , semesters.other_details , semesters.semester_id , semesters.*",
    "output_sequence": " | ",
    "tc_original": [
      "departments.department_name",
      "departments.department_id",
      "departments.department_description",
      "departments.other_details",
      "departments.*",
      "degree_programs.department_id",
      "degree_programs.degree_program_id",
      "degree_programs.degree_summary_description",
      "degree_programs.degree_summary_name",
      "degree_programs.other_details",
      "degree_programs.*",
      "student_enrolment.degree_program_id",
      "student_enrolment.semester_id",
      "student_enrolment.student_id",
      "student_enrolment.other_details",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.*",
      "semesters.semester_name",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.semester_id",
      "semesters.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "What is the name and id of the department with the most number of degrees ? | departments : departments.department_name , departments.department_id , departments.department_description , departments.other_details , departments.* | degree_programs : degree_programs.department_id , degree_programs.degree_program_id , degree_programs.degree_summary_description , degree_programs.degree_summary_name , degree_programs.other_details , degree_programs.* | student_enrolment : student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details , student_enrolment.student_enrolment_id , student_enrolment.* | semesters : semesters.semester_description , semesters.other_details , semesters.semester_id , semesters.semester_name , semesters.*",
    "output_sequence": " | ",
    "tc_original": [
      "departments.department_name",
      "departments.department_id",
      "departments.department_description",
      "departments.other_details",
      "departments.*",
      "degree_programs.department_id",
      "degree_programs.degree_program_id",
      "degree_programs.degree_summary_description",
      "degree_programs.degree_summary_name",
      "degree_programs.other_details",
      "degree_programs.*",
      "student_enrolment.degree_program_id",
      "student_enrolment.semester_id",
      "student_enrolment.student_id",
      "student_enrolment.other_details",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.*",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.semester_id",
      "semesters.semester_name",
      "semesters.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "How many departments offer any degree? | degree_programs : degree_programs.department_id , degree_programs.degree_program_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | departments : departments.department_name , departments.department_id , departments.department_description , departments.other_details , departments.* | student_enrolment : student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details , student_enrolment.student_enrolment_id , student_enrolment.* | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details , semesters.*",
    "output_sequence": " | ",
    "tc_original": [
      "degree_programs.department_id",
      "degree_programs.degree_program_id",
      "degree_programs.degree_summary_name",
      "degree_programs.degree_summary_description",
      "degree_programs.other_details",
      "degree_programs.*",
      "departments.department_name",
      "departments.department_id",
      "departments.department_description",
      "departments.other_details",
      "departments.*",
      "student_enrolment.degree_program_id",
      "student_enrolment.semester_id",
      "student_enrolment.student_id",
      "student_enrolment.other_details",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.*",
      "semesters.semester_id",
      "semesters.semester_name",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "How many different departments offer degrees? | degree_programs : degree_programs.department_id , degree_programs.degree_program_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | departments : departments.department_name , departments.department_id , departments.department_description , departments.other_details , departments.* | student_enrolment : student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details , student_enrolment.student_enrolment_id , student_enrolment.* | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details , semesters.*",
    "output_sequence": " | ",
    "tc_original": [
      "degree_programs.department_id",
      "degree_programs.degree_program_id",
      "degree_programs.degree_summary_name",
      "degree_programs.degree_summary_description",
      "degree_programs.other_details",
      "degree_programs.*",
      "departments.department_name",
      "departments.department_id",
      "departments.department_description",
      "departments.other_details",
      "departments.*",
      "student_enrolment.degree_program_id",
      "student_enrolment.semester_id",
      "student_enrolment.student_id",
      "student_enrolment.other_details",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.*",
      "semesters.semester_id",
      "semesters.semester_name",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "How many different degree names are offered? | degree_programs : degree_programs.degree_summary_name , degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.* | student_enrolment : student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details , student_enrolment.student_enrolment_id , student_enrolment.* | sections : sections.section_name , sections.course_id , sections.section_id , sections.section_description , sections.other_details , sections.*",
    "output_sequence": " | ",
    "tc_original": [
      "degree_programs.degree_summary_name",
      "degree_programs.degree_program_id",
      "degree_programs.department_id",
      "degree_programs.degree_summary_description",
      "degree_programs.other_details",
      "degree_programs.*",
      "courses.course_name",
      "courses.course_id",
      "courses.course_description",
      "courses.other_details",
      "courses.*",
      "student_enrolment.degree_program_id",
      "student_enrolment.semester_id",
      "student_enrolment.student_id",
      "student_enrolment.other_details",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.*",
      "sections.section_name",
      "sections.course_id",
      "sections.section_id",
      "sections.section_description",
      "sections.other_details",
      "sections.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "How many different degrees are offered? | degree_programs : degree_programs.degree_summary_name , degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | student_enrolment : student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details , student_enrolment.student_enrolment_id , student_enrolment.* | courses : courses.course_name , courses.course_description , courses.course_id , courses.other_details , courses.* | sections : sections.course_id , sections.section_name , sections.section_id , sections.section_description , sections.other_details , sections.*",
    "output_sequence": " | ",
    "tc_original": [
      "degree_programs.degree_summary_name",
      "degree_programs.degree_program_id",
      "degree_programs.department_id",
      "degree_programs.degree_summary_description",
      "degree_programs.other_details",
      "degree_programs.*",
      "student_enrolment.degree_program_id",
      "student_enrolment.semester_id",
      "student_enrolment.student_id",
      "student_enrolment.other_details",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.*",
      "courses.course_name",
      "courses.course_description",
      "courses.course_id",
      "courses.other_details",
      "courses.*",
      "sections.course_id",
      "sections.section_name",
      "sections.section_id",
      "sections.section_description",
      "sections.other_details",
      "sections.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "How many degrees does the engineering department offer? | departments : departments.department_name , departments.department_id , departments.department_description , departments.other_details , departments.* | degree_programs : degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_program_id , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | student_enrolment : student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details , student_enrolment.student_enrolment_id , student_enrolment.* | semesters : semesters.semester_name , semesters.semester_description , semesters.other_details , semesters.semester_id , semesters.*",
    "output_sequence": " | ",
    "tc_original": [
      "departments.department_name",
      "departments.department_id",
      "departments.department_description",
      "departments.other_details",
      "departments.*",
      "degree_programs.department_id",
      "degree_programs.degree_summary_name",
      "degree_programs.degree_program_id",
      "degree_programs.degree_summary_description",
      "degree_programs.other_details",
      "degree_programs.*",
      "student_enrolment.degree_program_id",
      "student_enrolment.semester_id",
      "student_enrolment.student_id",
      "student_enrolment.other_details",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.*",
      "semesters.semester_name",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.semester_id",
      "semesters.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "How many degrees does the engineering department have? | departments : departments.department_name , departments.department_id , departments.department_description , departments.other_details , departments.* | degree_programs : degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_program_id , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | student_enrolment : student_enrolment.student_id , student_enrolment.other_details , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.* | semesters : semesters.semester_name , semesters.semester_description , semesters.other_details , semesters.semester_id , semesters.*",
    "output_sequence": " | ",
    "tc_original": [
      "departments.department_name",
      "departments.department_id",
      "departments.department_description",
      "departments.other_details",
      "departments.*",
      "degree_programs.department_id",
      "degree_programs.degree_summary_name",
      "degree_programs.degree_program_id",
      "degree_programs.degree_summary_description",
      "degree_programs.other_details",
      "degree_programs.*",
      "student_enrolment.student_id",
      "student_enrolment.other_details",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.semester_id",
      "student_enrolment.*",
      "semesters.semester_name",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.semester_id",
      "semesters.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "What are the names and descriptions of all the sections? | sections : sections.section_name , sections.section_description , sections.other_details , sections.section_id , sections.course_id , sections.* | semesters : semesters.semester_description , semesters.other_details , semesters.semester_id , semesters.semester_name , semesters.* | addresses : addresses.city , addresses.country , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.* | student_enrolment : student_enrolment.student_id , student_enrolment.other_details , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.*",
    "output_sequence": " | ",
    "tc_original": [
      "sections.section_name",
      "sections.section_description",
      "sections.other_details",
      "sections.section_id",
      "sections.course_id",
      "sections.*",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.semester_id",
      "semesters.semester_name",
      "semesters.*",
      "addresses.city",
      "addresses.country",
      "addresses.line_1",
      "addresses.line_2",
      "addresses.line_3",
      "addresses.*",
      "student_enrolment.student_id",
      "student_enrolment.other_details",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.semester_id",
      "student_enrolment.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "What are the names and descriptions for all the sections? | sections : sections.section_name , sections.section_description , sections.other_details , sections.section_id , sections.course_id , sections.* | semesters : semesters.semester_description , semesters.other_details , semesters.semester_id , semesters.semester_name , semesters.* | addresses : addresses.city , addresses.country , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.* | student_enrolment : student_enrolment.student_id , student_enrolment.other_details , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.*",
    "output_sequence": " | ",
    "tc_original": [
      "sections.section_name",
      "sections.section_description",
      "sections.other_details",
      "sections.section_id",
      "sections.course_id",
      "sections.*",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.semester_id",
      "semesters.semester_name",
      "semesters.*",
      "addresses.city",
      "addresses.country",
      "addresses.line_1",
      "addresses.line_2",
      "addresses.line_3",
      "addresses.*",
      "student_enrolment.student_id",
      "student_enrolment.other_details",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.semester_id",
      "student_enrolment.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "What are the names and id of courses having at most 2 sections? | sections : sections.course_id , sections.section_id , sections.section_name , sections.section_description , sections.other_details , sections.* | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.* | semesters : semesters.semester_name , semesters.semester_description , semesters.other_details , semesters.semester_id , semesters.*",
    "output_sequence": " | ",
    "tc_original": [
      "sections.course_id",
      "sections.section_id",
      "sections.section_name",
      "sections.section_description",
      "sections.other_details",
      "sections.*",
      "courses.course_name",
      "courses.course_id",
      "courses.course_description",
      "courses.other_details",
      "courses.*",
      "addresses.city",
      "addresses.country",
      "addresses.address_id",
      "addresses.line_1",
      "addresses.line_2",
      "addresses.*",
      "semesters.semester_name",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.semester_id",
      "semesters.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "What are the names and ids of every course with less than 2 sections? | sections : sections.course_id , sections.section_id , sections.section_name , sections.section_description , sections.other_details , sections.* | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.* | semesters : semesters.semester_name , semesters.semester_description , semesters.other_details , semesters.semester_id , semesters.*",
    "output_sequence": " | ",
    "tc_original": [
      "sections.course_id",
      "sections.section_id",
      "sections.section_name",
      "sections.section_description",
      "sections.other_details",
      "sections.*",
      "courses.course_name",
      "courses.course_id",
      "courses.course_description",
      "courses.other_details",
      "courses.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.*",
      "semesters.semester_name",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.semester_id",
      "semesters.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "List the section_name in reversed lexicographical order. | sections : sections.section_name , sections.section_description , sections.section_id , sections.other_details , sections.course_id , sections.* | semesters : semesters.semester_description , semesters.semester_id , semesters.semester_name , semesters.other_details , semesters.* | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details , student_enrolment.* | addresses : addresses.city , addresses.country , addresses.line_2 , addresses.line_3 , addresses.address_id , addresses.*",
    "output_sequence": " | ",
    "tc_original": [
      "sections.section_name",
      "sections.section_description",
      "sections.section_id",
      "sections.other_details",
      "sections.course_id",
      "sections.*",
      "semesters.semester_description",
      "semesters.semester_id",
      "semesters.semester_name",
      "semesters.other_details",
      "semesters.*",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.semester_id",
      "student_enrolment.student_id",
      "student_enrolment.other_details",
      "student_enrolment.*",
      "addresses.city",
      "addresses.country",
      "addresses.line_2",
      "addresses.line_3",
      "addresses.address_id",
      "addresses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "What are the names of the sections in reverse alphabetical order? | sections : sections.section_name , sections.section_description , sections.section_id , sections.course_id , sections.other_details , sections.* | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details , semesters.* | student_enrolment : student_enrolment.student_id , student_enrolment.other_details , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.* | addresses : addresses.city , addresses.country , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.*",
    "output_sequence": " | ",
    "tc_original": [
      "sections.section_name",
      "sections.section_description",
      "sections.section_id",
      "sections.course_id",
      "sections.other_details",
      "sections.*",
      "semesters.semester_id",
      "semesters.semester_name",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.*",
      "student_enrolment.student_id",
      "student_enrolment.other_details",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.semester_id",
      "student_enrolment.*",
      "addresses.city",
      "addresses.country",
      "addresses.line_1",
      "addresses.line_2",
      "addresses.line_3",
      "addresses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "What is the semester which most student registered in? Show both the name and the id. | student_enrolment : student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.other_details , student_enrolment.degree_program_id , student_enrolment.* | semesters : semesters.semester_name , semesters.semester_id , semesters.semester_description , semesters.other_details , semesters.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | addresses : addresses.city , addresses.country , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.*",
    "output_sequence": " | ",
    "tc_original": [
      "student_enrolment.semester_id",
      "student_enrolment.student_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.other_details",
      "student_enrolment.degree_program_id",
      "student_enrolment.*",
      "semesters.semester_name",
      "semesters.semester_id",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*",
      "addresses.city",
      "addresses.country",
      "addresses.line_1",
      "addresses.line_2",
      "addresses.line_3",
      "addresses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "For each semester, what is the name and id of the one with the most students registered? | semesters : semesters.semester_name , semesters.semester_id , semesters.semester_description , semesters.other_details , semesters.* | student_enrolment : student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.other_details , student_enrolment.degree_program_id , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | students : students.student_id , students.first_name , students.middle_name , students.last_name , students.email_address , students.*",
    "output_sequence": " | ",
    "tc_original": [
      "semesters.semester_name",
      "semesters.semester_id",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.*",
      "student_enrolment.semester_id",
      "student_enrolment.student_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.other_details",
      "student_enrolment.degree_program_id",
      "student_enrolment.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*",
      "students.student_id",
      "students.first_name",
      "students.middle_name",
      "students.last_name",
      "students.email_address",
      "students.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "What is the description of the department whose name has the substring the computer? | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | semesters : semesters.semester_name , semesters.semester_description , semesters.other_details , semesters.semester_id , semesters.* | student_enrolment : student_enrolment.student_id , student_enrolment.other_details , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.* | addresses : addresses.city , addresses.country , addresses.line_2 , addresses.line_3 , addresses.address_id , addresses.*",
    "output_sequence": " | ",
    "tc_original": [
      "departments.department_name",
      "departments.department_description",
      "departments.department_id",
      "departments.other_details",
      "departments.*",
      "semesters.semester_name",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.semester_id",
      "semesters.*",
      "student_enrolment.student_id",
      "student_enrolment.other_details",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.semester_id",
      "student_enrolment.*",
      "addresses.city",
      "addresses.country",
      "addresses.line_2",
      "addresses.line_3",
      "addresses.address_id",
      "addresses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "What is the department description for the one whose name has the word computer? | departments : departments.department_description , departments.department_name , departments.department_id , departments.other_details , departments.* | semesters : semesters.semester_name , semesters.semester_description , semesters.other_details , semesters.semester_id , semesters.* | student_enrolment : student_enrolment.student_id , student_enrolment.other_details , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.* | addresses : addresses.city , addresses.country , addresses.line_2 , addresses.line_3 , addresses.address_id , addresses.*",
    "output_sequence": " | ",
    "tc_original": [
      "departments.department_description",
      "departments.department_name",
      "departments.department_id",
      "departments.other_details",
      "departments.*",
      "semesters.semester_name",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.semester_id",
      "semesters.*",
      "student_enrolment.student_id",
      "student_enrolment.other_details",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.semester_id",
      "student_enrolment.*",
      "addresses.city",
      "addresses.country",
      "addresses.line_2",
      "addresses.line_3",
      "addresses.address_id",
      "addresses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id. | students : students.last_name , students.first_name , students.middle_name , students.student_id , students.email_address , students.* | student_enrolment : student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.other_details , student_enrolment.* | semesters : semesters.semester_name , semesters.semester_id , semesters.semester_description , semesters.other_details , semesters.* | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "students.last_name",
      "students.first_name",
      "students.middle_name",
      "students.student_id",
      "students.email_address",
      "students.*",
      "student_enrolment.degree_program_id",
      "student_enrolment.semester_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.student_id",
      "student_enrolment.other_details",
      "student_enrolment.*",
      "semesters.semester_name",
      "semesters.semester_id",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.*",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester? | students : students.last_name , students.first_name , students.middle_name , students.student_id , students.email_address , students.* | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.degree_program_id , student_enrolment.other_details , student_enrolment.* | semesters : semesters.semester_name , semesters.semester_id , semesters.semester_description , semesters.other_details , semesters.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "students.last_name",
      "students.first_name",
      "students.middle_name",
      "students.student_id",
      "students.email_address",
      "students.*",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.semester_id",
      "student_enrolment.student_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.other_details",
      "student_enrolment.*",
      "semesters.semester_name",
      "semesters.semester_id",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name. | students : students.last_name , students.first_name , students.middle_name , students.student_id , students.email_address , students.* | degree_programs : degree_programs.degree_summary_name ( Bachelor ) , degree_programs.degree_program_id , degree_programs.degree_summary_description , degree_programs.department_id , degree_programs.other_details , degree_programs.* | student_enrolment : student_enrolment.degree_program_id , student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "students.last_name",
      "students.first_name",
      "students.middle_name",
      "students.student_id",
      "students.email_address",
      "students.*",
      "degree_programs.degree_summary_name",
      "degree_programs.degree_program_id",
      "degree_programs.degree_summary_description",
      "degree_programs.department_id",
      "degree_programs.other_details",
      "degree_programs.*",
      "student_enrolment.degree_program_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.student_id",
      "student_enrolment.semester_id",
      "student_enrolment.other_details",
      "student_enrolment.*",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "What are the first, middle, and last names for everybody enrolled in a Bachelors program? | students : students.last_name , students.first_name , students.middle_name , students.student_id , students.email_address , students.* | student_enrolment : student_enrolment.degree_program_id , student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | degree_programs : degree_programs.degree_summary_name , degree_programs.degree_program_id , degree_programs.degree_summary_description , degree_programs.department_id , degree_programs.other_details , degree_programs.* | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "students.last_name",
      "students.first_name",
      "students.middle_name",
      "students.student_id",
      "students.email_address",
      "students.*",
      "student_enrolment.degree_program_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.student_id",
      "student_enrolment.semester_id",
      "student_enrolment.other_details",
      "student_enrolment.*",
      "degree_programs.degree_summary_name",
      "degree_programs.degree_program_id",
      "degree_programs.degree_summary_description",
      "degree_programs.department_id",
      "degree_programs.other_details",
      "degree_programs.*",
      "courses.course_name",
      "courses.course_id",
      "courses.course_description",
      "courses.other_details",
      "courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "Find the kind of program which most number of students are enrolled in? | student_enrolment : student_enrolment.degree_program_id , student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.other_details , student_enrolment.semester_id , student_enrolment.* | degree_programs : degree_programs.degree_summary_name , degree_programs.degree_program_id , degree_programs.other_details , degree_programs.department_id , degree_programs.degree_summary_description , degree_programs.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | semesters : semesters.semester_name , semesters.semester_description , semesters.other_details , semesters.semester_id , semesters.*",
    "output_sequence": " | ",
    "tc_original": [
      "student_enrolment.degree_program_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.student_id",
      "student_enrolment.other_details",
      "student_enrolment.semester_id",
      "student_enrolment.*",
      "degree_programs.degree_summary_name",
      "degree_programs.degree_program_id",
      "degree_programs.other_details",
      "degree_programs.department_id",
      "degree_programs.degree_summary_description",
      "degree_programs.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*",
      "semesters.semester_name",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.semester_id",
      "semesters.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "What is the degree summary name that has the most number of students enrolled? | degree_programs : degree_programs.degree_summary_name , degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | student_enrolment : student_enrolment.degree_program_id , student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | semesters : semesters.semester_name , semesters.other_details , semesters.semester_id , semesters.semester_description , semesters.*",
    "output_sequence": " | ",
    "tc_original": [
      "degree_programs.degree_summary_name",
      "degree_programs.degree_program_id",
      "degree_programs.department_id",
      "degree_programs.degree_summary_description",
      "degree_programs.other_details",
      "degree_programs.*",
      "student_enrolment.degree_program_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.student_id",
      "student_enrolment.semester_id",
      "student_enrolment.other_details",
      "student_enrolment.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*",
      "semesters.semester_name",
      "semesters.other_details",
      "semesters.semester_id",
      "semesters.semester_description",
      "semesters.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "Find the program which most number of students are enrolled in. List both the id and the summary. | student_enrolment : student_enrolment.degree_program_id , student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | degree_programs : degree_programs.degree_program_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.department_id , degree_programs.* | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | semesters : semesters.semester_name , semesters.semester_description , semesters.other_details , semesters.semester_id , semesters.*",
    "output_sequence": " | ",
    "tc_original": [
      "student_enrolment.degree_program_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.student_id",
      "student_enrolment.semester_id",
      "student_enrolment.other_details",
      "student_enrolment.*",
      "degree_programs.degree_program_id",
      "degree_programs.degree_summary_name",
      "degree_programs.degree_summary_description",
      "degree_programs.other_details",
      "degree_programs.department_id",
      "degree_programs.*",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*",
      "semesters.semester_name",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.semester_id",
      "semesters.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "What is the program id and the summary of the degree that has the most students enrolled? | student_enrolment : student_enrolment.degree_program_id , student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | degree_programs : degree_programs.degree_summary_name , degree_programs.degree_program_id , degree_programs.degree_summary_description , degree_programs.department_id , degree_programs.other_details , degree_programs.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | semesters : semesters.other_details , semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.*",
    "output_sequence": " | ",
    "tc_original": [
      "student_enrolment.degree_program_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.student_id",
      "student_enrolment.semester_id",
      "student_enrolment.other_details",
      "student_enrolment.*",
      "degree_programs.degree_summary_name",
      "degree_programs.degree_program_id",
      "degree_programs.degree_summary_description",
      "degree_programs.department_id",
      "degree_programs.other_details",
      "degree_programs.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*",
      "semesters.other_details",
      "semesters.semester_id",
      "semesters.semester_name",
      "semesters.semester_description",
      "semesters.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id. | students : students.last_name , students.first_name , students.middle_name , students.student_id , students.email_address , students.* | student_enrolment : student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | semesters : semesters.semester_name , semesters.semester_description , semesters.other_details , semesters.semester_id , semesters.*",
    "output_sequence": " | ",
    "tc_original": [
      "students.last_name",
      "students.first_name",
      "students.middle_name",
      "students.student_id",
      "students.email_address",
      "students.*",
      "student_enrolment.student_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.semester_id",
      "student_enrolment.other_details",
      "student_enrolment.*",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*",
      "semesters.semester_name",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.semester_id",
      "semesters.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program? | students : students.last_name , students.first_name , students.middle_name , students.student_id , students.email_address , students.* | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | semesters : semesters.semester_name , semesters.semester_description , semesters.other_details , semesters.semester_id , semesters.*",
    "output_sequence": " | ",
    "tc_original": [
      "students.last_name",
      "students.first_name",
      "students.middle_name",
      "students.student_id",
      "students.email_address",
      "students.*",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.student_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.semester_id",
      "student_enrolment.other_details",
      "student_enrolment.*",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*",
      "semesters.semester_name",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.semester_id",
      "semesters.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "Which semesters do not have any student enrolled? List the semester name. | semesters : semesters.semester_name , semesters.semester_id , semesters.semester_description , semesters.other_details , semesters.* | student_enrolment : student_enrolment.semester_id , student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.degree_program_id , student_enrolment.other_details , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | students : students.student_id , students.first_name , students.middle_name , students.last_name , students.email_address , students.*",
    "output_sequence": " | ",
    "tc_original": [
      "semesters.semester_name",
      "semesters.semester_id",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.*",
      "student_enrolment.semester_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.student_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.other_details",
      "student_enrolment.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*",
      "students.student_id",
      "students.first_name",
      "students.middle_name",
      "students.last_name",
      "students.email_address",
      "students.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "What is the name of the semester with no students enrolled? | semesters : semesters.semester_name , semesters.semester_id , semesters.semester_description , semesters.other_details , semesters.* | student_enrolment : student_enrolment.semester_id , student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.other_details , student_enrolment.degree_program_id , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.* | addresses : addresses.city , addresses.country , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.*",
    "output_sequence": " | ",
    "tc_original": [
      "semesters.semester_name",
      "semesters.semester_id",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.*",
      "student_enrolment.semester_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.student_id",
      "student_enrolment.other_details",
      "student_enrolment.degree_program_id",
      "student_enrolment.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.*",
      "addresses.city",
      "addresses.country",
      "addresses.line_1",
      "addresses.line_2",
      "addresses.line_3",
      "addresses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "What are all the course names of the courses which ever have students enrolled in? | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details , student_enrolment.degree_program_id , student_enrolment.* | semesters : semesters.semester_name , semesters.semester_description , semesters.other_details , semesters.semester_id , semesters.*",
    "output_sequence": " | ",
    "tc_original": [
      "courses.course_name",
      "courses.course_id",
      "courses.course_description",
      "courses.other_details",
      "courses.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.semester_id",
      "student_enrolment.student_id",
      "student_enrolment.other_details",
      "student_enrolment.degree_program_id",
      "student_enrolment.*",
      "semesters.semester_name",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.semester_id",
      "semesters.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "What are the names of all courses that have some students enrolled? | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.degree_program_id , student_enrolment.* | semesters : semesters.semester_name , semesters.semester_description , semesters.other_details , semesters.semester_id , semesters.*",
    "output_sequence": " | ",
    "tc_original": [
      "courses.course_name",
      "courses.course_id",
      "courses.course_description",
      "courses.other_details",
      "courses.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.student_id",
      "student_enrolment.semester_id",
      "student_enrolment.other_details",
      "student_enrolment.degree_program_id",
      "student_enrolment.*",
      "semesters.semester_name",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.semester_id",
      "semesters.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "What's the name of the course with most number of enrollments? | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details , student_enrolment.* | sections : sections.course_id , sections.section_id , sections.section_name , sections.section_description , sections.other_details , sections.*",
    "output_sequence": " | ",
    "tc_original": [
      "courses.course_name",
      "courses.course_id",
      "courses.course_description",
      "courses.other_details",
      "courses.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.semester_id",
      "student_enrolment.student_id",
      "student_enrolment.other_details",
      "student_enrolment.*",
      "sections.course_id",
      "sections.section_id",
      "sections.section_name",
      "sections.section_description",
      "sections.other_details",
      "sections.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "What is the name of the course with the most students enrolled? | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | sections : sections.course_id , sections.section_id , sections.section_name , sections.section_description , sections.other_details , sections.*",
    "output_sequence": " | ",
    "tc_original": [
      "courses.course_name",
      "courses.course_id",
      "courses.course_description",
      "courses.other_details",
      "courses.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.student_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.semester_id",
      "student_enrolment.other_details",
      "student_enrolment.*",
      "sections.course_id",
      "sections.section_id",
      "sections.section_name",
      "sections.section_description",
      "sections.other_details",
      "sections.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program. | students : students.last_name , students.current_address_id , students.date_first_registered , students.student_id , students.permanent_address_id , students.* | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.student_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | addresses : addresses.state_province_county , addresses.country , addresses.address_id , addresses.city , addresses.line_1 , addresses.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "students.last_name",
      "students.current_address_id",
      "students.date_first_registered",
      "students.student_id",
      "students.permanent_address_id",
      "students.*",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.student_id",
      "student_enrolment.semester_id",
      "student_enrolment.other_details",
      "student_enrolment.*",
      "addresses.state_province_county",
      "addresses.country",
      "addresses.address_id",
      "addresses.city",
      "addresses.line_1",
      "addresses.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "What are the last name of the students who live in North Carolina but have not registered in any degree programs? | students : students.last_name , students.current_address_id , students.date_first_registered , students.student_id , students.permanent_address_id , students.* | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.student_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | addresses : addresses.state_province_county , addresses.country , addresses.city , addresses.address_id , addresses.zip_postcode , addresses.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "students.last_name",
      "students.current_address_id",
      "students.date_first_registered",
      "students.student_id",
      "students.permanent_address_id",
      "students.*",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.student_id",
      "student_enrolment.semester_id",
      "student_enrolment.other_details",
      "student_enrolment.*",
      "addresses.state_province_county",
      "addresses.country",
      "addresses.city",
      "addresses.address_id",
      "addresses.zip_postcode",
      "addresses.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "Show the date and id of the transcript with at least 2 course results. | transcripts : transcripts.transcript_date , transcripts.transcript_id , transcripts.other_details , transcripts.* | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id , transcript_contents.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.* | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "transcripts.transcript_date",
      "transcripts.transcript_id",
      "transcripts.other_details",
      "transcripts.*",
      "transcript_contents.student_course_id",
      "transcript_contents.transcript_id",
      "transcript_contents.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.*",
      "courses.course_name",
      "courses.course_id",
      "courses.course_description",
      "courses.other_details",
      "courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "What is the date and id of the transcript with at least 2 courses listed? | transcripts : transcripts.transcript_date , transcripts.transcript_id , transcripts.other_details , transcripts.* | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id , transcript_contents.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.* | courses : courses.course_id , courses.course_name , courses.other_details , courses.course_description , courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "transcripts.transcript_date",
      "transcripts.transcript_id",
      "transcripts.other_details",
      "transcripts.*",
      "transcript_contents.student_course_id",
      "transcript_contents.transcript_id",
      "transcript_contents.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.*",
      "courses.course_id",
      "courses.course_name",
      "courses.other_details",
      "courses.course_description",
      "courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "What is the phone number of the man with the first name Timmothy and the last name Ward? | students : students.first_name ( Timmothy ) , students.last_name ( Ward ) , students.cell_mobile_number , students.student_id , students.middle_name , students.* | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details , semesters.* | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details , student_enrolment.* | addresses : addresses.city , addresses.country , addresses.line_2 , addresses.line_3 , addresses.address_id , addresses.*",
    "output_sequence": " | ",
    "tc_original": [
      "students.first_name",
      "students.last_name",
      "students.cell_mobile_number",
      "students.student_id",
      "students.middle_name",
      "students.*",
      "semesters.semester_id",
      "semesters.semester_name",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.*",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.semester_id",
      "student_enrolment.student_id",
      "student_enrolment.other_details",
      "student_enrolment.*",
      "addresses.city",
      "addresses.country",
      "addresses.line_2",
      "addresses.line_3",
      "addresses.address_id",
      "addresses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "What is the mobile phone number of the student named Timmothy Ward ? | students : students.first_name ( Timmothy ) , students.cell_mobile_number , students.last_name ( Ward ) , students.middle_name , students.student_id , students.* | student_enrolment : student_enrolment.student_id , student_enrolment.other_details , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.* | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details , semesters.* | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "students.first_name",
      "students.cell_mobile_number",
      "students.last_name",
      "students.middle_name",
      "students.student_id",
      "students.*",
      "student_enrolment.student_id",
      "student_enrolment.other_details",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.semester_id",
      "student_enrolment.*",
      "semesters.semester_id",
      "semesters.semester_name",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.*",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "Who is the first student to register? List the first name, middle name and last name. | students : students.last_name , students.first_name , students.middle_name , students.date_first_registered , students.student_id , students.* | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.degree_program_id , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details , semesters.*",
    "output_sequence": " | ",
    "tc_original": [
      "students.last_name",
      "students.first_name",
      "students.middle_name",
      "students.date_first_registered",
      "students.student_id",
      "students.*",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.student_id",
      "student_enrolment.semester_id",
      "student_enrolment.other_details",
      "student_enrolment.degree_program_id",
      "student_enrolment.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*",
      "semesters.semester_id",
      "semesters.semester_name",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "What is the first, middle, and last name of the first student to register? | students : students.last_name , students.first_name , students.middle_name , students.date_first_registered , students.student_id , students.* | student_enrolment : student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.other_details , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details , semesters.*",
    "output_sequence": " | ",
    "tc_original": [
      "students.last_name",
      "students.first_name",
      "students.middle_name",
      "students.date_first_registered",
      "students.student_id",
      "students.*",
      "student_enrolment.student_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.other_details",
      "student_enrolment.degree_program_id",
      "student_enrolment.semester_id",
      "student_enrolment.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*",
      "semesters.semester_id",
      "semesters.semester_name",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "Who is the earliest graduate of the school? List the first name, middle name and last name. | students : students.first_name , students.last_name , students.middle_name , students.date_first_registered , students.date_left , students.* | student_enrolment : student_enrolment.degree_program_id , student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.*",
    "output_sequence": " | ",
    "tc_original": [
      "students.first_name",
      "students.last_name",
      "students.middle_name",
      "students.date_first_registered",
      "students.date_left",
      "students.*",
      "student_enrolment.degree_program_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.student_id",
      "student_enrolment.semester_id",
      "student_enrolment.other_details",
      "student_enrolment.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.*",
      "addresses.city",
      "addresses.country",
      "addresses.address_id",
      "addresses.line_1",
      "addresses.line_2",
      "addresses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "What is the first, middle, and last name of the earliest school graduate? | students : students.last_name , students.first_name , students.middle_name , students.date_first_registered , students.student_id , students.* | student_enrolment : student_enrolment.student_id , student_enrolment.other_details , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.* | semesters : semesters.other_details , semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_2 , addresses.line_3 , addresses.*",
    "output_sequence": " | ",
    "tc_original": [
      "students.last_name",
      "students.first_name",
      "students.middle_name",
      "students.date_first_registered",
      "students.student_id",
      "students.*",
      "student_enrolment.student_id",
      "student_enrolment.other_details",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.semester_id",
      "student_enrolment.*",
      "semesters.other_details",
      "semesters.semester_id",
      "semesters.semester_name",
      "semesters.semester_description",
      "semesters.*",
      "addresses.city",
      "addresses.country",
      "addresses.address_id",
      "addresses.line_2",
      "addresses.line_3",
      "addresses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "Whose permanent address is different from his or her current address? List his or her first name. | students : students.first_name , students.permanent_address_id , students.current_address_id , students.student_id , students.last_name , students.* | addresses : addresses.address_id , addresses.other_address_details , addresses.line_2 , addresses.city , addresses.country , addresses.* | student_enrolment : student_enrolment.student_id , student_enrolment.other_details , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.* | semesters : semesters.other_details , semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.*",
    "output_sequence": " | ",
    "tc_original": [
      "students.first_name",
      "students.permanent_address_id",
      "students.current_address_id",
      "students.student_id",
      "students.last_name",
      "students.*",
      "addresses.address_id",
      "addresses.other_address_details",
      "addresses.line_2",
      "addresses.city",
      "addresses.country",
      "addresses.*",
      "student_enrolment.student_id",
      "student_enrolment.other_details",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.semester_id",
      "student_enrolment.*",
      "semesters.other_details",
      "semesters.semester_id",
      "semesters.semester_name",
      "semesters.semester_description",
      "semesters.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "What is the first name of the student whose permanent address is different from his or her current one? | students : students.first_name , students.permanent_address_id , students.current_address_id , students.student_id , students.middle_name , students.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_2 , addresses.line_1 , addresses.* | student_enrolment : student_enrolment.student_id , student_enrolment.other_details , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.* | semesters : semesters.other_details , semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.*",
    "output_sequence": " | ",
    "tc_original": [
      "students.first_name",
      "students.permanent_address_id",
      "students.current_address_id",
      "students.student_id",
      "students.middle_name",
      "students.*",
      "addresses.city",
      "addresses.country",
      "addresses.address_id",
      "addresses.line_2",
      "addresses.line_1",
      "addresses.*",
      "student_enrolment.student_id",
      "student_enrolment.other_details",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.semester_id",
      "student_enrolment.*",
      "semesters.other_details",
      "semesters.semester_id",
      "semesters.semester_name",
      "semesters.semester_description",
      "semesters.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "Which address holds the most number of students currently? List the address id and all lines. | students : students.current_address_id , students.permanent_address_id , students.student_id , students.other_student_details , students.first_name , students.* | addresses : addresses.address_id , addresses.line_2 , addresses.line_1 , addresses.line_3 , addresses.city , addresses.* | student_enrolment : student_enrolment.student_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.* | semesters : semesters.other_details , semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.*",
    "output_sequence": " | ",
    "tc_original": [
      "students.current_address_id",
      "students.permanent_address_id",
      "students.student_id",
      "students.other_student_details",
      "students.first_name",
      "students.*",
      "addresses.address_id",
      "addresses.line_2",
      "addresses.line_1",
      "addresses.line_3",
      "addresses.city",
      "addresses.*",
      "student_enrolment.student_id",
      "student_enrolment.semester_id",
      "student_enrolment.other_details",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.*",
      "semesters.other_details",
      "semesters.semester_id",
      "semesters.semester_name",
      "semesters.semester_description",
      "semesters.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "What is the id, line 1, and line 2 of the address with the most students? | addresses : addresses.line_1 , addresses.line_2 , addresses.address_id , addresses.city , addresses.country , addresses.* | students : students.current_address_id , students.permanent_address_id , students.student_id , students.other_student_details , students.first_name , students.* | student_enrolment : student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.degree_program_id , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "addresses.line_1",
      "addresses.line_2",
      "addresses.address_id",
      "addresses.city",
      "addresses.country",
      "addresses.*",
      "students.current_address_id",
      "students.permanent_address_id",
      "students.student_id",
      "students.other_student_details",
      "students.first_name",
      "students.*",
      "student_enrolment.student_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.semester_id",
      "student_enrolment.other_details",
      "student_enrolment.degree_program_id",
      "student_enrolment.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "On average, when were the transcripts printed? | transcripts : transcripts.transcript_date , transcripts.other_details , transcripts.transcript_id , transcripts.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.* | semesters : semesters.other_details , semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.* | student_enrolment : student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.*",
    "output_sequence": " | ",
    "tc_original": [
      "transcripts.transcript_date",
      "transcripts.other_details",
      "transcripts.transcript_id",
      "transcripts.*",
      "addresses.city",
      "addresses.country",
      "addresses.address_id",
      "addresses.line_1",
      "addresses.line_2",
      "addresses.*",
      "semesters.other_details",
      "semesters.semester_id",
      "semesters.semester_name",
      "semesters.semester_description",
      "semesters.*",
      "student_enrolment.student_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.semester_id",
      "student_enrolment.other_details",
      "student_enrolment.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "What is the average transcript date? | transcripts : transcripts.transcript_date , transcripts.transcript_id , transcripts.other_details , transcripts.* | semesters : semesters.semester_description , semesters.other_details , semesters.semester_id , semesters.semester_name , semesters.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.* | student_enrolment : student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.*",
    "output_sequence": " | ",
    "tc_original": [
      "transcripts.transcript_date",
      "transcripts.transcript_id",
      "transcripts.other_details",
      "transcripts.*",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.semester_id",
      "semesters.semester_name",
      "semesters.*",
      "addresses.city",
      "addresses.country",
      "addresses.address_id",
      "addresses.line_1",
      "addresses.line_2",
      "addresses.*",
      "student_enrolment.student_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.semester_id",
      "student_enrolment.other_details",
      "student_enrolment.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "When is the first transcript released? List the date and details. | transcripts : transcripts.transcript_date , transcripts.other_details , transcripts.transcript_id , transcripts.* | transcript_contents : transcript_contents.transcript_id , transcript_contents.student_course_id , transcript_contents.* | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details , semesters.* | student_enrolment : student_enrolment.other_details , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.*",
    "output_sequence": " | ",
    "tc_original": [
      "transcripts.transcript_date",
      "transcripts.other_details",
      "transcripts.transcript_id",
      "transcripts.*",
      "transcript_contents.transcript_id",
      "transcript_contents.student_course_id",
      "transcript_contents.*",
      "semesters.semester_id",
      "semesters.semester_name",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.*",
      "student_enrolment.other_details",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.semester_id",
      "student_enrolment.student_id",
      "student_enrolment.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "What is the earliest date of a transcript release, and what details can you tell me? | transcripts : transcripts.transcript_date , transcripts.other_details , transcripts.transcript_id , transcripts.* | semesters : semesters.other_details , semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.* | transcript_contents : transcript_contents.transcript_id , transcript_contents.student_course_id , transcript_contents.* | student_enrolment : student_enrolment.student_id , student_enrolment.other_details , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.*",
    "output_sequence": " | ",
    "tc_original": [
      "transcripts.transcript_date",
      "transcripts.other_details",
      "transcripts.transcript_id",
      "transcripts.*",
      "semesters.other_details",
      "semesters.semester_id",
      "semesters.semester_name",
      "semesters.semester_description",
      "semesters.*",
      "transcript_contents.transcript_id",
      "transcript_contents.student_course_id",
      "transcript_contents.*",
      "student_enrolment.student_id",
      "student_enrolment.other_details",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.semester_id",
      "student_enrolment.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "How many transcripts are released? | transcripts : transcripts.transcript_date , transcripts.transcript_id , transcripts.other_details , transcripts.* | transcript_contents : transcript_contents.transcript_id , transcript_contents.student_course_id , transcript_contents.* | semesters : semesters.semester_description , semesters.other_details , semesters.semester_id , semesters.semester_name , semesters.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.*",
    "output_sequence": " | ",
    "tc_original": [
      "transcripts.transcript_date",
      "transcripts.transcript_id",
      "transcripts.other_details",
      "transcripts.*",
      "transcript_contents.transcript_id",
      "transcript_contents.student_course_id",
      "transcript_contents.*",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.semester_id",
      "semesters.semester_name",
      "semesters.*",
      "addresses.city",
      "addresses.country",
      "addresses.address_id",
      "addresses.line_1",
      "addresses.line_2",
      "addresses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "How many transcripts are listed? | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details , transcripts.* | transcript_contents : transcript_contents.transcript_id , transcript_contents.student_course_id , transcript_contents.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.* | semesters : semesters.semester_description , semesters.other_details , semesters.semester_id , semesters.semester_name , semesters.*",
    "output_sequence": " | ",
    "tc_original": [
      "transcripts.transcript_id",
      "transcripts.transcript_date",
      "transcripts.other_details",
      "transcripts.*",
      "transcript_contents.transcript_id",
      "transcript_contents.student_course_id",
      "transcript_contents.*",
      "addresses.city",
      "addresses.country",
      "addresses.address_id",
      "addresses.line_1",
      "addresses.line_2",
      "addresses.*",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.semester_id",
      "semesters.semester_name",
      "semesters.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "What is the last transcript release date? | transcripts : transcripts.transcript_date , transcripts.transcript_id , transcripts.other_details , transcripts.* | semesters : semesters.other_details , semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.* | transcript_contents : transcript_contents.transcript_id , transcript_contents.student_course_id , transcript_contents.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.*",
    "output_sequence": " | ",
    "tc_original": [
      "transcripts.transcript_date",
      "transcripts.transcript_id",
      "transcripts.other_details",
      "transcripts.*",
      "semesters.other_details",
      "semesters.semester_id",
      "semesters.semester_name",
      "semesters.semester_description",
      "semesters.*",
      "transcript_contents.transcript_id",
      "transcript_contents.student_course_id",
      "transcript_contents.*",
      "addresses.city",
      "addresses.country",
      "addresses.address_id",
      "addresses.line_1",
      "addresses.line_2",
      "addresses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "When was the last transcript released? | transcripts : transcripts.transcript_date , transcripts.transcript_id , transcripts.other_details , transcripts.* | transcript_contents : transcript_contents.transcript_id , transcript_contents.student_course_id , transcript_contents.* | semesters : semesters.semester_description , semesters.other_details , semesters.semester_id , semesters.semester_name , semesters.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.*",
    "output_sequence": " | ",
    "tc_original": [
      "transcripts.transcript_date",
      "transcripts.transcript_id",
      "transcripts.other_details",
      "transcripts.*",
      "transcript_contents.transcript_id",
      "transcript_contents.student_course_id",
      "transcript_contents.*",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.semester_id",
      "semesters.semester_name",
      "semesters.*",
      "addresses.city",
      "addresses.country",
      "addresses.address_id",
      "addresses.line_1",
      "addresses.line_2",
      "addresses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id. | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details , transcripts.* | transcript_contents : transcript_contents.transcript_id , transcript_contents.student_course_id , transcript_contents.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*",
      "transcripts.transcript_id",
      "transcripts.transcript_date",
      "transcripts.other_details",
      "transcripts.*",
      "transcript_contents.transcript_id",
      "transcript_contents.student_course_id",
      "transcript_contents.*",
      "courses.course_id",
      "courses.course_name",
      "courses.course_description",
      "courses.other_details",
      "courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id? | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | transcript_contents : transcript_contents.transcript_id , transcript_contents.student_course_id , transcript_contents.* | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details , transcripts.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*",
      "transcript_contents.transcript_id",
      "transcript_contents.student_course_id",
      "transcript_contents.*",
      "transcripts.transcript_id",
      "transcripts.transcript_date",
      "transcripts.other_details",
      "transcripts.*",
      "courses.course_id",
      "courses.course_name",
      "courses.course_description",
      "courses.other_details",
      "courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "Show the date of the transcript which shows the least number of results, also list the id. | transcripts : transcripts.transcript_date , transcripts.transcript_id , transcripts.other_details , transcripts.* | transcript_contents : transcript_contents.transcript_id , transcript_contents.student_course_id , transcript_contents.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.* | student_enrolment : student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.*",
    "output_sequence": " | ",
    "tc_original": [
      "transcripts.transcript_date",
      "transcripts.transcript_id",
      "transcripts.other_details",
      "transcripts.*",
      "transcript_contents.transcript_id",
      "transcript_contents.student_course_id",
      "transcript_contents.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.*",
      "student_enrolment.semester_id",
      "student_enrolment.student_id",
      "student_enrolment.other_details",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "What is the date and id of the transcript with the least number of results? | transcripts : transcripts.transcript_date , transcripts.transcript_id , transcripts.other_details , transcripts.* | transcript_contents : transcript_contents.transcript_id , transcript_contents.student_course_id , transcript_contents.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.* | student_enrolment : student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.*",
    "output_sequence": " | ",
    "tc_original": [
      "transcripts.transcript_date",
      "transcripts.transcript_id",
      "transcripts.other_details",
      "transcripts.*",
      "transcript_contents.transcript_id",
      "transcript_contents.student_course_id",
      "transcript_contents.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.*",
      "student_enrolment.semester_id",
      "student_enrolment.student_id",
      "student_enrolment.other_details",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "Find the semester when both Master students and Bachelor students got enrolled in. | degree_programs : degree_programs.degree_summary_name ( Bachelor , Master ) , degree_programs.degree_program_id , degree_programs.department_id , degree_programs.other_details , degree_programs.degree_summary_description , degree_programs.* | student_enrolment : student_enrolment.semester_id , student_enrolment.degree_program_id , student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.other_details , student_enrolment.* | semesters : semesters.semester_name , semesters.semester_id , semesters.semester_description , semesters.other_details , semesters.* | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "degree_programs.degree_summary_name",
      "degree_programs.degree_program_id",
      "degree_programs.department_id",
      "degree_programs.other_details",
      "degree_programs.degree_summary_description",
      "degree_programs.*",
      "student_enrolment.semester_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.student_id",
      "student_enrolment.other_details",
      "student_enrolment.*",
      "semesters.semester_name",
      "semesters.semester_id",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.*",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "What is the id of the semester that had both Masters and Bachelors students enrolled? | student_enrolment : student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.degree_program_id , student_enrolment.student_enrolment_id , student_enrolment.other_details , student_enrolment.* | semesters : semesters.semester_name , semesters.semester_id , semesters.semester_description , semesters.other_details , semesters.* | degree_programs : degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.degree_program_id , degree_programs.department_id , degree_programs.other_details , degree_programs.* | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "student_enrolment.semester_id",
      "student_enrolment.student_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.other_details",
      "student_enrolment.*",
      "semesters.semester_name",
      "semesters.semester_id",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.*",
      "degree_programs.degree_summary_name",
      "degree_programs.degree_summary_description",
      "degree_programs.degree_program_id",
      "degree_programs.department_id",
      "degree_programs.other_details",
      "degree_programs.*",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "How many different addresses do the students currently live? | students : students.current_address_id , students.permanent_address_id , students.student_id , students.first_name , students.middle_name , students.* | addresses : addresses.address_id , addresses.city , addresses.country , addresses.other_address_details , addresses.line_1 , addresses.* | student_enrolment : student_enrolment.student_id , student_enrolment.other_details , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.* | semesters : semesters.semester_description , semesters.other_details , semesters.semester_id , semesters.semester_name , semesters.*",
    "output_sequence": " | ",
    "tc_original": [
      "students.current_address_id",
      "students.permanent_address_id",
      "students.student_id",
      "students.first_name",
      "students.middle_name",
      "students.*",
      "addresses.address_id",
      "addresses.city",
      "addresses.country",
      "addresses.other_address_details",
      "addresses.line_1",
      "addresses.*",
      "student_enrolment.student_id",
      "student_enrolment.other_details",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.semester_id",
      "student_enrolment.*",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.semester_id",
      "semesters.semester_name",
      "semesters.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "What are the different addresses that have students living there? | students : students.current_address_id , students.permanent_address_id , students.student_id , students.last_name , students.email_address , students.* | addresses : addresses.address_id , addresses.line_1 , addresses.city , addresses.country , addresses.other_address_details , addresses.* | student_enrolment : student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.* | semesters : semesters.semester_description , semesters.other_details , semesters.semester_id , semesters.semester_name , semesters.*",
    "output_sequence": " | ",
    "tc_original": [
      "students.current_address_id",
      "students.permanent_address_id",
      "students.student_id",
      "students.last_name",
      "students.email_address",
      "students.*",
      "addresses.address_id",
      "addresses.line_1",
      "addresses.city",
      "addresses.country",
      "addresses.other_address_details",
      "addresses.*",
      "student_enrolment.semester_id",
      "student_enrolment.student_id",
      "student_enrolment.other_details",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.*",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.semester_id",
      "semesters.semester_name",
      "semesters.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "List all the student details in reversed lexicographical order. | students : students.other_student_details , students.student_id , students.first_name , students.middle_name , students.last_name , students.* | student_enrolment : student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.* | semesters : semesters.semester_name , semesters.semester_description , semesters.other_details , semesters.semester_id , semesters.* | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "students.other_student_details",
      "students.student_id",
      "students.first_name",
      "students.middle_name",
      "students.last_name",
      "students.*",
      "student_enrolment.semester_id",
      "student_enrolment.student_id",
      "student_enrolment.other_details",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.*",
      "semesters.semester_name",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.semester_id",
      "semesters.*",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "What other details can you tell me about students in reverse alphabetical order? | students : students.other_student_details , students.first_name , students.last_name , students.student_id , students.middle_name , students.* | student_enrolment : student_enrolment.other_details , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.* | addresses : addresses.city , addresses.country , addresses.other_address_details , addresses.address_id , addresses.line_1 , addresses.* | semesters : semesters.semester_name , semesters.semester_description , semesters.other_details , semesters.semester_id , semesters.*",
    "output_sequence": " | ",
    "tc_original": [
      "students.other_student_details",
      "students.first_name",
      "students.last_name",
      "students.student_id",
      "students.middle_name",
      "students.*",
      "student_enrolment.other_details",
      "student_enrolment.semester_id",
      "student_enrolment.student_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.*",
      "addresses.city",
      "addresses.country",
      "addresses.other_address_details",
      "addresses.address_id",
      "addresses.line_1",
      "addresses.*",
      "semesters.semester_name",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.semester_id",
      "semesters.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "Describe the section h. | sections : sections.section_description , sections.section_name , sections.section_id , sections.other_details , sections.course_id , sections.* | semesters : semesters.semester_description , semesters.other_details , semesters.semester_id , semesters.semester_name , semesters.* | student_enrolment : student_enrolment.student_id , student_enrolment.other_details , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.*",
    "output_sequence": " | ",
    "tc_original": [
      "sections.section_description",
      "sections.section_name",
      "sections.section_id",
      "sections.other_details",
      "sections.course_id",
      "sections.*",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.semester_id",
      "semesters.semester_name",
      "semesters.*",
      "student_enrolment.student_id",
      "student_enrolment.other_details",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.semester_id",
      "student_enrolment.*",
      "addresses.city",
      "addresses.country",
      "addresses.address_id",
      "addresses.line_1",
      "addresses.line_2",
      "addresses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "What is the description for the section named h? | sections : sections.section_name , sections.section_description , sections.other_details , sections.section_id , sections.course_id , sections.* | semesters : semesters.semester_description , semesters.other_details , semesters.semester_id , semesters.semester_name , semesters.* | student_enrolment : student_enrolment.student_id , student_enrolment.other_details , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.* | addresses : addresses.city , addresses.country , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.*",
    "output_sequence": " | ",
    "tc_original": [
      "sections.section_name",
      "sections.section_description",
      "sections.other_details",
      "sections.section_id",
      "sections.course_id",
      "sections.*",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.semester_id",
      "semesters.semester_name",
      "semesters.*",
      "student_enrolment.student_id",
      "student_enrolment.other_details",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.semester_id",
      "student_enrolment.*",
      "addresses.city",
      "addresses.country",
      "addresses.line_1",
      "addresses.line_2",
      "addresses.line_3",
      "addresses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 . | students : students.first_name , students.cell_mobile_number , students.permanent_address_id , students.student_id , students.current_address_id , students.* | addresses : addresses.country ( Haiti ) , addresses.city , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.* | student_enrolment : student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "students.first_name",
      "students.cell_mobile_number",
      "students.permanent_address_id",
      "students.student_id",
      "students.current_address_id",
      "students.*",
      "addresses.country",
      "addresses.city",
      "addresses.address_id",
      "addresses.line_1",
      "addresses.line_2",
      "addresses.*",
      "student_enrolment.student_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.semester_id",
      "student_enrolment.other_details",
      "student_enrolment.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ? | students : students.first_name , students.cell_mobile_number , students.permanent_address_id , students.student_id , students.last_name , students.* | addresses : addresses.country ( Haiti ) , addresses.city , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.* | student_enrolment : student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details , semesters.*",
    "output_sequence": " | ",
    "tc_original": [
      "students.first_name",
      "students.cell_mobile_number",
      "students.permanent_address_id",
      "students.student_id",
      "students.last_name",
      "students.*",
      "addresses.country",
      "addresses.city",
      "addresses.address_id",
      "addresses.line_1",
      "addresses.line_2",
      "addresses.*",
      "student_enrolment.student_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.semester_id",
      "student_enrolment.other_details",
      "student_enrolment.*",
      "semesters.semester_id",
      "semesters.semester_name",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "List the title of all cartoons in alphabetical order. | cartoon : cartoon.title , cartoon.id , cartoon.channel , cartoon.production_code , cartoon.directed_by , cartoon.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.title",
      "cartoon.id",
      "cartoon.channel",
      "cartoon.production_code",
      "cartoon.directed_by",
      "cartoon.*",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "What are the titles of the cartoons sorted alphabetically? | cartoon : cartoon.title , cartoon.id , cartoon.channel , cartoon.production_code , cartoon.directed_by , cartoon.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.title",
      "cartoon.id",
      "cartoon.channel",
      "cartoon.production_code",
      "cartoon.directed_by",
      "cartoon.*",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "List all cartoon directed by \"Ben Jones\". | cartoon : cartoon.directed_by ( Ben Jones ) , cartoon.title , cartoon.id , cartoon.channel , cartoon.written_by , cartoon.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.directed_by",
      "cartoon.title",
      "cartoon.id",
      "cartoon.channel",
      "cartoon.written_by",
      "cartoon.*",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "What are the names of all cartoons directed by Ben Jones? | cartoon : cartoon.directed_by ( Ben Jones ) , cartoon.title , cartoon.id , cartoon.channel , cartoon.written_by , cartoon.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.directed_by",
      "cartoon.title",
      "cartoon.id",
      "cartoon.channel",
      "cartoon.written_by",
      "cartoon.*",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "How many cartoons were written by \"Joseph Kuhr\"? | cartoon : cartoon.written_by ( Joseph Kuhr ) , cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.written_by",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.directed_by",
      "cartoon.*",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "What is the number of cartoones written by Joseph Kuhr? | cartoon : cartoon.written_by ( Joseph Kuhr ) , cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.written_by",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.directed_by",
      "cartoon.*",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "list all cartoon titles and their directors ordered by their air date | cartoon : cartoon.original_air_date , cartoon.directed_by , cartoon.title , cartoon.id , cartoon.channel , cartoon.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.original_air_date",
      "cartoon.directed_by",
      "cartoon.title",
      "cartoon.id",
      "cartoon.channel",
      "cartoon.*",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "What is the name and directors of all the cartoons that are ordered by air date? | cartoon : cartoon.title , cartoon.directed_by , cartoon.original_air_date , cartoon.id , cartoon.written_by , cartoon.* | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.title",
      "cartoon.directed_by",
      "cartoon.original_air_date",
      "cartoon.id",
      "cartoon.written_by",
      "cartoon.*",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.air_date",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.*",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\". | cartoon : cartoon.directed_by ( Ben Jones , Brandon Vietti ) , cartoon.title , cartoon.id , cartoon.channel , cartoon.written_by , cartoon.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.directed_by",
      "cartoon.title",
      "cartoon.id",
      "cartoon.channel",
      "cartoon.written_by",
      "cartoon.*",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti? | cartoon : cartoon.directed_by ( Ben Jones , Brandon Vietti ) , cartoon.title , cartoon.id , cartoon.channel , cartoon.written_by , cartoon.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.directed_by",
      "cartoon.title",
      "cartoon.id",
      "cartoon.channel",
      "cartoon.written_by",
      "cartoon.*",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "Which country has the most of TV Channels? List the country and number of TV Channels it has. | tv_channel : tv_channel.country , tv_channel.id , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.country",
      "tv_channel.id",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "What is the country with the most number of TV Channels and how many does it have? | tv_channel : tv_channel.country , tv_channel.id , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.country",
      "tv_channel.id",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "List the number of different series names and contents in the TV Channel table. | tv_channel : tv_channel.series_name , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.series_name",
      "tv_channel.content",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.*",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "How many different series and contents are listed in the TV Channel table? | tv_channel : tv_channel.content , tv_channel.series_name , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.*",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "What is the content of TV Channel with serial name \"Sky Radio\"? | tv_channel : tv_channel.series_name ( Sky Radio ) , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.series_name",
      "tv_channel.content",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.*",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "What is the content of the series Sky Radio? | tv_channel : tv_channel.content , tv_channel.series_name ( Sky Radio ) , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.*",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "What is the Package Option of TV Channel with serial name \"Sky Radio\"? | tv_channel : tv_channel.package_option ( Option ) , tv_channel.series_name ( Sky Radio ) , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.package_option",
      "tv_channel.series_name",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.*",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "What are the Package Options of the TV Channels whose series names are Sky Radio? | tv_channel : tv_channel.series_name ( Sky Radio ) , tv_channel.package_option ( Option ) , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.series_name",
      "tv_channel.package_option",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.*",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "How many TV Channel using language English? | tv_channel : tv_channel.language ( English ) , tv_channel.id , tv_channel.country , tv_channel.content , tv_channel.series_name , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.language",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "How many TV Channels use the English language? | tv_channel : tv_channel.language ( English ) , tv_channel.id , tv_channel.country , tv_channel.content , tv_channel.series_name , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.language",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "List the language used least number of TV Channel. List language and number of TV Channel. | tv_channel : tv_channel.language , tv_channel.id , tv_channel.country , tv_channel.content , tv_channel.series_name , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.language",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "What are the languages used by the least number of TV Channels and how many channels use it? | tv_channel : tv_channel.language , tv_channel.id , tv_channel.country , tv_channel.content , tv_channel.series_name , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.language",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "List each language and the number of TV Channels using it. | tv_channel : tv_channel.language , tv_channel.id , tv_channel.country , tv_channel.content , tv_channel.series_name , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.language",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "For each language, list the number of TV Channels that use it. | tv_channel : tv_channel.language , tv_channel.id , tv_channel.country , tv_channel.content , tv_channel.series_name , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.language",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name. | tv_channel : tv_channel.series_name , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | cartoon : cartoon.title ( The Rise of the Blue Beetle! ) , cartoon.channel , cartoon.id , cartoon.directed_by , cartoon.written_by , cartoon.* | tv_series : tv_series.channel , tv_series.rating , tv_series.id , tv_series.episode , tv_series.share , tv_series.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.series_name",
      "tv_channel.content",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.*",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.id",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*",
      "tv_series.channel",
      "tv_series.rating",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.share",
      "tv_series.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"? | tv_channel : tv_channel.series_name , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.* | cartoon : cartoon.title ( The Rise of the Blue Beetle! ) , cartoon.channel , cartoon.id , cartoon.directed_by , cartoon.written_by , cartoon.* | tv_series : tv_series.channel , tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.series_name",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.*",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.id",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*",
      "tv_series.channel",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\". | tv_channel : tv_channel.series_name ( Sky Radio ) , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | cartoon : cartoon.title , cartoon.channel , cartoon.id , cartoon.production_code , cartoon.directed_by , cartoon.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.series_name",
      "tv_channel.content",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.*",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.id",
      "cartoon.production_code",
      "cartoon.directed_by",
      "cartoon.*",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"? | tv_channel : tv_channel.series_name ( Sky Radio ) , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | cartoon : cartoon.title , cartoon.channel , cartoon.id , cartoon.directed_by , cartoon.written_by , cartoon.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.series_name",
      "tv_channel.content",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.*",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.id",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "List the Episode of all TV series sorted by rating. | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.id",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "What are all of the episodes ordered by ratings? | tv_series : tv_series.rating , tv_series.episode , tv_series.id , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_series.rating",
      "tv_series.episode",
      "tv_series.id",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating. | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.id",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "What are 3 most highly rated episodes in the TV series table and what were those ratings? | tv_series : tv_series.rating , tv_series.episode , tv_series.share , tv_series.id , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_series.rating",
      "tv_series.episode",
      "tv_series.share",
      "tv_series.id",
      "tv_series.channel",
      "tv_series.*",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "What is minimum and maximum share of TV series? | tv_series : tv_series.share , tv_series.id , tv_series.episode , tv_series.rating , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_series.share",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.channel",
      "tv_series.*",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "What is the maximum and minimum share for the TV series? | tv_series : tv_series.share , tv_series.rating , tv_series.18_49_rating_share , tv_series.id , tv_series.episode , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_series.share",
      "tv_series.rating",
      "tv_series.18_49_rating_share",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.*",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "What is the air date of TV series with Episode \"A Love of a Lifetime\"? | tv_series : tv_series.episode ( A Love of a Lifetime ) , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.id , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_series.episode",
      "tv_series.air_date",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.id",
      "tv_series.*",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "When did the episode \"A Love of a Lifetime\" air? | tv_series : tv_series.episode ( A Love of a Lifetime ) , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.id , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_series.episode",
      "tv_series.air_date",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.id",
      "tv_series.*",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"? | tv_series : tv_series.episode ( A Love of a Lifetime ) , tv_series.weekly_rank , tv_series.rating , tv_series.share , tv_series.id , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_series.episode",
      "tv_series.weekly_rank",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.id",
      "tv_series.*",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "What is the weekly rank for the episode \"A Love of a Lifetime\"? | tv_series : tv_series.episode ( A Love of a Lifetime ) , tv_series.weekly_rank , tv_series.rating , tv_series.share , tv_series.id , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_series.episode",
      "tv_series.weekly_rank",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.id",
      "tv_series.*",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name. | tv_channel : tv_channel.series_name , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.* | tv_series : tv_series.episode ( A Love of a Lifetime ) , tv_series.channel , tv_series.rating , tv_series.share , tv_series.id , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.series_name",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.*",
      "tv_series.episode",
      "tv_series.channel",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.id",
      "tv_series.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "What is the name of the series that has the episode \"A Love of a Lifetime\"? | tv_series : tv_series.episode ( A Love of a Lifetime ) , tv_series.rating , tv_series.id , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.series_name , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.id",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*",
      "tv_channel.series_name",
      "tv_channel.content",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\". | tv_channel : tv_channel.series_name ( Sky Radio ) , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | tv_series : tv_series.episode , tv_series.id , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.series_name",
      "tv_channel.content",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.*",
      "tv_series.episode",
      "tv_series.id",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "What is the episode for the TV series named \"Sky Radio\"? | tv_channel : tv_channel.series_name ( Sky Radio ) , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.* | tv_series : tv_series.episode , tv_series.id , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.series_name",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.*",
      "tv_series.episode",
      "tv_series.id",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "Find the number of cartoons directed by each of the listed directors. | cartoon : cartoon.directed_by , cartoon.channel , cartoon.id , cartoon.title , cartoon.written_by , cartoon.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.directed_by",
      "cartoon.channel",
      "cartoon.id",
      "cartoon.title",
      "cartoon.written_by",
      "cartoon.*",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "How many cartoons did each director create? | cartoon : cartoon.directed_by , cartoon.channel , cartoon.title , cartoon.id , cartoon.written_by , cartoon.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.directed_by",
      "cartoon.channel",
      "cartoon.title",
      "cartoon.id",
      "cartoon.written_by",
      "cartoon.*",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "Find the production code and channel of the most recently aired cartoon . | cartoon : cartoon.original_air_date , cartoon.production_code , cartoon.channel , cartoon.id , cartoon.title , cartoon.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.original_air_date",
      "cartoon.production_code",
      "cartoon.channel",
      "cartoon.id",
      "cartoon.title",
      "cartoon.*",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "What is the produdction code and channel of the most recent cartoon ? | cartoon : cartoon.production_code , cartoon.channel , cartoon.original_air_date , cartoon.title , cartoon.id , cartoon.* | tv_series : tv_series.rating , tv_series.air_date , tv_series.id , tv_series.episode , tv_series.share , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.production_code",
      "cartoon.channel",
      "cartoon.original_air_date",
      "cartoon.title",
      "cartoon.id",
      "cartoon.*",
      "tv_series.rating",
      "tv_series.air_date",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.share",
      "tv_series.*",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "Find the package choice and series name of the TV channel that has high definition TV. | tv_channel : tv_channel.package_option , tv_channel.series_name , tv_channel.hight_definition_tv , tv_channel.id , tv_channel.country , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.package_option",
      "tv_channel.series_name",
      "tv_channel.hight_definition_tv",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.*",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "What are the package options and the name of the series for the TV Channel that supports high definition TV? | tv_channel : tv_channel.package_option ( Option ) , tv_channel.series_name , tv_channel.hight_definition_tv , tv_channel.id , tv_channel.country , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.package_option",
      "tv_channel.series_name",
      "tv_channel.hight_definition_tv",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.*",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "which countries' tv channels are playing some cartoon written by Todd Casey? | cartoon : cartoon.written_by ( Todd Casey ) , cartoon.channel , cartoon.title , cartoon.id , cartoon.directed_by , cartoon.* | tv_channel : tv_channel.country , tv_channel.content , tv_channel.id , tv_channel.language , tv_channel.series_name , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.written_by",
      "cartoon.channel",
      "cartoon.title",
      "cartoon.id",
      "cartoon.directed_by",
      "cartoon.*",
      "tv_channel.country",
      "tv_channel.content",
      "tv_channel.id",
      "tv_channel.language",
      "tv_channel.series_name",
      "tv_channel.*",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "What are the countries that have cartoons on TV that were written by Todd Casey? | cartoon : cartoon.written_by ( Todd Casey ) , cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.* | tv_channel : tv_channel.country , tv_channel.id , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.written_by",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.directed_by",
      "cartoon.*",
      "tv_channel.country",
      "tv_channel.id",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "which countries' tv channels are not playing any cartoon written by Todd Casey? | cartoon : cartoon.written_by ( Todd Casey ) , cartoon.channel , cartoon.title , cartoon.id , cartoon.directed_by , cartoon.* | tv_channel : tv_channel.country , tv_channel.content , tv_channel.id , tv_channel.language , tv_channel.series_name , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.written_by",
      "cartoon.channel",
      "cartoon.title",
      "cartoon.id",
      "cartoon.directed_by",
      "cartoon.*",
      "tv_channel.country",
      "tv_channel.content",
      "tv_channel.id",
      "tv_channel.language",
      "tv_channel.series_name",
      "tv_channel.*",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "What are the countries that are not playing cartoons written by Todd Casey? | cartoon : cartoon.written_by ( Todd Casey ) , cartoon.channel , cartoon.id , cartoon.title , cartoon.directed_by , cartoon.* | tv_channel : tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.id , tv_channel.series_name , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.written_by",
      "cartoon.channel",
      "cartoon.id",
      "cartoon.title",
      "cartoon.directed_by",
      "cartoon.*",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.id",
      "tv_channel.series_name",
      "tv_channel.*",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang? | tv_channel : tv_channel.series_name , tv_channel.country , tv_channel.id , tv_channel.language , tv_channel.content , tv_channel.* | cartoon : cartoon.directed_by ( Ben Jones , Michael Chang ) , cartoon.channel , cartoon.id , cartoon.title , cartoon.written_by , cartoon.* | tv_series : tv_series.channel , tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.series_name",
      "tv_channel.country",
      "tv_channel.id",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.*",
      "cartoon.directed_by",
      "cartoon.channel",
      "cartoon.id",
      "cartoon.title",
      "cartoon.written_by",
      "cartoon.*",
      "tv_series.channel",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang? | tv_channel : tv_channel.series_name , tv_channel.country , tv_channel.id , tv_channel.language , tv_channel.content , tv_channel.* | cartoon : cartoon.directed_by ( Ben Jones , Michael Chang ) , cartoon.channel , cartoon.id , cartoon.title , cartoon.production_code , cartoon.* | tv_series : tv_series.channel , tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.series_name",
      "tv_channel.country",
      "tv_channel.id",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.*",
      "cartoon.directed_by",
      "cartoon.channel",
      "cartoon.id",
      "cartoon.title",
      "cartoon.production_code",
      "cartoon.*",
      "tv_series.channel",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "find the pixel aspect ratio and nation of the tv channels that do not use English. | tv_channel : tv_channel.language ( English ) , tv_channel.country , tv_channel.pixel_aspect_ratio_par , tv_channel.id , tv_channel.content , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.language",
      "tv_channel.country",
      "tv_channel.pixel_aspect_ratio_par",
      "tv_channel.id",
      "tv_channel.content",
      "tv_channel.*",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English? | tv_channel : tv_channel.language ( English ) , tv_channel.country , tv_channel.pixel_aspect_ratio_par , tv_channel.id , tv_channel.content , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.language",
      "tv_channel.country",
      "tv_channel.pixel_aspect_ratio_par",
      "tv_channel.id",
      "tv_channel.content",
      "tv_channel.*",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "find id of the tv channels that from the countries where have more than two tv channels. | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "What are the ids of all tv channels that have more than 2 TV channels? | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "find the id of tv channels that do not play any cartoon directed by Ben Jones. | cartoon : cartoon.directed_by ( Ben Jones ) , cartoon.channel , cartoon.id , cartoon.title , cartoon.written_by , cartoon.* | tv_channel : tv_channel.id , tv_channel.content , tv_channel.country , tv_channel.language , tv_channel.series_name , tv_channel.* | tv_series : tv_series.channel , tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.directed_by",
      "cartoon.channel",
      "cartoon.id",
      "cartoon.title",
      "cartoon.written_by",
      "cartoon.*",
      "tv_channel.id",
      "tv_channel.content",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.series_name",
      "tv_channel.*",
      "tv_series.channel",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones? | cartoon : cartoon.directed_by ( Ben Jones ) , cartoon.channel , cartoon.id , cartoon.title , cartoon.written_by , cartoon.* | tv_channel : tv_channel.id , tv_channel.content , tv_channel.country , tv_channel.language , tv_channel.series_name , tv_channel.* | tv_series : tv_series.channel , tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.directed_by",
      "cartoon.channel",
      "cartoon.id",
      "cartoon.title",
      "cartoon.written_by",
      "cartoon.*",
      "tv_channel.id",
      "tv_channel.content",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.series_name",
      "tv_channel.*",
      "tv_series.channel",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones. | tv_channel : tv_channel.package_option ( Option ) , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.* | cartoon : cartoon.directed_by ( Ben Jones ) , cartoon.title , cartoon.channel , cartoon.id , cartoon.written_by , cartoon.* | tv_series : tv_series.channel , tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.package_option",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.*",
      "cartoon.directed_by",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.id",
      "cartoon.written_by",
      "cartoon.*",
      "tv_series.channel",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones? | tv_channel : tv_channel.package_option ( Option ) , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.* | cartoon : cartoon.directed_by ( Ben Jones ) , cartoon.channel , cartoon.title , cartoon.id , cartoon.written_by , cartoon.* | tv_series : tv_series.channel , tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.package_option",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.*",
      "cartoon.directed_by",
      "cartoon.channel",
      "cartoon.title",
      "cartoon.id",
      "cartoon.written_by",
      "cartoon.*",
      "tv_series.channel",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "How many poker players are there? | poker_player : poker_player.poker_player_id , poker_player.earnings , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*",
    "output_sequence": " | ",
    "tc_original": [
      "poker_player.poker_player_id",
      "poker_player.earnings",
      "poker_player.people_id",
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.*",
      "people.nationality",
      "people.name",
      "people.height",
      "people.people_id",
      "people.birth_date",
      "people.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "Count the number of poker players. | poker_player : poker_player.poker_player_id , poker_player.earnings , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*",
    "output_sequence": " | ",
    "tc_original": [
      "poker_player.poker_player_id",
      "poker_player.earnings",
      "poker_player.people_id",
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.*",
      "people.nationality",
      "people.name",
      "people.height",
      "people.people_id",
      "people.birth_date",
      "people.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "List the earnings of poker players in descending order. | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*",
    "output_sequence": " | ",
    "tc_original": [
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.people_id",
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.*",
      "people.nationality",
      "people.name",
      "people.height",
      "people.people_id",
      "people.birth_date",
      "people.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "What are the earnings of poker players, ordered descending by value? | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*",
    "output_sequence": " | ",
    "tc_original": [
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.people_id",
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.*",
      "people.nationality",
      "people.name",
      "people.height",
      "people.people_id",
      "people.birth_date",
      "people.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "List the final tables made and the best finishes of poker players. | poker_player : poker_player.final_table_made , poker_player.best_finish , poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*",
    "output_sequence": " | ",
    "tc_original": [
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.people_id",
      "poker_player.*",
      "people.nationality",
      "people.name",
      "people.height",
      "people.people_id",
      "people.birth_date",
      "people.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "What are the final tables made and best finishes for all poker players? | poker_player : poker_player.final_table_made , poker_player.best_finish , poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*",
    "output_sequence": " | ",
    "tc_original": [
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.people_id",
      "poker_player.*",
      "people.nationality",
      "people.name",
      "people.height",
      "people.people_id",
      "people.birth_date",
      "people.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "What is the average earnings of poker players? | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*",
    "output_sequence": " | ",
    "tc_original": [
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.people_id",
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.*",
      "people.nationality",
      "people.name",
      "people.height",
      "people.people_id",
      "people.birth_date",
      "people.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "Return the average earnings across all poker players. | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*",
    "output_sequence": " | ",
    "tc_original": [
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.people_id",
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.*",
      "people.nationality",
      "people.name",
      "people.height",
      "people.people_id",
      "people.birth_date",
      "people.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "What is the money rank of the poker player with the highest earnings? | poker_player : poker_player.money_rank , poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*",
    "output_sequence": " | ",
    "tc_original": [
      "poker_player.money_rank",
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.people_id",
      "poker_player.final_table_made",
      "poker_player.*",
      "people.nationality",
      "people.name",
      "people.height",
      "people.people_id",
      "people.birth_date",
      "people.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "Return the money rank of the player with the greatest earnings. | poker_player : poker_player.money_rank , poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*",
    "output_sequence": " | ",
    "tc_original": [
      "poker_player.money_rank",
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.people_id",
      "poker_player.final_table_made",
      "poker_player.*",
      "people.nationality",
      "people.name",
      "people.height",
      "people.people_id",
      "people.birth_date",
      "people.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "What is the maximum number of final tables made among poker players with earnings less than 200000? | poker_player : poker_player.final_table_made , poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.best_finish , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*",
    "output_sequence": " | ",
    "tc_original": [
      "poker_player.final_table_made",
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.people_id",
      "poker_player.best_finish",
      "poker_player.*",
      "people.nationality",
      "people.name",
      "people.height",
      "people.people_id",
      "people.birth_date",
      "people.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "Return the maximum final tables made across all poker players who have earnings below 200000. | poker_player : poker_player.final_table_made , poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.best_finish , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*",
    "output_sequence": " | ",
    "tc_original": [
      "poker_player.final_table_made",
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.people_id",
      "poker_player.best_finish",
      "poker_player.*",
      "people.nationality",
      "people.name",
      "people.height",
      "people.people_id",
      "people.birth_date",
      "people.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "What are the names of poker players? | people : people.name , people.nationality , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.poker_player_id , poker_player.earnings , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.name",
      "people.nationality",
      "people.height",
      "people.people_id",
      "people.birth_date",
      "people.*",
      "poker_player.poker_player_id",
      "poker_player.earnings",
      "poker_player.people_id",
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "Return the names of all the poker players. | people : people.name , people.nationality , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.poker_player_id , poker_player.earnings , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.name",
      "people.nationality",
      "people.height",
      "people.people_id",
      "people.birth_date",
      "people.*",
      "poker_player.poker_player_id",
      "poker_player.earnings",
      "poker_player.people_id",
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "What are the names of poker players whose earnings is higher than 300000? | people : people.name , people.nationality , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.name",
      "people.nationality",
      "people.height",
      "people.people_id",
      "people.birth_date",
      "people.*",
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.people_id",
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "Give the names of poker players who have earnings above 300000. | people : people.name , people.nationality , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.name",
      "people.nationality",
      "people.height",
      "people.people_id",
      "people.birth_date",
      "people.*",
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.people_id",
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "List the names of poker players ordered by the final tables made in ascending order. | poker_player : poker_player.final_table_made , poker_player.earnings , poker_player.people_id , poker_player.poker_player_id , poker_player.best_finish , poker_player.* | people : people.name , people.nationality , people.height , people.people_id , people.birth_date , people.*",
    "output_sequence": " | ",
    "tc_original": [
      "poker_player.final_table_made",
      "poker_player.earnings",
      "poker_player.people_id",
      "poker_player.poker_player_id",
      "poker_player.best_finish",
      "poker_player.*",
      "people.name",
      "people.nationality",
      "people.height",
      "people.people_id",
      "people.birth_date",
      "people.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "What are the names of poker players, ordered ascending by the number of final tables they have made? | poker_player : poker_player.final_table_made , poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.best_finish , poker_player.* | people : people.name , people.nationality , people.height , people.people_id , people.birth_date , people.*",
    "output_sequence": " | ",
    "tc_original": [
      "poker_player.final_table_made",
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.people_id",
      "poker_player.best_finish",
      "poker_player.*",
      "people.name",
      "people.nationality",
      "people.height",
      "people.people_id",
      "people.birth_date",
      "people.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "What is the birth date of the poker player with the lowest earnings? | people : people.birth_date , people.name , people.nationality , people.height , people.people_id , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.birth_date",
      "people.name",
      "people.nationality",
      "people.height",
      "people.people_id",
      "people.*",
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.people_id",
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "Return the birth date of the poker player with the lowest earnings. | people : people.birth_date , people.name , people.nationality , people.height , people.people_id , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.birth_date",
      "people.name",
      "people.nationality",
      "people.height",
      "people.people_id",
      "people.*",
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.people_id",
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "What is the money rank of the tallest poker player? | poker_player : poker_player.money_rank , poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.* | people : people.height , people.nationality , people.name , people.people_id , people.birth_date , people.*",
    "output_sequence": " | ",
    "tc_original": [
      "poker_player.money_rank",
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.people_id",
      "poker_player.final_table_made",
      "poker_player.*",
      "people.height",
      "people.nationality",
      "people.name",
      "people.people_id",
      "people.birth_date",
      "people.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "Return the money rank of the poker player with the greatest height. | poker_player : poker_player.money_rank , poker_player.earnings , poker_player.people_id , poker_player.poker_player_id , poker_player.final_table_made , poker_player.* | people : people.height , people.nationality , people.name , people.people_id , people.birth_date , people.*",
    "output_sequence": " | ",
    "tc_original": [
      "poker_player.money_rank",
      "poker_player.earnings",
      "poker_player.people_id",
      "poker_player.poker_player_id",
      "poker_player.final_table_made",
      "poker_player.*",
      "people.height",
      "people.nationality",
      "people.name",
      "people.people_id",
      "people.birth_date",
      "people.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "What is the average earnings of poker players with height higher than 200? | people : people.height , people.nationality , people.name , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.height",
      "people.nationality",
      "people.name",
      "people.people_id",
      "people.birth_date",
      "people.*",
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.people_id",
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "Give average earnings of poker players who are taller than 200. | people : people.height , people.nationality , people.name , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.height",
      "people.nationality",
      "people.name",
      "people.people_id",
      "people.birth_date",
      "people.*",
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.people_id",
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "What are the names of poker players in descending order of earnings? | people : people.name , people.nationality , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.name",
      "people.nationality",
      "people.height",
      "people.people_id",
      "people.birth_date",
      "people.*",
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.people_id",
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "Return the names of poker players sorted by their earnings descending. | people : people.name , people.nationality , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.name",
      "people.nationality",
      "people.height",
      "people.people_id",
      "people.birth_date",
      "people.*",
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.people_id",
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "What are different nationalities of people and the corresponding number of people from each nation? | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.nationality",
      "people.name",
      "people.height",
      "people.people_id",
      "people.birth_date",
      "people.*",
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.people_id",
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "How many people are there of each nationality? | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.nationality",
      "people.name",
      "people.height",
      "people.people_id",
      "people.birth_date",
      "people.*",
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.people_id",
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "What is the most common nationality of people? | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.nationality",
      "people.name",
      "people.height",
      "people.people_id",
      "people.birth_date",
      "people.*",
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.people_id",
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "Give the nationality that is most common across all people. | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.nationality",
      "people.name",
      "people.height",
      "people.people_id",
      "people.birth_date",
      "people.*",
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.people_id",
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "What are the nationalities that are shared by at least two people? | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.nationality",
      "people.name",
      "people.height",
      "people.people_id",
      "people.birth_date",
      "people.*",
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.people_id",
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "Return the nationalities for which there are two or more people. | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.nationality",
      "people.name",
      "people.height",
      "people.people_id",
      "people.birth_date",
      "people.*",
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.people_id",
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "List the names and birth dates of people in ascending alphabetical order of name. | people : people.birth_date , people.name , people.nationality , people.height , people.people_id , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.birth_date",
      "people.name",
      "people.nationality",
      "people.height",
      "people.people_id",
      "people.*",
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.people_id",
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "What are the names and birth dates of people, ordered by their names in alphabetical order? | people : people.birth_date , people.name , people.nationality , people.height , people.people_id , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.birth_date",
      "people.name",
      "people.nationality",
      "people.height",
      "people.people_id",
      "people.*",
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.people_id",
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "Show names of people whose nationality is not \"Russia\". | people : people.nationality ( Russia ) , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.nationality",
      "people.name",
      "people.height",
      "people.people_id",
      "people.birth_date",
      "people.*",
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.people_id",
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "What are the names of people who are not from Russia? | people : people.nationality ( Russia ) , people.name , people.height , people.birth_date , people.people_id , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.nationality",
      "people.name",
      "people.height",
      "people.birth_date",
      "people.people_id",
      "people.*",
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.people_id",
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "List the names of people that are not poker players. | people : people.name , people.nationality , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.poker_player_id , poker_player.earnings , poker_player.people_id , poker_player.money_rank , poker_player.final_table_made , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.name",
      "people.nationality",
      "people.height",
      "people.people_id",
      "people.birth_date",
      "people.*",
      "poker_player.poker_player_id",
      "poker_player.earnings",
      "poker_player.people_id",
      "poker_player.money_rank",
      "poker_player.final_table_made",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "What are the names of people who do not play poker? | people : people.name , people.nationality , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.poker_player_id , poker_player.earnings , poker_player.people_id , poker_player.best_finish , poker_player.money_rank , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.name",
      "people.nationality",
      "people.height",
      "people.people_id",
      "people.birth_date",
      "people.*",
      "poker_player.poker_player_id",
      "poker_player.earnings",
      "poker_player.people_id",
      "poker_player.best_finish",
      "poker_player.money_rank",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "How many distinct nationalities are there? | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.nationality",
      "people.name",
      "people.height",
      "people.people_id",
      "people.birth_date",
      "people.*",
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.people_id",
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "Count the number of different nationalities. | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.nationality",
      "people.name",
      "people.height",
      "people.people_id",
      "people.birth_date",
      "people.*",
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.people_id",
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.*"
    ]
  },
  {
    "db_id": "voter_1",
    "input_sequence": "How many states are there? | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.* | votes : votes.state , votes.created , votes.vote_id , votes.phone_number , votes.contestant_number , votes.* | contestants : contestants.contestant_number , contestants.contestant_name , contestants.*",
    "output_sequence": " | ",
    "tc_original": [
      "area_code_state.state",
      "area_code_state.area_code",
      "area_code_state.*",
      "votes.state",
      "votes.created",
      "votes.vote_id",
      "votes.phone_number",
      "votes.contestant_number",
      "votes.*",
      "contestants.contestant_number",
      "contestants.contestant_name",
      "contestants.*"
    ]
  },
  {
    "db_id": "voter_1",
    "input_sequence": "List the contestant numbers and names, ordered by contestant name descending. | contestants : contestants.contestant_name , contestants.contestant_number , contestants.* | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.* | votes : votes.state , votes.created , votes.vote_id , votes.phone_number , votes.contestant_number , votes.*",
    "output_sequence": " | ",
    "tc_original": [
      "contestants.contestant_name",
      "contestants.contestant_number",
      "contestants.*",
      "area_code_state.state",
      "area_code_state.area_code",
      "area_code_state.*",
      "votes.state",
      "votes.created",
      "votes.vote_id",
      "votes.phone_number",
      "votes.contestant_number",
      "votes.*"
    ]
  },
  {
    "db_id": "voter_1",
    "input_sequence": "List the vote ids, phone numbers and states of all votes. | votes : votes.phone_number , votes.vote_id , votes.state , votes.created , votes.contestant_number , votes.* | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.* | contestants : contestants.contestant_number , contestants.contestant_name , contestants.*",
    "output_sequence": " | ",
    "tc_original": [
      "votes.phone_number",
      "votes.vote_id",
      "votes.state",
      "votes.created",
      "votes.contestant_number",
      "votes.*",
      "area_code_state.state",
      "area_code_state.area_code",
      "area_code_state.*",
      "contestants.contestant_number",
      "contestants.contestant_name",
      "contestants.*"
    ]
  },
  {
    "db_id": "voter_1",
    "input_sequence": "What are the maximum and minimum values of area codes? | area_code_state : area_code_state.area_code , area_code_state.state , area_code_state.* | votes : votes.state , votes.created , votes.vote_id , votes.phone_number , votes.contestant_number , votes.* | contestants : contestants.contestant_number , contestants.contestant_name , contestants.*",
    "output_sequence": " | ",
    "tc_original": [
      "area_code_state.area_code",
      "area_code_state.state",
      "area_code_state.*",
      "votes.state",
      "votes.created",
      "votes.vote_id",
      "votes.phone_number",
      "votes.contestant_number",
      "votes.*",
      "contestants.contestant_number",
      "contestants.contestant_name",
      "contestants.*"
    ]
  },
  {
    "db_id": "voter_1",
    "input_sequence": "What is last date created of votes from the state 'CA'? | votes : votes.state ( CA ) , votes.created , votes.vote_id , votes.phone_number , votes.contestant_number , votes.* | area_code_state : area_code_state.state ( CA ) , area_code_state.area_code , area_code_state.* | contestants : contestants.contestant_number , contestants.contestant_name , contestants.*",
    "output_sequence": " | ",
    "tc_original": [
      "votes.state",
      "votes.created",
      "votes.vote_id",
      "votes.phone_number",
      "votes.contestant_number",
      "votes.*",
      "area_code_state.state",
      "area_code_state.area_code",
      "area_code_state.*",
      "contestants.contestant_number",
      "contestants.contestant_name",
      "contestants.*"
    ]
  },
  {
    "db_id": "voter_1",
    "input_sequence": "What are the names of the contestants whose names are not 'Jessie Alloway' | contestants : contestants.contestant_name ( Jessie Alloway ) , contestants.contestant_number , contestants.* | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.* | votes : votes.state , votes.created , votes.vote_id , votes.phone_number , votes.contestant_number , votes.*",
    "output_sequence": " | ",
    "tc_original": [
      "contestants.contestant_name",
      "contestants.contestant_number",
      "contestants.*",
      "area_code_state.state",
      "area_code_state.area_code",
      "area_code_state.*",
      "votes.state",
      "votes.created",
      "votes.vote_id",
      "votes.phone_number",
      "votes.contestant_number",
      "votes.*"
    ]
  },
  {
    "db_id": "voter_1",
    "input_sequence": "What are the distinct states and create time of all votes? | votes : votes.state , votes.created , votes.vote_id , votes.phone_number , votes.contestant_number , votes.* | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.* | contestants : contestants.contestant_number , contestants.contestant_name , contestants.*",
    "output_sequence": " | ",
    "tc_original": [
      "votes.state",
      "votes.created",
      "votes.vote_id",
      "votes.phone_number",
      "votes.contestant_number",
      "votes.*",
      "area_code_state.state",
      "area_code_state.area_code",
      "area_code_state.*",
      "contestants.contestant_number",
      "contestants.contestant_name",
      "contestants.*"
    ]
  },
  {
    "db_id": "voter_1",
    "input_sequence": "What are the contestant numbers and names of the contestants who had at least two votes? | contestants : contestants.contestant_name , contestants.contestant_number , contestants.* | votes : votes.contestant_number , votes.created , votes.state , votes.vote_id , votes.phone_number , votes.* | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.*",
    "output_sequence": " | ",
    "tc_original": [
      "contestants.contestant_name",
      "contestants.contestant_number",
      "contestants.*",
      "votes.contestant_number",
      "votes.created",
      "votes.state",
      "votes.vote_id",
      "votes.phone_number",
      "votes.*",
      "area_code_state.state",
      "area_code_state.area_code",
      "area_code_state.*"
    ]
  },
  {
    "db_id": "voter_1",
    "input_sequence": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes? | contestants : contestants.contestant_name , contestants.contestant_number , contestants.* | votes : votes.contestant_number , votes.created , votes.state , votes.vote_id , votes.phone_number , votes.* | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.*",
    "output_sequence": " | ",
    "tc_original": [
      "contestants.contestant_name",
      "contestants.contestant_number",
      "contestants.*",
      "votes.contestant_number",
      "votes.created",
      "votes.state",
      "votes.vote_id",
      "votes.phone_number",
      "votes.*",
      "area_code_state.state",
      "area_code_state.area_code",
      "area_code_state.*"
    ]
  },
  {
    "db_id": "voter_1",
    "input_sequence": "What are the number of votes from state 'NY' or 'CA'? | votes : votes.state ( CA , NY ) , votes.created , votes.vote_id , votes.phone_number , votes.contestant_number , votes.* | area_code_state : area_code_state.state ( CA , NY ) , area_code_state.area_code , area_code_state.* | contestants : contestants.contestant_number , contestants.contestant_name , contestants.*",
    "output_sequence": " | ",
    "tc_original": [
      "votes.state",
      "votes.created",
      "votes.vote_id",
      "votes.phone_number",
      "votes.contestant_number",
      "votes.*",
      "area_code_state.state",
      "area_code_state.area_code",
      "area_code_state.*",
      "contestants.contestant_number",
      "contestants.contestant_name",
      "contestants.*"
    ]
  },
  {
    "db_id": "voter_1",
    "input_sequence": "How many contestants did not get voted? | votes : votes.contestant_number , votes.created , votes.vote_id , votes.state , votes.phone_number , votes.* | contestants : contestants.contestant_name , contestants.contestant_number , contestants.* | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.*",
    "output_sequence": " | ",
    "tc_original": [
      "votes.contestant_number",
      "votes.created",
      "votes.vote_id",
      "votes.state",
      "votes.phone_number",
      "votes.*",
      "contestants.contestant_name",
      "contestants.contestant_number",
      "contestants.*",
      "area_code_state.state",
      "area_code_state.area_code",
      "area_code_state.*"
    ]
  },
  {
    "db_id": "voter_1",
    "input_sequence": "What is the area code in which the most voters voted? | votes : votes.state , votes.vote_id , votes.created , votes.contestant_number , votes.phone_number , votes.* | area_code_state : area_code_state.area_code , area_code_state.state , area_code_state.* | contestants : contestants.contestant_number , contestants.contestant_name , contestants.*",
    "output_sequence": " | ",
    "tc_original": [
      "votes.state",
      "votes.vote_id",
      "votes.created",
      "votes.contestant_number",
      "votes.phone_number",
      "votes.*",
      "area_code_state.area_code",
      "area_code_state.state",
      "area_code_state.*",
      "contestants.contestant_number",
      "contestants.contestant_name",
      "contestants.*"
    ]
  },
  {
    "db_id": "voter_1",
    "input_sequence": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'? | votes : votes.created , votes.state , votes.phone_number , votes.vote_id , votes.contestant_number , votes.* | contestants : contestants.contestant_name ( Tabatha Gehling ) , contestants.contestant_number , contestants.* | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.*",
    "output_sequence": " | ",
    "tc_original": [
      "votes.created",
      "votes.state",
      "votes.phone_number",
      "votes.vote_id",
      "votes.contestant_number",
      "votes.*",
      "contestants.contestant_name",
      "contestants.contestant_number",
      "contestants.*",
      "area_code_state.state",
      "area_code_state.area_code",
      "area_code_state.*"
    ]
  },
  {
    "db_id": "voter_1",
    "input_sequence": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'. | contestants : contestants.contestant_name ( Kelly Clauss , Tabatha Gehling ) , contestants.contestant_number , contestants.* | votes : votes.vote_id , votes.state , votes.created , votes.phone_number , votes.contestant_number , votes.* | area_code_state : area_code_state.area_code , area_code_state.state , area_code_state.*",
    "output_sequence": " | ",
    "tc_original": [
      "contestants.contestant_name",
      "contestants.contestant_number",
      "contestants.*",
      "votes.vote_id",
      "votes.state",
      "votes.created",
      "votes.phone_number",
      "votes.contestant_number",
      "votes.*",
      "area_code_state.area_code",
      "area_code_state.state",
      "area_code_state.*"
    ]
  },
  {
    "db_id": "voter_1",
    "input_sequence": "Return the names of the contestants whose names contain the substring 'Al' . | contestants : contestants.contestant_name , contestants.contestant_number , contestants.* | area_code_state : area_code_state.state ( AL ) , area_code_state.area_code , area_code_state.* | votes : votes.state , votes.created , votes.vote_id , votes.phone_number , votes.contestant_number , votes.*",
    "output_sequence": " | ",
    "tc_original": [
      "contestants.contestant_name",
      "contestants.contestant_number",
      "contestants.*",
      "area_code_state.state",
      "area_code_state.area_code",
      "area_code_state.*",
      "votes.state",
      "votes.created",
      "votes.vote_id",
      "votes.phone_number",
      "votes.contestant_number",
      "votes.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What are the names of all the countries that became independent after 1950? | country : country.indepyear , country.name , country.code , country.continent , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.indepyear",
      "country.name",
      "country.code",
      "country.continent",
      "country.region",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Give the names of the nations that were founded after 1950. | country : country.name , country.indepyear , country.continent , country.code , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.indepyear",
      "country.continent",
      "country.code",
      "country.region",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "How many countries have a republic as their form of government? | country : country.governmentform ( Republic ) , country.name , country.code , country.continent , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.governmentform",
      "country.name",
      "country.code",
      "country.continent",
      "country.region",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "How many countries have governments that are republics? | country : country.governmentform ( Republic ) , country.name , country.code , country.continent , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.governmentform",
      "country.name",
      "country.code",
      "country.continent",
      "country.region",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What is the total surface area of the countries in the Caribbean region? | country : country.region ( Caribbean ) , country.surfacearea , country.code , country.name , country.continent , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.percentage , countrylanguage.language ( Caribbean ) , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.region",
      "country.surfacearea",
      "country.code",
      "country.name",
      "country.continent",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.percentage",
      "countrylanguage.language",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "How much surface area do the countires in the Carribean cover together? | country : country.surfacearea , country.continent , country.region , country.code , country.name , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.surfacearea",
      "country.continent",
      "country.region",
      "country.code",
      "country.name",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Which continent is Anguilla in? | country : country.continent , country.name ( Anguilla ) , country.localname ( Anguilla ) , country.code , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.continent",
      "country.name",
      "country.localname",
      "country.code",
      "country.region",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What is the continent name which Anguilla belongs to? | country : country.continent , country.name ( Anguilla ) , country.localname ( Anguilla ) , country.code , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.continent",
      "country.name",
      "country.localname",
      "country.code",
      "country.region",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Which region is the city Kabul located in? | city : city.name ( Kabul ) , city.id , city.district , city.population , city.countrycode , city.* | country : country.region , country.code , country.name , country.continent , country.population , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "city.name",
      "city.id",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*",
      "country.region",
      "country.code",
      "country.name",
      "country.continent",
      "country.population",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What region is Kabul in? | country : country.region , country.code , country.name , country.continent , country.population , country.* | city : city.name ( Kabul ) , city.id , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.region",
      "country.code",
      "country.name",
      "country.continent",
      "country.population",
      "country.*",
      "city.name",
      "city.id",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Which language is the most popular in Aruba? | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.* | country : country.name ( Aruba ) , country.localname ( Aruba ) , country.continent , country.population , country.code , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.isofficial",
      "countrylanguage.countrycode",
      "countrylanguage.*",
      "country.name",
      "country.localname",
      "country.continent",
      "country.population",
      "country.code",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What language is predominantly spoken in Aruba? | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | country : country.name ( Aruba ) , country.localname ( Aruba ) , country.continent , country.population , country.code , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.countrycode",
      "countrylanguage.percentage",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "country.name",
      "country.localname",
      "country.continent",
      "country.population",
      "country.code",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What are the population and life expectancies in Brazil? | country : country.lifeexpectancy , country.name ( Brazil ) , country.population , country.code , country.continent , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.lifeexpectancy",
      "country.name",
      "country.population",
      "country.code",
      "country.continent",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Give me Brazil's population and life expectancies. | country : country.lifeexpectancy , country.name ( Brazil ) , country.population , country.code , country.continent , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.lifeexpectancy",
      "country.name",
      "country.population",
      "country.code",
      "country.continent",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What are the region and population of Angola? | country : country.region , country.population , country.name ( Angola ) , country.localname ( Angola ) , country.code , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.region",
      "country.population",
      "country.name",
      "country.localname",
      "country.code",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What region does Angola belong to and what is its population? | country : country.population , country.region , country.name ( Angola ) , country.localname ( Angola ) , country.code , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.population",
      "country.region",
      "country.name",
      "country.localname",
      "country.code",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What is the average expected life expectancy for countries in the region of Central Africa? | country : country.lifeexpectancy , country.region ( Central Africa ) , country.continent ( Africa ) , country.name , country.code , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.population , city.district ( Central ) , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.lifeexpectancy",
      "country.region",
      "country.continent",
      "country.name",
      "country.code",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.population",
      "city.district",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "How long is the people's average life expectancy in Central Africa? | country : country.lifeexpectancy , country.region ( Central Africa ) , country.continent ( Africa ) , country.population , country.code , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.population , city.district ( Central ) , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.lifeexpectancy",
      "country.region",
      "country.continent",
      "country.population",
      "country.code",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.population",
      "city.district",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What is the name of country that has the shortest life expectancy in Asia? | country : country.continent ( Asia ) , country.lifeexpectancy , country.name , country.code , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.continent",
      "country.lifeexpectancy",
      "country.name",
      "country.code",
      "country.region",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Give the name of the country in Asia with the lowest life expectancy. | country : country.continent ( Asia ) , country.lifeexpectancy , country.name , country.code , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.continent",
      "country.lifeexpectancy",
      "country.name",
      "country.code",
      "country.region",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What is the total population and maximum GNP in Asia? | country : country.continent ( Asia ) , country.gnp , country.population , country.code , country.name , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.continent",
      "country.gnp",
      "country.population",
      "country.code",
      "country.name",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "How many people live in Asia, and what is the largest GNP among them? | country : country.continent ( Asia ) , country.gnp , country.population , country.name , country.code , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.continent",
      "country.gnp",
      "country.population",
      "country.name",
      "country.code",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What is the average life expectancy in African countries that are republics? | country : country.lifeexpectancy , country.governmentform ( Republic ) , country.continent ( Africa ) , country.name , country.code , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.lifeexpectancy",
      "country.governmentform",
      "country.continent",
      "country.name",
      "country.code",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Give the average life expectancy for countries in Africa which are republics? | country : country.lifeexpectancy , country.continent ( Africa ) , country.governmentform ( Republic ) , country.name , country.code , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.lifeexpectancy",
      "country.continent",
      "country.governmentform",
      "country.name",
      "country.code",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What is the total surface area of the continents Asia and Europe? | country : country.continent ( Asia , Europe ) , country.surfacearea , country.code , country.name , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.continent",
      "country.surfacearea",
      "country.code",
      "country.name",
      "country.region",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Give the total surface area covered by countries in Asia or Europe. | country : country.continent ( Asia , Europe ) , country.surfacearea , country.code , country.name , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.continent",
      "country.surfacearea",
      "country.code",
      "country.name",
      "country.region",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "How many people live in Gelderland district? | city : city.district ( Gelderland ) , city.population , city.id , city.name , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | country : country.population , country.code , country.name , country.continent , country.region , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "city.district",
      "city.population",
      "city.id",
      "city.name",
      "city.countrycode",
      "city.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "country.population",
      "country.code",
      "country.name",
      "country.continent",
      "country.region",
      "country.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What is the total population of Gelderland district? | city : city.district ( Gelderland ) , city.population , city.id , city.name , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | country : country.population , country.code , country.name , country.continent , country.region , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "city.district",
      "city.population",
      "city.id",
      "city.name",
      "city.countrycode",
      "city.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "country.population",
      "country.code",
      "country.name",
      "country.continent",
      "country.region",
      "country.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What is the average GNP and total population in all nations whose government is US territory? | country : country.gnp , country.governmentform ( US Territory ) , country.population , country.code2 ( US ) , country.name , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.gnp",
      "country.governmentform",
      "country.population",
      "country.code2",
      "country.name",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Give the mean GNP and total population of nations which are considered US territory. | country : country.gnp , country.population , country.governmentform ( US Territory ) , country.code2 ( US ) , country.name , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.gnp",
      "country.population",
      "country.governmentform",
      "country.code2",
      "country.name",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "How many unique languages are spoken in the world? | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | country : country.code , country.name , country.continent , country.region , country.population , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*",
      "country.code",
      "country.name",
      "country.continent",
      "country.region",
      "country.population",
      "country.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What is the number of distinct languages used around the world? | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | country : country.code , country.name , country.continent , country.region , country.population , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*",
      "country.code",
      "country.name",
      "country.continent",
      "country.region",
      "country.population",
      "country.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "How many type of governments are in Africa? | country : country.continent ( Africa ) , country.governmentform , country.code , country.name , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.continent",
      "country.governmentform",
      "country.code",
      "country.name",
      "country.region",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "How many different forms of governments are there in Africa? | country : country.continent ( Africa ) , country.governmentform , country.code , country.name , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.continent",
      "country.governmentform",
      "country.code",
      "country.name",
      "country.region",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What is the total number of languages used in Aruba? | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | country : country.name ( Aruba ) , country.localname ( Aruba ) , country.code , country.continent , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "country.name",
      "country.localname",
      "country.code",
      "country.continent",
      "country.region",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "How many languages are spoken in Aruba? | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | country : country.name ( Aruba ) , country.localname ( Aruba ) , country.code , country.continent , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "country.name",
      "country.localname",
      "country.code",
      "country.continent",
      "country.region",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "How many official languages does Afghanistan have? | countrylanguage : countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.* | country : country.name ( Afghanistan ) , country.code , country.continent , country.region , country.population , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.isofficial",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.*",
      "country.name",
      "country.code",
      "country.continent",
      "country.region",
      "country.population",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "How many official languages are spoken in Afghanistan? | country : country.name ( Afghanistan ) , country.code , country.continent , country.region , country.population , country.* | countrylanguage : countrylanguage.isofficial , countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.code",
      "country.continent",
      "country.region",
      "country.population",
      "country.*",
      "countrylanguage.isofficial",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What is name of the country that speaks the largest number of languages? | country : country.name , country.continent , country.code , country.region , country.population , country.* | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.continent",
      "country.code",
      "country.region",
      "country.population",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.countrycode",
      "countrylanguage.percentage",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Give the name of the nation that uses the greatest amount of languages. | country : country.name , country.code , country.continent , country.region , country.population , country.* | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.code",
      "country.continent",
      "country.region",
      "country.population",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.countrycode",
      "countrylanguage.percentage",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Which continent has the most diverse languages? | country : country.continent , country.code , country.name , country.region , country.population , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.continent",
      "country.code",
      "country.name",
      "country.region",
      "country.population",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Which continent speaks the most languages? | country : country.continent , country.code , country.name , country.region , country.population , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.continent",
      "country.code",
      "country.name",
      "country.region",
      "country.population",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "How many countries speak both English and Dutch? | countrylanguage : countrylanguage.language ( Dutch , English ) , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | country : country.name , country.code , country.continent , country.region , country.population , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.countrycode",
      "countrylanguage.percentage",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "country.name",
      "country.code",
      "country.continent",
      "country.region",
      "country.population",
      "country.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What is the number of nations that use English and Dutch? | countrylanguage : countrylanguage.language ( Dutch , English ) , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | country : country.code , country.name , country.continent , country.region , country.population , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.countrycode",
      "countrylanguage.percentage",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*",
      "country.code",
      "country.name",
      "country.continent",
      "country.region",
      "country.population",
      "country.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What are the names of nations speak both English and French? | country : country.name , country.code , country.continent , country.region , country.population , country.* | countrylanguage : countrylanguage.language ( English , French ) , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.code",
      "country.continent",
      "country.region",
      "country.population",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Give the names of nations that speak both English and French. | countrylanguage : countrylanguage.language ( English , French ) , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | country : country.name , country.code , country.continent , country.region , country.population , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "country.name",
      "country.code",
      "country.continent",
      "country.region",
      "country.population",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What are the names of nations where both English and French are official languages? | country : country.name , country.code , country.continent , country.region , country.population , country.* | countrylanguage : countrylanguage.language ( English , French ) , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.code",
      "country.continent",
      "country.region",
      "country.population",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.isofficial",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Give the names of countries with English and French as official languages. | country : country.name , country.code , country.continent , country.region , country.population , country.* | countrylanguage : countrylanguage.language ( English , French ) , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.code",
      "country.continent",
      "country.region",
      "country.population",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.isofficial",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What is the number of distinct continents where Chinese is spoken? | countrylanguage : countrylanguage.language ( Chinese ) , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | country : country.continent , country.code , country.name , country.region , country.population , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "country.continent",
      "country.code",
      "country.name",
      "country.region",
      "country.population",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "How many continents speak Chinese? | countrylanguage : countrylanguage.language ( Chinese ) , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | country : country.continent , country.code , country.name , country.region , country.population , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "country.continent",
      "country.code",
      "country.name",
      "country.region",
      "country.population",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What are the regions that use English or Dutch? | countrylanguage : countrylanguage.language ( Dutch , English ) , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | country : country.region , country.code , country.name , country.continent , country.population , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "country.region",
      "country.code",
      "country.name",
      "country.continent",
      "country.population",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Which regions speak Dutch or English? | countrylanguage : countrylanguage.language ( Dutch , English ) , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | country : country.region , country.continent , country.code , country.name , country.population , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.countrycode",
      "countrylanguage.percentage",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "country.region",
      "country.continent",
      "country.code",
      "country.name",
      "country.population",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What are the countries where either English or Dutch is the official language ? | countrylanguage : countrylanguage.language ( Dutch , English ) , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.* | country : country.name , country.code , country.continent , country.region , country.population , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.percentage",
      "countrylanguage.*",
      "country.name",
      "country.code",
      "country.continent",
      "country.region",
      "country.population",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Which countries have either English or Dutch as an official language? | countrylanguage : countrylanguage.language ( Dutch , English ) , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | country : country.name , country.continent , country.code , country.population , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.isofficial",
      "countrylanguage.countrycode",
      "countrylanguage.percentage",
      "countrylanguage.*",
      "country.name",
      "country.continent",
      "country.code",
      "country.population",
      "country.region",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Which language is the most popular on the Asian continent? | country : country.continent ( Asia ) , country.code , country.name , country.region , country.population , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.continent",
      "country.code",
      "country.name",
      "country.region",
      "country.population",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What is the language that is used by the largest number of Asian nations? | country : country.continent ( Asia ) , country.name , country.code , country.region , country.population , country.* | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.continent",
      "country.name",
      "country.code",
      "country.region",
      "country.population",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.countrycode",
      "countrylanguage.percentage",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Which languages are spoken by only one country in republic governments? | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | country : country.governmentform ( Republic ) , country.name , country.code , country.continent , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.countrycode",
      "countrylanguage.percentage",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "country.governmentform",
      "country.name",
      "country.code",
      "country.continent",
      "country.region",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What languages are only used by a single country with a republic government? | country : country.governmentform ( Republic ) , country.name , country.code , country.continent , country.region , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.governmentform",
      "country.name",
      "country.code",
      "country.continent",
      "country.region",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Find the city with the largest population that uses English. | countrylanguage : countrylanguage.language ( English ) , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.population , city.name , city.id , city.district , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | country : country.population , country.code , country.name , country.continent , country.region , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.population",
      "city.name",
      "city.id",
      "city.district",
      "city.countrycode",
      "city.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "country.population",
      "country.code",
      "country.name",
      "country.continent",
      "country.region",
      "country.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What is the most populace city that speaks English? | countrylanguage : countrylanguage.language ( English ) , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.population , city.name , city.id , city.countrycode , city.district , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | country : country.code , country.name , country.continent , country.region , country.population , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.population",
      "city.name",
      "city.id",
      "city.countrycode",
      "city.district",
      "city.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "country.code",
      "country.name",
      "country.continent",
      "country.region",
      "country.population",
      "country.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Find the name, population and expected life length of asian country with the largest area? | country : country.lifeexpectancy , country.continent ( Asia ) , country.surfacearea , country.name , country.population , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.lifeexpectancy",
      "country.continent",
      "country.surfacearea",
      "country.name",
      "country.population",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What are the name, population, and life expectancy of the largest Asian country by land? | country : country.continent ( Asia ) , country.lifeexpectancy , country.name , country.population , country.surfacearea , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.continent",
      "country.lifeexpectancy",
      "country.name",
      "country.population",
      "country.surfacearea",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What is average life expectancy in the countries where English is not the official language? | country : country.lifeexpectancy , country.name , country.code , country.continent , country.region , country.* | countrylanguage : countrylanguage.language ( English ) , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.lifeexpectancy",
      "country.name",
      "country.code",
      "country.continent",
      "country.region",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.isofficial",
      "countrylanguage.countrycode",
      "countrylanguage.percentage",
      "countrylanguage.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Give the mean life expectancy of countries in which English is not the official language. | countrylanguage : countrylanguage.language ( English ) , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | country : country.lifeexpectancy , country.name , country.code , country.continent , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.isofficial",
      "countrylanguage.countrycode",
      "countrylanguage.percentage",
      "countrylanguage.*",
      "country.lifeexpectancy",
      "country.name",
      "country.code",
      "country.continent",
      "country.region",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What is the total number of people living in the nations that do not use English? | countrylanguage : countrylanguage.language ( English ) , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | country : country.population , country.name , country.code , country.continent , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.countrycode",
      "countrylanguage.percentage",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "country.population",
      "country.name",
      "country.code",
      "country.continent",
      "country.region",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "How many people live in countries that do not speak English? | countrylanguage : countrylanguage.language ( English ) , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | country : country.population , country.name , country.code , country.continent , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.countrycode",
      "countrylanguage.percentage",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "country.population",
      "country.name",
      "country.code",
      "country.continent",
      "country.region",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What is the official language spoken in the country whose head of state is Beatrix? | country : country.headofstate ( Beatrix ) , country.name , country.code , country.continent , country.region , country.* | countrylanguage : countrylanguage.isofficial , countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.headofstate",
      "country.name",
      "country.code",
      "country.continent",
      "country.region",
      "country.*",
      "countrylanguage.isofficial",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What is the official language used in the country the name of whose head of state is Beatrix. | country : country.headofstate ( Beatrix ) , country.name , country.code , country.continent , country.region , country.* | countrylanguage : countrylanguage.isofficial , countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.headofstate",
      "country.name",
      "country.code",
      "country.continent",
      "country.region",
      "country.*",
      "countrylanguage.isofficial",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What is the total number of unique official languages spoken in the countries that are founded before 1930? | country : country.indepyear , country.name , country.continent , country.headofstate , country.code , country.* | countrylanguage : countrylanguage.isofficial , countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.indepyear",
      "country.name",
      "country.continent",
      "country.headofstate",
      "country.code",
      "country.*",
      "countrylanguage.isofficial",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "For the countries founded before 1930, what is the total number of distinct official languages? | country : country.indepyear , country.name , country.code , country.continent , country.governmentform , country.* | countrylanguage : countrylanguage.isofficial , countrylanguage.language , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.indepyear",
      "country.name",
      "country.code",
      "country.continent",
      "country.governmentform",
      "country.*",
      "countrylanguage.isofficial",
      "countrylanguage.language",
      "countrylanguage.countrycode",
      "countrylanguage.percentage",
      "countrylanguage.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What are the countries that have greater surface area than any country in Europe? | country : country.continent ( Europe ) , country.surfacearea , country.name , country.code , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.continent",
      "country.surfacearea",
      "country.name",
      "country.code",
      "country.region",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Which countries have greater area than that of any country in Europe? | country : country.continent ( Europe ) , country.surfacearea , country.name , country.code , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.continent",
      "country.surfacearea",
      "country.name",
      "country.code",
      "country.region",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What are the African countries that have a  population less than any country in Asia? | country : country.continent ( Africa , Asia ) , country.population , country.name , country.code , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.continent",
      "country.population",
      "country.name",
      "country.code",
      "country.region",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Which African countries have a smaller population than that of any country in Asia? | country : country.continent ( Africa , Asia ) , country.population , country.name , country.code , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.continent",
      "country.population",
      "country.name",
      "country.code",
      "country.region",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Which Asian countries have a population that is larger than any country in Africa? | country : country.continent ( Africa , Asia ) , country.population , country.name , country.code , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.continent",
      "country.population",
      "country.name",
      "country.code",
      "country.region",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What are the Asian countries which have a population larger than that of any country in Africa? | country : country.continent ( Africa , Asia ) , country.population , country.name , country.code , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.continent",
      "country.population",
      "country.name",
      "country.code",
      "country.region",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What are the country codes for countries that do not speak English? | countrylanguage : countrylanguage.language ( English ) , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | country : country.name , country.code , country.continent , country.region , country.population , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.countrycode",
      "countrylanguage.percentage",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "country.name",
      "country.code",
      "country.continent",
      "country.region",
      "country.population",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Return the country codes for countries that do not speak English. | countrylanguage : countrylanguage.language ( English ) , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | country : country.code , country.name , country.continent , country.region , country.population , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.countrycode",
      "countrylanguage.percentage",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "country.code",
      "country.name",
      "country.continent",
      "country.region",
      "country.population",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What are the country codes of countries where people use languages other than English? | countrylanguage : countrylanguage.language ( English ) , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | country : country.name , country.code , country.continent , country.region , country.population , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.countrycode",
      "countrylanguage.percentage",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*",
      "country.name",
      "country.code",
      "country.continent",
      "country.region",
      "country.population",
      "country.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Give the country codes for countries in which people speak langauges that are not English. | countrylanguage : countrylanguage.language ( English ) , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | country : country.code , country.name , country.continent , country.region , country.population , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.countrycode",
      "countrylanguage.percentage",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*",
      "country.code",
      "country.name",
      "country.continent",
      "country.region",
      "country.population",
      "country.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What are the codes of the countries that do not speak English and whose government forms are not Republic? | countrylanguage : countrylanguage.language ( English ) , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | country : country.governmentform ( Republic ) , country.code , country.name , country.continent , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.countrycode",
      "countrylanguage.percentage",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "country.governmentform",
      "country.code",
      "country.name",
      "country.continent",
      "country.region",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Return the codes of countries that do not speak English and do not have Republics for governments. | country : country.governmentform ( Republic ) , country.code , country.name , country.continent , country.region , country.* | countrylanguage : countrylanguage.language ( English ) , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.governmentform",
      "country.code",
      "country.name",
      "country.continent",
      "country.region",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.countrycode",
      "countrylanguage.percentage",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Which cities are in European countries where English is not the official language? | country : country.continent ( Europe ) , country.name , country.code , country.region , country.population , country.* | countrylanguage : countrylanguage.language ( English ) , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | city : city.name , city.countrycode , city.id , city.population , city.district , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.continent",
      "country.name",
      "country.code",
      "country.region",
      "country.population",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.isofficial",
      "countrylanguage.countrycode",
      "countrylanguage.percentage",
      "countrylanguage.*",
      "city.name",
      "city.countrycode",
      "city.id",
      "city.population",
      "city.district",
      "city.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What are the names of cities in Europe for which English is not the official language? | city : city.name , city.id , city.district , city.population , city.countrycode , city.* | country : country.continent ( Europe ) , country.name , country.code , country.region , country.population , country.* | countrylanguage : countrylanguage.language ( English ) , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*",
    "output_sequence": " | ",
    "tc_original": [
      "city.name",
      "city.id",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*",
      "country.continent",
      "country.name",
      "country.code",
      "country.region",
      "country.population",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.isofficial",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Which unique cities are in Asian countries where Chinese is the official language ? | country : country.continent ( Asia ) , country.name , country.code , country.region , country.population , country.* | countrylanguage : countrylanguage.language ( Chinese ) , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | city : city.name , city.id , city.countrycode , city.district , city.population , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.continent",
      "country.name",
      "country.code",
      "country.region",
      "country.population",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.isofficial",
      "countrylanguage.countrycode",
      "countrylanguage.percentage",
      "countrylanguage.*",
      "city.name",
      "city.id",
      "city.countrycode",
      "city.district",
      "city.population",
      "city.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Return the different names of cities that are in Asia and for which Chinese is the official language. | city : city.name , city.id , city.district , city.population , city.countrycode , city.* | country : country.continent ( Asia ) , country.name , country.code , country.region , country.population , country.* | countrylanguage : countrylanguage.language ( Chinese ) , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*",
    "output_sequence": " | ",
    "tc_original": [
      "city.name",
      "city.id",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*",
      "country.continent",
      "country.name",
      "country.code",
      "country.region",
      "country.population",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.isofficial",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What are the name, independence year, and surface area of the country with the smallest population? | country : country.surfacearea , country.indepyear , country.name , country.population , country.code , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.district , city.population , city.name ( Independence ) , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.surfacearea",
      "country.indepyear",
      "country.name",
      "country.population",
      "country.code",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.district",
      "city.population",
      "city.name",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Give the name, year of independence, and surface area of the country that has the lowest population. | country : country.indepyear , country.surfacearea , country.name , country.population , country.code , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.district , city.population , city.name ( Independence ) , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.indepyear",
      "country.surfacearea",
      "country.name",
      "country.population",
      "country.code",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.district",
      "city.population",
      "city.name",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What are the population, name and leader of the country with the largest area? | country : country.headofstate , country.name , country.surfacearea , country.population , country.localname , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.headofstate",
      "country.name",
      "country.surfacearea",
      "country.population",
      "country.localname",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Give the name, population, and head of state for the country that has the largest area. | country : country.headofstate , country.name , country.surfacearea , country.population , country.continent , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.headofstate",
      "country.name",
      "country.surfacearea",
      "country.population",
      "country.continent",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages. | country : country.name , country.continent , country.code , country.region , country.population , country.* | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.continent",
      "country.code",
      "country.region",
      "country.population",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.countrycode",
      "countrylanguage.percentage",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak? | country : country.name , country.code , country.continent , country.region , country.population , country.* | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.code",
      "country.continent",
      "country.region",
      "country.population",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.countrycode",
      "countrylanguage.percentage",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Find the number of cities in each district whose population is greater than the average population of cities? | city : city.population , city.district , city.id , city.name , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | country : country.code , country.name , country.continent , country.region , country.population , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "city.population",
      "city.district",
      "city.id",
      "city.name",
      "city.countrycode",
      "city.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "country.code",
      "country.name",
      "country.continent",
      "country.region",
      "country.population",
      "country.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "How many cities in each district have a population that is above the average population across all cities? | city : city.population , city.district , city.id , city.name , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | country : country.code , country.name , country.continent , country.region , country.population , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "city.population",
      "city.district",
      "city.id",
      "city.name",
      "city.countrycode",
      "city.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "country.code",
      "country.name",
      "country.continent",
      "country.region",
      "country.population",
      "country.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Find the government form name and total population for each government form whose average life expectancy is longer than 72. | country : country.lifeexpectancy , country.governmentform , country.name , country.population , country.localname , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.lifeexpectancy",
      "country.governmentform",
      "country.name",
      "country.population",
      "country.localname",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72? | country : country.lifeexpectancy , country.governmentform , country.population , country.name , country.code , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.lifeexpectancy",
      "country.governmentform",
      "country.population",
      "country.name",
      "country.code",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72? | country : country.lifeexpectancy , country.continent , country.population , country.code , country.name , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.lifeexpectancy",
      "country.continent",
      "country.population",
      "country.code",
      "country.name",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72? | country : country.lifeexpectancy , country.continent , country.population , country.name , country.code , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.population , city.id , city.name , city.district , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.lifeexpectancy",
      "country.continent",
      "country.population",
      "country.name",
      "country.code",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.population",
      "city.id",
      "city.name",
      "city.district",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What are the names and areas of countries with the top 5 largest area? | country : country.surfacearea , country.name , country.continent , country.region , country.code , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.surfacearea",
      "country.name",
      "country.continent",
      "country.region",
      "country.code",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Return the names and surface areas of the 5 largest countries. | country : country.surfacearea , country.name , country.continent , country.region , country.population , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.surfacearea",
      "country.name",
      "country.continent",
      "country.region",
      "country.population",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What are names of countries with the top 3 largest population? | country : country.name , country.population , country.code , country.continent , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.population",
      "country.code",
      "country.continent",
      "country.region",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Return the names of the 3 most populated countries. | country : country.name , country.population , country.code , country.continent , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.population",
      "country.code",
      "country.continent",
      "country.region",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What are the names of the nations with the 3 lowest populations? | country : country.name , country.population , country.code , country.continent , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.population",
      "country.code",
      "country.continent",
      "country.region",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Return the names of the 3 countries with the fewest people. | country : country.name , country.population , country.code , country.continent , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.population",
      "country.code",
      "country.continent",
      "country.region",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "how many countries are in Asia? | country : country.continent ( Asia ) , country.name , country.code , country.region , country.population , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.continent",
      "country.name",
      "country.code",
      "country.region",
      "country.population",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Count the number of countries in Asia. | country : country.continent ( Asia ) , country.code , country.name , country.region , country.population , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.continent",
      "country.code",
      "country.name",
      "country.region",
      "country.population",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What are the names of the countries that are in the continent of Europe and have a population of 80000? | country : country.continent ( Europe ) , country.name , country.population , country.code , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.continent",
      "country.name",
      "country.population",
      "country.code",
      "country.region",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Give the names of countries that are in Europe and have a population equal to 80000. | country : country.continent ( Europe ) , country.name , country.population , country.code , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.continent",
      "country.name",
      "country.population",
      "country.code",
      "country.region",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ? | country : country.continent ( North America ) , country.surfacearea , country.population , country.region ( North America ) , country.code , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.continent",
      "country.surfacearea",
      "country.population",
      "country.region",
      "country.code",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 . | country : country.surfacearea , country.population , country.continent ( North America ) , country.region ( North America ) , country.name , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.surfacearea",
      "country.population",
      "country.continent",
      "country.region",
      "country.name",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What are the cities whose population is between 160000 and 900000? | city : city.population , city.name , city.id , city.district , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | country : country.code , country.name , country.continent , country.region , country.population , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "city.population",
      "city.name",
      "city.id",
      "city.district",
      "city.countrycode",
      "city.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "country.code",
      "country.name",
      "country.continent",
      "country.region",
      "country.population",
      "country.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Return the names of cities that have a population between 160000 and 900000 . | city : city.name , city.population , city.id , city.district , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | country : country.code , country.name , country.continent , country.region , country.population , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "city.name",
      "city.population",
      "city.id",
      "city.district",
      "city.countrycode",
      "city.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "country.code",
      "country.name",
      "country.continent",
      "country.region",
      "country.population",
      "country.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Which language is spoken by the largest number of countries? | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | country : country.code , country.name , country.continent , country.region , country.population , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.countrycode",
      "countrylanguage.percentage",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*",
      "country.code",
      "country.name",
      "country.continent",
      "country.region",
      "country.population",
      "country.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Give the language that is spoken in the most countries. | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | country : country.code , country.name , country.continent , country.region , country.population , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.countrycode",
      "countrylanguage.percentage",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*",
      "country.code",
      "country.name",
      "country.continent",
      "country.region",
      "country.population",
      "country.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What is the language spoken by the largest percentage of people in each country? | countrylanguage : countrylanguage.percentage , countrylanguage.language , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | country : country.name , country.code , country.continent , country.population , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.percentage",
      "countrylanguage.language",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "country.name",
      "country.code",
      "country.continent",
      "country.population",
      "country.region",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each? | countrylanguage : countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.* | country : country.name , country.code , country.continent , country.region , country.population , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.language",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "country.name",
      "country.code",
      "country.continent",
      "country.region",
      "country.population",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What is the total number of countries where Spanish is spoken by the largest percentage of people? | countrylanguage : countrylanguage.language ( Spanish ) , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | country : country.code , country.name , country.continent , country.region , country.population , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*",
      "country.code",
      "country.name",
      "country.continent",
      "country.region",
      "country.population",
      "country.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Count the number of countries for which Spanish is the predominantly spoken language. | countrylanguage : countrylanguage.language ( Spanish ) , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | country : country.code , country.name , country.continent , country.region , country.population , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.countrycode",
      "countrylanguage.percentage",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*",
      "country.code",
      "country.name",
      "country.continent",
      "country.region",
      "country.population",
      "country.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "What are the codes of countries where Spanish is spoken by the largest percentage of people? | countrylanguage : countrylanguage.language ( Spanish ) , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | country : country.code , country.name , country.continent , country.region , country.population , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*",
      "country.code",
      "country.name",
      "country.continent",
      "country.region",
      "country.population",
      "country.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "Return the codes of countries for which Spanish is the predominantly spoken language. | countrylanguage : countrylanguage.language ( Spanish ) , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | country : country.name , country.code , country.continent , country.region , country.population , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.countrycode",
      "countrylanguage.percentage",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*",
      "country.name",
      "country.code",
      "country.continent",
      "country.region",
      "country.population",
      "country.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "How many conductors are there? | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work , conductor.* | performance : performance.type , performance.date , performance.share , performance.official_ratings_(millions) , performance.performance_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.* | orchestra : orchestra.orchestra , orchestra.conductor_id , orchestra.orchestra_id , orchestra.record_company , orchestra.year_of_founded , orchestra.*",
    "output_sequence": " | ",
    "tc_original": [
      "conductor.conductor_id",
      "conductor.name",
      "conductor.age",
      "conductor.nationality",
      "conductor.year_of_work",
      "conductor.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.official_ratings_(millions)",
      "performance.performance_id",
      "performance.*",
      "show.result",
      "show.attendance",
      "show.show_id",
      "show.performance_id",
      "show.if_first_show",
      "show.*",
      "orchestra.orchestra",
      "orchestra.conductor_id",
      "orchestra.orchestra_id",
      "orchestra.record_company",
      "orchestra.year_of_founded",
      "orchestra.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "Count the number of conductors. | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work , conductor.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.* | orchestra : orchestra.orchestra , orchestra.conductor_id , orchestra.orchestra_id , orchestra.record_company , orchestra.year_of_founded , orchestra.*",
    "output_sequence": " | ",
    "tc_original": [
      "conductor.conductor_id",
      "conductor.name",
      "conductor.age",
      "conductor.nationality",
      "conductor.year_of_work",
      "conductor.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "show.result",
      "show.attendance",
      "show.show_id",
      "show.performance_id",
      "show.if_first_show",
      "show.*",
      "orchestra.orchestra",
      "orchestra.conductor_id",
      "orchestra.orchestra_id",
      "orchestra.record_company",
      "orchestra.year_of_founded",
      "orchestra.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "List the names of conductors in ascending order of age. | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.*",
    "output_sequence": " | ",
    "tc_original": [
      "conductor.name",
      "conductor.age",
      "conductor.nationality",
      "conductor.conductor_id",
      "conductor.year_of_work",
      "conductor.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "show.result",
      "show.attendance",
      "show.show_id",
      "show.performance_id",
      "show.if_first_show",
      "show.*",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.conductor_id",
      "orchestra.record_company",
      "orchestra.year_of_founded",
      "orchestra.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "What are the names of conductors, ordered by age? | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.*",
    "output_sequence": " | ",
    "tc_original": [
      "conductor.name",
      "conductor.age",
      "conductor.nationality",
      "conductor.conductor_id",
      "conductor.year_of_work",
      "conductor.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "show.result",
      "show.attendance",
      "show.show_id",
      "show.performance_id",
      "show.if_first_show",
      "show.*",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.conductor_id",
      "orchestra.record_company",
      "orchestra.year_of_founded",
      "orchestra.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "What are the names of conductors whose nationalities are not \"USA\"? | conductor : conductor.nationality ( USA ) , conductor.name , conductor.conductor_id , conductor.age , conductor.year_of_work , conductor.* | performance : performance.type , performance.date , performance.share , performance.official_ratings_(millions) , performance.performance_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.*",
    "output_sequence": " | ",
    "tc_original": [
      "conductor.nationality",
      "conductor.name",
      "conductor.conductor_id",
      "conductor.age",
      "conductor.year_of_work",
      "conductor.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.official_ratings_(millions)",
      "performance.performance_id",
      "performance.*",
      "show.result",
      "show.attendance",
      "show.show_id",
      "show.performance_id",
      "show.if_first_show",
      "show.*",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.conductor_id",
      "orchestra.record_company",
      "orchestra.year_of_founded",
      "orchestra.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "Return the names of conductors that do not have the nationality \"USA\". | conductor : conductor.nationality ( USA ) , conductor.name , conductor.conductor_id , conductor.age , conductor.year_of_work , conductor.* | performance : performance.type , performance.date , performance.share , performance.official_ratings_(millions) , performance.performance_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.*",
    "output_sequence": " | ",
    "tc_original": [
      "conductor.nationality",
      "conductor.name",
      "conductor.conductor_id",
      "conductor.age",
      "conductor.year_of_work",
      "conductor.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.official_ratings_(millions)",
      "performance.performance_id",
      "performance.*",
      "show.result",
      "show.attendance",
      "show.show_id",
      "show.performance_id",
      "show.if_first_show",
      "show.*",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.conductor_id",
      "orchestra.record_company",
      "orchestra.year_of_founded",
      "orchestra.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "What are the record companies of orchestras in descending order of years in which they were founded? | orchestra : orchestra.year_of_founded , orchestra.record_company , orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*",
    "output_sequence": " | ",
    "tc_original": [
      "orchestra.year_of_founded",
      "orchestra.record_company",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.conductor_id",
      "orchestra.*",
      "conductor.name",
      "conductor.age",
      "conductor.nationality",
      "conductor.conductor_id",
      "conductor.year_of_work",
      "conductor.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "show.result",
      "show.attendance",
      "show.show_id",
      "show.performance_id",
      "show.if_first_show",
      "show.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "Return the record companies of orchestras, sorted descending by the years in which they were founded. | orchestra : orchestra.year_of_founded , orchestra.record_company , orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | performance : performance.type , performance.date , performance.share , performance.official_ratings_(millions) , performance.performance_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*",
    "output_sequence": " | ",
    "tc_original": [
      "orchestra.year_of_founded",
      "orchestra.record_company",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.conductor_id",
      "orchestra.*",
      "conductor.name",
      "conductor.age",
      "conductor.nationality",
      "conductor.conductor_id",
      "conductor.year_of_work",
      "conductor.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.official_ratings_(millions)",
      "performance.performance_id",
      "performance.*",
      "show.result",
      "show.attendance",
      "show.show_id",
      "show.performance_id",
      "show.if_first_show",
      "show.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "What is the average attendance of shows? | show : show.attendance , show.result , show.show_id , show.performance_id , show.if_first_show , show.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.*",
    "output_sequence": " | ",
    "tc_original": [
      "show.attendance",
      "show.result",
      "show.show_id",
      "show.performance_id",
      "show.if_first_show",
      "show.*",
      "conductor.name",
      "conductor.age",
      "conductor.nationality",
      "conductor.conductor_id",
      "conductor.year_of_work",
      "conductor.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.conductor_id",
      "orchestra.record_company",
      "orchestra.year_of_founded",
      "orchestra.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "Return the average attendance across all shows. | show : show.attendance , show.result , show.show_id , show.performance_id , show.if_first_show , show.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.*",
    "output_sequence": " | ",
    "tc_original": [
      "show.attendance",
      "show.result",
      "show.show_id",
      "show.performance_id",
      "show.if_first_show",
      "show.*",
      "conductor.name",
      "conductor.age",
      "conductor.nationality",
      "conductor.conductor_id",
      "conductor.year_of_work",
      "conductor.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.conductor_id",
      "orchestra.record_company",
      "orchestra.year_of_founded",
      "orchestra.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "What are the maximum and minimum share of performances whose type is not \"Live final\". | performance : performance.type ( Live final ) , performance.share , performance.performance_id , performance.date , performance.official_ratings_(millions) , performance.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | show : show.result , show.attendance , show.performance_id , show.show_id , show.if_first_show , show.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.*",
    "output_sequence": " | ",
    "tc_original": [
      "performance.type",
      "performance.share",
      "performance.performance_id",
      "performance.date",
      "performance.official_ratings_(millions)",
      "performance.*",
      "conductor.name",
      "conductor.age",
      "conductor.nationality",
      "conductor.conductor_id",
      "conductor.year_of_work",
      "conductor.*",
      "show.result",
      "show.attendance",
      "show.performance_id",
      "show.show_id",
      "show.if_first_show",
      "show.*",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.conductor_id",
      "orchestra.record_company",
      "orchestra.year_of_founded",
      "orchestra.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "Return the maximum and minimum shares for performances that do not have the type \"Live final\". | performance : performance.type ( Live final ) , performance.share , performance.performance_id , performance.date , performance.official_ratings_(millions) , performance.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | show : show.result , show.attendance , show.performance_id , show.show_id , show.if_first_show , show.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.*",
    "output_sequence": " | ",
    "tc_original": [
      "performance.type",
      "performance.share",
      "performance.performance_id",
      "performance.date",
      "performance.official_ratings_(millions)",
      "performance.*",
      "conductor.name",
      "conductor.age",
      "conductor.nationality",
      "conductor.conductor_id",
      "conductor.year_of_work",
      "conductor.*",
      "show.result",
      "show.attendance",
      "show.performance_id",
      "show.show_id",
      "show.if_first_show",
      "show.*",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.conductor_id",
      "orchestra.record_company",
      "orchestra.year_of_founded",
      "orchestra.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "How many different nationalities do conductors have? | conductor : conductor.nationality , conductor.name , conductor.age , conductor.conductor_id , conductor.year_of_work , conductor.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.*",
    "output_sequence": " | ",
    "tc_original": [
      "conductor.nationality",
      "conductor.name",
      "conductor.age",
      "conductor.conductor_id",
      "conductor.year_of_work",
      "conductor.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "show.result",
      "show.attendance",
      "show.show_id",
      "show.performance_id",
      "show.if_first_show",
      "show.*",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.conductor_id",
      "orchestra.record_company",
      "orchestra.year_of_founded",
      "orchestra.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "Count the number of different nationalities of conductors. | conductor : conductor.nationality , conductor.name , conductor.age , conductor.conductor_id , conductor.year_of_work , conductor.* | performance : performance.type , performance.date , performance.share , performance.official_ratings_(millions) , performance.performance_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.*",
    "output_sequence": " | ",
    "tc_original": [
      "conductor.nationality",
      "conductor.name",
      "conductor.age",
      "conductor.conductor_id",
      "conductor.year_of_work",
      "conductor.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.official_ratings_(millions)",
      "performance.performance_id",
      "performance.*",
      "show.result",
      "show.attendance",
      "show.show_id",
      "show.performance_id",
      "show.if_first_show",
      "show.*",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.conductor_id",
      "orchestra.record_company",
      "orchestra.year_of_founded",
      "orchestra.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "List names of conductors in descending order of years of work. | conductor : conductor.year_of_work , conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.*",
    "output_sequence": " | ",
    "tc_original": [
      "conductor.year_of_work",
      "conductor.name",
      "conductor.age",
      "conductor.nationality",
      "conductor.conductor_id",
      "conductor.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "show.result",
      "show.attendance",
      "show.show_id",
      "show.performance_id",
      "show.if_first_show",
      "show.*",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.conductor_id",
      "orchestra.record_company",
      "orchestra.year_of_founded",
      "orchestra.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "What are the names of conductors, sorted descending by the number of years they have worked? | conductor : conductor.year_of_work , conductor.name , conductor.conductor_id , conductor.age , conductor.nationality , conductor.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.*",
    "output_sequence": " | ",
    "tc_original": [
      "conductor.year_of_work",
      "conductor.name",
      "conductor.conductor_id",
      "conductor.age",
      "conductor.nationality",
      "conductor.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "show.result",
      "show.attendance",
      "show.show_id",
      "show.performance_id",
      "show.if_first_show",
      "show.*",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.conductor_id",
      "orchestra.record_company",
      "orchestra.year_of_founded",
      "orchestra.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "List the name of the conductor with the most years of work. | conductor : conductor.year_of_work , conductor.name , conductor.conductor_id , conductor.age , conductor.nationality , conductor.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.*",
    "output_sequence": " | ",
    "tc_original": [
      "conductor.year_of_work",
      "conductor.name",
      "conductor.conductor_id",
      "conductor.age",
      "conductor.nationality",
      "conductor.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "show.result",
      "show.attendance",
      "show.show_id",
      "show.performance_id",
      "show.if_first_show",
      "show.*",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.conductor_id",
      "orchestra.record_company",
      "orchestra.year_of_founded",
      "orchestra.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "What is the name of the conductor who has worked the greatest number of years? | conductor : conductor.year_of_work , conductor.name , conductor.conductor_id , conductor.age , conductor.nationality , conductor.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.*",
    "output_sequence": " | ",
    "tc_original": [
      "conductor.year_of_work",
      "conductor.name",
      "conductor.conductor_id",
      "conductor.age",
      "conductor.nationality",
      "conductor.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "show.result",
      "show.attendance",
      "show.show_id",
      "show.performance_id",
      "show.if_first_show",
      "show.*",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.conductor_id",
      "orchestra.record_company",
      "orchestra.year_of_founded",
      "orchestra.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "Show the names of conductors and the orchestras they have conducted. | conductor : conductor.name , conductor.conductor_id , conductor.age , conductor.nationality , conductor.year_of_work , conductor.* | orchestra : orchestra.orchestra , orchestra.conductor_id , orchestra.orchestra_id , orchestra.record_company , orchestra.year_of_founded , orchestra.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*",
    "output_sequence": " | ",
    "tc_original": [
      "conductor.name",
      "conductor.conductor_id",
      "conductor.age",
      "conductor.nationality",
      "conductor.year_of_work",
      "conductor.*",
      "orchestra.orchestra",
      "orchestra.conductor_id",
      "orchestra.orchestra_id",
      "orchestra.record_company",
      "orchestra.year_of_founded",
      "orchestra.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "show.result",
      "show.attendance",
      "show.show_id",
      "show.performance_id",
      "show.if_first_show",
      "show.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "What are the names of conductors as well as the corresonding orchestras that they have conducted? | conductor : conductor.name , conductor.conductor_id , conductor.age , conductor.nationality , conductor.year_of_work , conductor.* | orchestra : orchestra.orchestra , orchestra.conductor_id , orchestra.orchestra_id , orchestra.record_company , orchestra.year_of_founded , orchestra.* | performance : performance.type , performance.date , performance.share , performance.orchestra_id , performance.performance_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*",
    "output_sequence": " | ",
    "tc_original": [
      "conductor.name",
      "conductor.conductor_id",
      "conductor.age",
      "conductor.nationality",
      "conductor.year_of_work",
      "conductor.*",
      "orchestra.orchestra",
      "orchestra.conductor_id",
      "orchestra.orchestra_id",
      "orchestra.record_company",
      "orchestra.year_of_founded",
      "orchestra.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.orchestra_id",
      "performance.performance_id",
      "performance.*",
      "show.result",
      "show.attendance",
      "show.show_id",
      "show.performance_id",
      "show.if_first_show",
      "show.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "Show the names of conductors that have conducted more than one orchestras. | conductor : conductor.name , conductor.conductor_id , conductor.age , conductor.nationality , conductor.year_of_work , conductor.* | orchestra : orchestra.conductor_id , orchestra.orchestra , orchestra.orchestra_id , orchestra.record_company , orchestra.year_of_founded , orchestra.* | performance : performance.type , performance.date , performance.share , performance.orchestra_id , performance.performance_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*",
    "output_sequence": " | ",
    "tc_original": [
      "conductor.name",
      "conductor.conductor_id",
      "conductor.age",
      "conductor.nationality",
      "conductor.year_of_work",
      "conductor.*",
      "orchestra.conductor_id",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.record_company",
      "orchestra.year_of_founded",
      "orchestra.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.orchestra_id",
      "performance.performance_id",
      "performance.*",
      "show.result",
      "show.attendance",
      "show.show_id",
      "show.performance_id",
      "show.if_first_show",
      "show.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "What are the names of conductors who have conducted at more than one orchestra? | conductor : conductor.name , conductor.conductor_id , conductor.age , conductor.nationality , conductor.year_of_work , conductor.* | orchestra : orchestra.conductor_id , orchestra.orchestra , orchestra.orchestra_id , orchestra.record_company , orchestra.year_of_founded , orchestra.* | performance : performance.orchestra_id , performance.type , performance.date , performance.share , performance.performance_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*",
    "output_sequence": " | ",
    "tc_original": [
      "conductor.name",
      "conductor.conductor_id",
      "conductor.age",
      "conductor.nationality",
      "conductor.year_of_work",
      "conductor.*",
      "orchestra.conductor_id",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.record_company",
      "orchestra.year_of_founded",
      "orchestra.*",
      "performance.orchestra_id",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.*",
      "show.result",
      "show.attendance",
      "show.show_id",
      "show.performance_id",
      "show.if_first_show",
      "show.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "Show the name of the conductor that has conducted the most number of orchestras. | conductor : conductor.name , conductor.conductor_id , conductor.age , conductor.nationality , conductor.year_of_work , conductor.* | orchestra : orchestra.conductor_id , orchestra.orchestra , orchestra.orchestra_id , orchestra.record_company , orchestra.year_of_founded , orchestra.* | performance : performance.type , performance.date , performance.share , performance.orchestra_id , performance.official_ratings_(millions) , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*",
    "output_sequence": " | ",
    "tc_original": [
      "conductor.name",
      "conductor.conductor_id",
      "conductor.age",
      "conductor.nationality",
      "conductor.year_of_work",
      "conductor.*",
      "orchestra.conductor_id",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.record_company",
      "orchestra.year_of_founded",
      "orchestra.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.orchestra_id",
      "performance.official_ratings_(millions)",
      "performance.*",
      "show.result",
      "show.attendance",
      "show.show_id",
      "show.performance_id",
      "show.if_first_show",
      "show.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "What is the name of the conductor who has conducted the most orchestras? | conductor : conductor.name , conductor.conductor_id , conductor.age , conductor.nationality , conductor.year_of_work , conductor.* | orchestra : orchestra.conductor_id , orchestra.orchestra , orchestra.orchestra_id , orchestra.record_company , orchestra.year_of_founded , orchestra.* | performance : performance.type , performance.date , performance.share , performance.orchestra_id , performance.performance_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*",
    "output_sequence": " | ",
    "tc_original": [
      "conductor.name",
      "conductor.conductor_id",
      "conductor.age",
      "conductor.nationality",
      "conductor.year_of_work",
      "conductor.*",
      "orchestra.conductor_id",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.record_company",
      "orchestra.year_of_founded",
      "orchestra.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.orchestra_id",
      "performance.performance_id",
      "performance.*",
      "show.result",
      "show.attendance",
      "show.show_id",
      "show.performance_id",
      "show.if_first_show",
      "show.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "Please show the name of the conductor that has conducted orchestras founded after 2008. | conductor : conductor.name , conductor.conductor_id , conductor.age , conductor.nationality , conductor.year_of_work , conductor.* | orchestra : orchestra.year_of_founded , orchestra.conductor_id , orchestra.orchestra , orchestra.orchestra_id , orchestra.record_company , orchestra.* | performance : performance.type , performance.date , performance.share , performance.official_ratings_(millions) , performance.performance_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*",
    "output_sequence": " | ",
    "tc_original": [
      "conductor.name",
      "conductor.conductor_id",
      "conductor.age",
      "conductor.nationality",
      "conductor.year_of_work",
      "conductor.*",
      "orchestra.year_of_founded",
      "orchestra.conductor_id",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.record_company",
      "orchestra.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.official_ratings_(millions)",
      "performance.performance_id",
      "performance.*",
      "show.result",
      "show.attendance",
      "show.show_id",
      "show.performance_id",
      "show.if_first_show",
      "show.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "What are the names of conductors who have conducted orchestras founded after the year 2008? | conductor : conductor.name , conductor.conductor_id , conductor.age , conductor.nationality , conductor.year_of_work , conductor.* | orchestra : orchestra.year_of_founded , orchestra.orchestra , orchestra.conductor_id , orchestra.orchestra_id , orchestra.record_company , orchestra.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*",
    "output_sequence": " | ",
    "tc_original": [
      "conductor.name",
      "conductor.conductor_id",
      "conductor.age",
      "conductor.nationality",
      "conductor.year_of_work",
      "conductor.*",
      "orchestra.year_of_founded",
      "orchestra.orchestra",
      "orchestra.conductor_id",
      "orchestra.orchestra_id",
      "orchestra.record_company",
      "orchestra.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "show.result",
      "show.attendance",
      "show.show_id",
      "show.performance_id",
      "show.if_first_show",
      "show.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "Please show the different record companies and the corresponding number of orchestras. | orchestra : orchestra.record_company , orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.year_of_founded , orchestra.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*",
    "output_sequence": " | ",
    "tc_original": [
      "orchestra.record_company",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.conductor_id",
      "orchestra.year_of_founded",
      "orchestra.*",
      "conductor.name",
      "conductor.age",
      "conductor.nationality",
      "conductor.conductor_id",
      "conductor.year_of_work",
      "conductor.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "show.result",
      "show.attendance",
      "show.show_id",
      "show.performance_id",
      "show.if_first_show",
      "show.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "How many orchestras does each record company manage? | orchestra : orchestra.record_company , orchestra.orchestra , orchestra.year_of_founded , orchestra.orchestra_id , orchestra.conductor_id , orchestra.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*",
    "output_sequence": " | ",
    "tc_original": [
      "orchestra.record_company",
      "orchestra.orchestra",
      "orchestra.year_of_founded",
      "orchestra.orchestra_id",
      "orchestra.conductor_id",
      "orchestra.*",
      "conductor.name",
      "conductor.age",
      "conductor.nationality",
      "conductor.conductor_id",
      "conductor.year_of_work",
      "conductor.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "show.result",
      "show.attendance",
      "show.show_id",
      "show.performance_id",
      "show.if_first_show",
      "show.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "Please show the record formats of orchestras in ascending order of count. | orchestra : orchestra.major_record_format , orchestra.orchestra , orchestra.record_company , orchestra.orchestra_id , orchestra.conductor_id , orchestra.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*",
    "output_sequence": " | ",
    "tc_original": [
      "orchestra.major_record_format",
      "orchestra.orchestra",
      "orchestra.record_company",
      "orchestra.orchestra_id",
      "orchestra.conductor_id",
      "orchestra.*",
      "conductor.name",
      "conductor.age",
      "conductor.nationality",
      "conductor.conductor_id",
      "conductor.year_of_work",
      "conductor.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "show.result",
      "show.attendance",
      "show.show_id",
      "show.performance_id",
      "show.if_first_show",
      "show.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "What are the major record formats of orchestras, sorted by their frequency? | orchestra : orchestra.major_record_format , orchestra.orchestra , orchestra.orchestra_id , orchestra.record_company , orchestra.conductor_id , orchestra.* | performance : performance.orchestra_id , performance.type , performance.date , performance.share , performance.official_ratings_(millions) , performance.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*",
    "output_sequence": " | ",
    "tc_original": [
      "orchestra.major_record_format",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.record_company",
      "orchestra.conductor_id",
      "orchestra.*",
      "performance.orchestra_id",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.official_ratings_(millions)",
      "performance.*",
      "conductor.name",
      "conductor.age",
      "conductor.nationality",
      "conductor.conductor_id",
      "conductor.year_of_work",
      "conductor.*",
      "show.result",
      "show.attendance",
      "show.show_id",
      "show.performance_id",
      "show.if_first_show",
      "show.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "List the record company shared by the most number of orchestras. | orchestra : orchestra.record_company , orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.year_of_founded , orchestra.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*",
    "output_sequence": " | ",
    "tc_original": [
      "orchestra.record_company",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.conductor_id",
      "orchestra.year_of_founded",
      "orchestra.*",
      "conductor.name",
      "conductor.age",
      "conductor.nationality",
      "conductor.conductor_id",
      "conductor.year_of_work",
      "conductor.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "show.result",
      "show.attendance",
      "show.show_id",
      "show.performance_id",
      "show.if_first_show",
      "show.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "What is the record company used by the greatest number of orchestras? | orchestra : orchestra.record_company , orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.year_of_founded , orchestra.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*",
    "output_sequence": " | ",
    "tc_original": [
      "orchestra.record_company",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.conductor_id",
      "orchestra.year_of_founded",
      "orchestra.*",
      "conductor.name",
      "conductor.age",
      "conductor.nationality",
      "conductor.conductor_id",
      "conductor.year_of_work",
      "conductor.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "show.result",
      "show.attendance",
      "show.show_id",
      "show.performance_id",
      "show.if_first_show",
      "show.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "List the names of orchestras that have no performance. | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.record_company , orchestra.year_of_founded , orchestra.conductor_id , orchestra.* | performance : performance.orchestra_id , performance.type , performance.date , performance.share , performance.performance_id , performance.* | show : show.result , show.attendance , show.performance_id , show.show_id , show.if_first_show , show.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.*",
    "output_sequence": " | ",
    "tc_original": [
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.record_company",
      "orchestra.year_of_founded",
      "orchestra.conductor_id",
      "orchestra.*",
      "performance.orchestra_id",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.*",
      "show.result",
      "show.attendance",
      "show.performance_id",
      "show.show_id",
      "show.if_first_show",
      "show.*",
      "conductor.name",
      "conductor.age",
      "conductor.nationality",
      "conductor.conductor_id",
      "conductor.year_of_work",
      "conductor.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "What are the orchestras that do not have any performances? | orchestra : orchestra.orchestra , orchestra.year_of_founded , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.* | performance : performance.orchestra_id , performance.type , performance.date , performance.share , performance.performance_id , performance.* | show : show.result , show.attendance , show.performance_id , show.show_id , show.if_first_show , show.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.*",
    "output_sequence": " | ",
    "tc_original": [
      "orchestra.orchestra",
      "orchestra.year_of_founded",
      "orchestra.orchestra_id",
      "orchestra.conductor_id",
      "orchestra.record_company",
      "orchestra.*",
      "performance.orchestra_id",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.*",
      "show.result",
      "show.attendance",
      "show.performance_id",
      "show.show_id",
      "show.if_first_show",
      "show.*",
      "conductor.name",
      "conductor.age",
      "conductor.nationality",
      "conductor.conductor_id",
      "conductor.year_of_work",
      "conductor.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "Show the record companies shared by orchestras founded before 2003 and after 2003. | orchestra : orchestra.year_of_founded , orchestra.record_company , orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.year_of_work , conductor.conductor_id , conductor.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*",
    "output_sequence": " | ",
    "tc_original": [
      "orchestra.year_of_founded",
      "orchestra.record_company",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.conductor_id",
      "orchestra.*",
      "conductor.name",
      "conductor.age",
      "conductor.nationality",
      "conductor.year_of_work",
      "conductor.conductor_id",
      "conductor.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "show.result",
      "show.attendance",
      "show.show_id",
      "show.performance_id",
      "show.if_first_show",
      "show.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003? | orchestra : orchestra.year_of_founded , orchestra.record_company , orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.year_of_work , conductor.conductor_id , conductor.* | performance : performance.type , performance.date , performance.share , performance.official_ratings_(millions) , performance.performance_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*",
    "output_sequence": " | ",
    "tc_original": [
      "orchestra.year_of_founded",
      "orchestra.record_company",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.conductor_id",
      "orchestra.*",
      "conductor.name",
      "conductor.age",
      "conductor.nationality",
      "conductor.year_of_work",
      "conductor.conductor_id",
      "conductor.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.official_ratings_(millions)",
      "performance.performance_id",
      "performance.*",
      "show.result",
      "show.attendance",
      "show.show_id",
      "show.performance_id",
      "show.if_first_show",
      "show.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "Find the number of orchestras whose record format is \"CD\" or \"DVD\". | orchestra : orchestra.major_record_format ( CD , DVD ) , orchestra.orchestra , orchestra.record_company , orchestra.orchestra_id , orchestra.conductor_id , orchestra.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*",
    "output_sequence": " | ",
    "tc_original": [
      "orchestra.major_record_format",
      "orchestra.orchestra",
      "orchestra.record_company",
      "orchestra.orchestra_id",
      "orchestra.conductor_id",
      "orchestra.*",
      "conductor.name",
      "conductor.age",
      "conductor.nationality",
      "conductor.conductor_id",
      "conductor.year_of_work",
      "conductor.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "show.result",
      "show.attendance",
      "show.show_id",
      "show.performance_id",
      "show.if_first_show",
      "show.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "Count the number of orchestras that have CD or DVD as their record format. | orchestra : orchestra.major_record_format ( CD , DVD ) , orchestra.orchestra , orchestra.record_company , orchestra.orchestra_id , orchestra.conductor_id , orchestra.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*",
    "output_sequence": " | ",
    "tc_original": [
      "orchestra.major_record_format",
      "orchestra.orchestra",
      "orchestra.record_company",
      "orchestra.orchestra_id",
      "orchestra.conductor_id",
      "orchestra.*",
      "conductor.name",
      "conductor.age",
      "conductor.nationality",
      "conductor.conductor_id",
      "conductor.year_of_work",
      "conductor.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "show.result",
      "show.attendance",
      "show.show_id",
      "show.performance_id",
      "show.if_first_show",
      "show.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "Show the years in which orchestras that have given more than one performance are founded. | orchestra : orchestra.year_of_founded , orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.* | performance : performance.orchestra_id , performance.performance_id , performance.type , performance.date , performance.share , performance.* | show : show.result , show.attendance , show.performance_id , show.show_id , show.if_first_show , show.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.*",
    "output_sequence": " | ",
    "tc_original": [
      "orchestra.year_of_founded",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.conductor_id",
      "orchestra.record_company",
      "orchestra.*",
      "performance.orchestra_id",
      "performance.performance_id",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.*",
      "show.result",
      "show.attendance",
      "show.performance_id",
      "show.show_id",
      "show.if_first_show",
      "show.*",
      "conductor.name",
      "conductor.age",
      "conductor.nationality",
      "conductor.conductor_id",
      "conductor.year_of_work",
      "conductor.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "What are years of founding for orchestras that have had more than a single performance? | orchestra : orchestra.year_of_founded , orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.* | performance : performance.orchestra_id , performance.type , performance.date , performance.share , performance.performance_id , performance.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | show : show.result , show.attendance , show.performance_id , show.show_id , show.if_first_show , show.*",
    "output_sequence": " | ",
    "tc_original": [
      "orchestra.year_of_founded",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.conductor_id",
      "orchestra.record_company",
      "orchestra.*",
      "performance.orchestra_id",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.*",
      "conductor.name",
      "conductor.age",
      "conductor.nationality",
      "conductor.conductor_id",
      "conductor.year_of_work",
      "conductor.*",
      "show.result",
      "show.attendance",
      "show.performance_id",
      "show.show_id",
      "show.if_first_show",
      "show.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "How many high schoolers are there? | highschooler : highschooler.grade , highschooler.id , highschooler.name , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.grade",
      "highschooler.id",
      "highschooler.name",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "Count the number of high schoolers. | highschooler : highschooler.id , highschooler.name , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.id",
      "highschooler.name",
      "highschooler.grade",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "Show the names and grades of each high schooler. | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.grade",
      "highschooler.id",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "What are the names and grades for each high schooler? | highschooler : highschooler.grade , highschooler.name , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.grade",
      "highschooler.name",
      "highschooler.id",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "Show all the grades of the high schoolers. | highschooler : highschooler.grade , highschooler.id , highschooler.name , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.grade",
      "highschooler.id",
      "highschooler.name",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "What is the grade of each high schooler? | highschooler : highschooler.grade , highschooler.name , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.grade",
      "highschooler.name",
      "highschooler.id",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "What grade is Kyle in? | highschooler : highschooler.name ( Kyle ) , highschooler.grade , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.grade",
      "highschooler.id",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "Return the grade for the high schooler named Kyle. | highschooler : highschooler.name ( Kyle ) , highschooler.grade , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.grade",
      "highschooler.id",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "Show the names of all high schoolers in grade 10. | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.grade",
      "highschooler.id",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "What are the names of all high schoolers in grade 10? | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.grade",
      "highschooler.id",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "Show the ID of the high schooler named Kyle. | highschooler : highschooler.name ( Kyle ) , highschooler.id , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.id",
      "highschooler.grade",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "What is Kyle's id? | highschooler : highschooler.name ( Kyle ) , highschooler.id , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.id",
      "highschooler.grade",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "How many high schoolers are there in grade 9 or 10? | highschooler : highschooler.grade , highschooler.id , highschooler.name , highschooler.* | likes : likes.student_id , likes.liked_id , likes.* | friend : friend.student_id , friend.friend_id , friend.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.grade",
      "highschooler.id",
      "highschooler.name",
      "highschooler.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "Count the number of high schoolers in grades 9 or 10. | highschooler : highschooler.grade , highschooler.id , highschooler.name , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.grade",
      "highschooler.id",
      "highschooler.name",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "Show the number of high schoolers for each grade. | highschooler : highschooler.grade , highschooler.id , highschooler.name , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.grade",
      "highschooler.id",
      "highschooler.name",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "How many high schoolers are in each grade? | highschooler : highschooler.grade , highschooler.id , highschooler.name , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.grade",
      "highschooler.id",
      "highschooler.name",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "Which grade has the most high schoolers? | highschooler : highschooler.grade , highschooler.id , highschooler.name , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.grade",
      "highschooler.id",
      "highschooler.name",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "Return the grade that has the greatest number of high schoolers. | highschooler : highschooler.grade , highschooler.id , highschooler.name , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.grade",
      "highschooler.id",
      "highschooler.name",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "Show me all grades that have at least 4 students. | highschooler : highschooler.grade , highschooler.id , highschooler.name , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.grade",
      "highschooler.id",
      "highschooler.name",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "Which grades have 4 or more high schoolers? | highschooler : highschooler.grade , highschooler.id , highschooler.name , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.grade",
      "highschooler.id",
      "highschooler.name",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "Show the student IDs and numbers of friends corresponding to each. | friend : friend.student_id , friend.friend_id , friend.* | highschooler : highschooler.id , highschooler.name , highschooler.grade , highschooler.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "highschooler.id",
      "highschooler.name",
      "highschooler.grade",
      "highschooler.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "How many friends does each student have? | friend : friend.student_id , friend.friend_id , friend.* | highschooler : highschooler.id , highschooler.name , highschooler.grade , highschooler.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "highschooler.id",
      "highschooler.name",
      "highschooler.grade",
      "highschooler.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "Show the names of high school students and their corresponding number of friends. | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.id",
      "highschooler.grade",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "What are the names of the high schoolers and how many friends does each have? | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | friend : friend.friend_id , friend.student_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.id",
      "highschooler.grade",
      "highschooler.*",
      "friend.friend_id",
      "friend.student_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "What is the name of the high schooler who has the greatest number of friends? | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | friend : friend.friend_id , friend.student_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.id",
      "highschooler.grade",
      "highschooler.*",
      "friend.friend_id",
      "friend.student_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "Return the name of the high school student with the most friends. | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.id",
      "highschooler.grade",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "Show the names of high schoolers who have at least 3 friends. | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | friend : friend.friend_id , friend.student_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.id",
      "highschooler.grade",
      "highschooler.*",
      "friend.friend_id",
      "friend.student_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "What are the names of high schoolers who have 3 or more friends? | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | friend : friend.friend_id , friend.student_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.id",
      "highschooler.grade",
      "highschooler.*",
      "friend.friend_id",
      "friend.student_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "Show the names of all of the high schooler Kyle's friends. | highschooler : highschooler.name ( Kyle ) , highschooler.id , highschooler.grade , highschooler.* | friend : friend.friend_id , friend.student_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.id",
      "highschooler.grade",
      "highschooler.*",
      "friend.friend_id",
      "friend.student_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "Return the names of friends of the high school student Kyle. | highschooler : highschooler.name ( Kyle ) , highschooler.grade , highschooler.id , highschooler.* | friend : friend.friend_id , friend.student_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.grade",
      "highschooler.id",
      "highschooler.*",
      "friend.friend_id",
      "friend.student_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "How many friends does the high school student Kyle have? | highschooler : highschooler.name ( Kyle ) , highschooler.id , highschooler.grade , highschooler.* | friend : friend.friend_id , friend.student_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.id",
      "highschooler.grade",
      "highschooler.*",
      "friend.friend_id",
      "friend.student_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "Count the number of friends Kyle has. | highschooler : highschooler.name ( Kyle ) , highschooler.grade , highschooler.id , highschooler.* | friend : friend.friend_id , friend.student_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.grade",
      "highschooler.id",
      "highschooler.*",
      "friend.friend_id",
      "friend.student_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "Show ids of all students who do not have any friends. | highschooler : highschooler.id , highschooler.name , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.id",
      "highschooler.name",
      "highschooler.grade",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "What are the ids of high school students who do not have friends? | highschooler : highschooler.id , highschooler.name , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.id",
      "highschooler.name",
      "highschooler.grade",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "Show names of all high school students who do not have any friends. | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.id",
      "highschooler.grade",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "What are the names of students who have no friends? | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.grade",
      "highschooler.id",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "Show the ids of high schoolers who have friends and are also liked by someone else. | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.* | highschooler : highschooler.id , highschooler.name , highschooler.grade , highschooler.*",
    "output_sequence": " | ",
    "tc_original": [
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*",
      "highschooler.id",
      "highschooler.name",
      "highschooler.grade",
      "highschooler.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "What are the ids of students who both have friends and are liked? | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.* | highschooler : highschooler.id , highschooler.name , highschooler.grade , highschooler.*",
    "output_sequence": " | ",
    "tc_original": [
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*",
      "highschooler.id",
      "highschooler.name",
      "highschooler.grade",
      "highschooler.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "Show name of all students who have some friends and also are liked by someone else. | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | likes : likes.liked_id , likes.student_id , likes.* | friend : friend.student_id , friend.friend_id , friend.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.id",
      "highschooler.grade",
      "highschooler.*",
      "likes.liked_id",
      "likes.student_id",
      "likes.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "What are the names of high schoolers who both have friends and are liked? | likes : likes.liked_id , likes.student_id , likes.* | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | friend : friend.friend_id , friend.student_id , friend.*",
    "output_sequence": " | ",
    "tc_original": [
      "likes.liked_id",
      "likes.student_id",
      "likes.*",
      "highschooler.name",
      "highschooler.id",
      "highschooler.grade",
      "highschooler.*",
      "friend.friend_id",
      "friend.student_id",
      "friend.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "Count the number of likes for each student id. | likes : likes.student_id , likes.liked_id , likes.* | highschooler : highschooler.id , highschooler.name , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.*",
    "output_sequence": " | ",
    "tc_original": [
      "likes.student_id",
      "likes.liked_id",
      "likes.*",
      "highschooler.id",
      "highschooler.name",
      "highschooler.grade",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "How many likes correspond to each student id? | likes : likes.student_id , likes.liked_id , likes.* | highschooler : highschooler.id , highschooler.name , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.*",
    "output_sequence": " | ",
    "tc_original": [
      "likes.student_id",
      "likes.liked_id",
      "likes.*",
      "highschooler.id",
      "highschooler.name",
      "highschooler.grade",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "Show the names of high schoolers who have likes, and numbers of likes for each. | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | likes : likes.student_id , likes.liked_id , likes.* | friend : friend.student_id , friend.friend_id , friend.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.id",
      "highschooler.grade",
      "highschooler.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "What are the names of high schoolers who have likes, and how many likes does each have? | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | likes : likes.student_id , likes.liked_id , likes.* | friend : friend.student_id , friend.friend_id , friend.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.id",
      "highschooler.grade",
      "highschooler.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "What is the name of the high schooler who has the greatest number of likes? | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | likes : likes.student_id , likes.liked_id , likes.* | friend : friend.student_id , friend.friend_id , friend.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.id",
      "highschooler.grade",
      "highschooler.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "Give the name of the student with the most likes. | likes : likes.student_id , likes.liked_id , likes.* | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.*",
    "output_sequence": " | ",
    "tc_original": [
      "likes.student_id",
      "likes.liked_id",
      "likes.*",
      "highschooler.name",
      "highschooler.id",
      "highschooler.grade",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "Show the names of students who have at least 2 likes. | likes : likes.student_id , likes.liked_id , likes.* | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.*",
    "output_sequence": " | ",
    "tc_original": [
      "likes.student_id",
      "likes.liked_id",
      "likes.*",
      "highschooler.name",
      "highschooler.id",
      "highschooler.grade",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "What are the names of students who have 2 or more likes? | likes : likes.student_id , likes.liked_id , likes.* | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.*",
    "output_sequence": " | ",
    "tc_original": [
      "likes.student_id",
      "likes.liked_id",
      "likes.*",
      "highschooler.name",
      "highschooler.id",
      "highschooler.grade",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "Show the names of students who have a grade higher than 5 and have at least 2 friends. | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | friend : friend.friend_id , friend.student_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.grade",
      "highschooler.id",
      "highschooler.*",
      "friend.friend_id",
      "friend.student_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends? | friend : friend.friend_id , friend.student_id , friend.* | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "friend.friend_id",
      "friend.student_id",
      "friend.*",
      "highschooler.name",
      "highschooler.grade",
      "highschooler.id",
      "highschooler.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "How many likes does Kyle have? | highschooler : highschooler.name ( Kyle ) , highschooler.id , highschooler.grade , highschooler.* | likes : likes.liked_id , likes.student_id , likes.* | friend : friend.student_id , friend.friend_id , friend.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.id",
      "highschooler.grade",
      "highschooler.*",
      "likes.liked_id",
      "likes.student_id",
      "likes.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "Return the number of likes that the high schooler named Kyle has. | highschooler : highschooler.name ( Kyle ) , highschooler.id , highschooler.grade , highschooler.* | likes : likes.liked_id , likes.student_id , likes.* | friend : friend.student_id , friend.friend_id , friend.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.id",
      "highschooler.grade",
      "highschooler.*",
      "likes.liked_id",
      "likes.student_id",
      "likes.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "Find the average grade of all students who have some friends. | highschooler : highschooler.grade , highschooler.id , highschooler.name , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.grade",
      "highschooler.id",
      "highschooler.name",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "What is the average grade of students who have friends? | highschooler : highschooler.grade , highschooler.id , highschooler.name , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.grade",
      "highschooler.id",
      "highschooler.name",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "Find the minimum grade of students who have no friends. | highschooler : highschooler.grade , highschooler.id , highschooler.name , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.grade",
      "highschooler.id",
      "highschooler.name",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "What is the lowest grade of students who do not have any friends? | highschooler : highschooler.grade , highschooler.name , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.grade",
      "highschooler.name",
      "highschooler.id",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "Which states have both owners and professionals living there? | professionals : professionals.state , professionals.professional_id , professionals.last_name , professionals.first_name , professionals.home_phone , professionals.* | owners : owners.state , owners.owner_id , owners.first_name , owners.street , owners.city , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.owner_id , dogs.* | treatments : treatments.professional_id , treatments.treatment_id , treatments.dog_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.state",
      "professionals.professional_id",
      "professionals.last_name",
      "professionals.first_name",
      "professionals.home_phone",
      "professionals.*",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.street",
      "owners.city",
      "owners.*",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.owner_id",
      "dogs.*",
      "treatments.professional_id",
      "treatments.treatment_id",
      "treatments.dog_id",
      "treatments.treatment_type_code",
      "treatments.date_of_treatment",
      "treatments.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "Find the states where both owners and professionals live. | professionals : professionals.state , professionals.professional_id , professionals.last_name , professionals.home_phone , professionals.role_code , professionals.* | owners : owners.state , owners.owner_id , owners.first_name , owners.street , owners.city , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.owner_id , dogs.* | treatments : treatments.professional_id , treatments.treatment_id , treatments.dog_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.state",
      "professionals.professional_id",
      "professionals.last_name",
      "professionals.home_phone",
      "professionals.role_code",
      "professionals.*",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.street",
      "owners.city",
      "owners.*",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.owner_id",
      "dogs.*",
      "treatments.professional_id",
      "treatments.treatment_id",
      "treatments.dog_id",
      "treatments.treatment_type_code",
      "treatments.date_of_treatment",
      "treatments.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "What is the average age of the dogs who have gone through any treatments? | dogs : dogs.age , dogs.dog_id , dogs.name , dogs.gender , dogs.date_adopted , dogs.* | treatments : treatments.dog_id , treatments.treatment_id , treatments.treatment_type_code , treatments.professional_id , treatments.date_of_treatment , treatments.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.role_code , professionals.first_name , professionals.*",
    "output_sequence": " | ",
    "tc_original": [
      "dogs.age",
      "dogs.dog_id",
      "dogs.name",
      "dogs.gender",
      "dogs.date_adopted",
      "dogs.*",
      "treatments.dog_id",
      "treatments.treatment_id",
      "treatments.treatment_type_code",
      "treatments.professional_id",
      "treatments.date_of_treatment",
      "treatments.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.role_code",
      "professionals.first_name",
      "professionals.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "Find the average age of the dogs who went through treatments. | dogs : dogs.age , dogs.dog_id , dogs.name , dogs.gender , dogs.date_adopted , dogs.* | treatments : treatments.dog_id , treatments.treatment_id , treatments.treatment_type_code , treatments.professional_id , treatments.date_of_treatment , treatments.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.role_code , professionals.first_name , professionals.*",
    "output_sequence": " | ",
    "tc_original": [
      "dogs.age",
      "dogs.dog_id",
      "dogs.name",
      "dogs.gender",
      "dogs.date_adopted",
      "dogs.*",
      "treatments.dog_id",
      "treatments.treatment_id",
      "treatments.treatment_type_code",
      "treatments.professional_id",
      "treatments.date_of_treatment",
      "treatments.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.role_code",
      "professionals.first_name",
      "professionals.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone. | professionals : professionals.state ( Indiana ) , professionals.last_name , professionals.cell_number , professionals.professional_id , professionals.home_phone , professionals.* | treatments : treatments.professional_id , treatments.treatment_id , treatments.dog_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.* | owners : owners.street , owners.city , owners.state ( Indiana ) , owners.owner_id , owners.first_name , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.state",
      "professionals.last_name",
      "professionals.cell_number",
      "professionals.professional_id",
      "professionals.home_phone",
      "professionals.*",
      "treatments.professional_id",
      "treatments.treatment_id",
      "treatments.dog_id",
      "treatments.treatment_type_code",
      "treatments.date_of_treatment",
      "treatments.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.dog_id",
      "dogs.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments. | professionals : professionals.state ( Indiana ) , professionals.last_name , professionals.cell_number , professionals.professional_id , professionals.home_phone , professionals.* | treatments : treatments.professional_id , treatments.treatment_id , treatments.dog_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.* | owners : owners.state ( Indiana ) , owners.street , owners.city , owners.last_name , owners.owner_id , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.state",
      "professionals.last_name",
      "professionals.cell_number",
      "professionals.professional_id",
      "professionals.home_phone",
      "professionals.*",
      "treatments.professional_id",
      "treatments.treatment_id",
      "treatments.dog_id",
      "treatments.treatment_type_code",
      "treatments.date_of_treatment",
      "treatments.*",
      "owners.state",
      "owners.street",
      "owners.city",
      "owners.last_name",
      "owners.owner_id",
      "owners.*",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.dog_id",
      "dogs.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names . | dogs : dogs.name , dogs.owner_id , dogs.dog_id , dogs.gender , dogs.abandoned_yn , dogs.* | treatments : treatments.cost_of_treatment , treatments.dog_id , treatments.treatment_id , treatments.treatment_type_code , treatments.professional_id , treatments.* | owners : owners.first_name , owners.owner_id , owners.last_name , owners.street , owners.city , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.role_code , professionals.first_name , professionals.*",
    "output_sequence": " | ",
    "tc_original": [
      "dogs.name",
      "dogs.owner_id",
      "dogs.dog_id",
      "dogs.gender",
      "dogs.abandoned_yn",
      "dogs.*",
      "treatments.cost_of_treatment",
      "treatments.dog_id",
      "treatments.treatment_id",
      "treatments.treatment_type_code",
      "treatments.professional_id",
      "treatments.*",
      "owners.first_name",
      "owners.owner_id",
      "owners.last_name",
      "owners.street",
      "owners.city",
      "owners.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.role_code",
      "professionals.first_name",
      "professionals.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ? | dogs : dogs.name , dogs.owner_id , dogs.dog_id , dogs.abandoned_yn , dogs.age , dogs.* | treatments : treatments.cost_of_treatment , treatments.dog_id , treatments.treatment_id , treatments.professional_id , treatments.treatment_type_code , treatments.* | owners : owners.first_name , owners.owner_id , owners.street , owners.city , owners.state , owners.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*",
    "output_sequence": " | ",
    "tc_original": [
      "dogs.name",
      "dogs.owner_id",
      "dogs.dog_id",
      "dogs.abandoned_yn",
      "dogs.age",
      "dogs.*",
      "treatments.cost_of_treatment",
      "treatments.dog_id",
      "treatments.treatment_id",
      "treatments.professional_id",
      "treatments.treatment_type_code",
      "treatments.*",
      "owners.first_name",
      "owners.owner_id",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.*",
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "Which first names are used for professionals or owners but are not used as dog names? | professionals : professionals.first_name , professionals.professional_id , professionals.last_name , professionals.street , professionals.city , professionals.* | owners : owners.first_name , owners.owner_id , owners.street , owners.city , owners.state , owners.* | dogs : dogs.name , dogs.dog_id , dogs.age , dogs.gender , dogs.weight , dogs.* | treatments : treatments.dog_id , treatments.professional_id , treatments.treatment_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.first_name",
      "professionals.professional_id",
      "professionals.last_name",
      "professionals.street",
      "professionals.city",
      "professionals.*",
      "owners.first_name",
      "owners.owner_id",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.*",
      "dogs.name",
      "dogs.dog_id",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.*",
      "treatments.dog_id",
      "treatments.professional_id",
      "treatments.treatment_id",
      "treatments.treatment_type_code",
      "treatments.date_of_treatment",
      "treatments.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "Find the first names that are used for professionals or owners but are not used as dog names. | professionals : professionals.first_name , professionals.professional_id , professionals.street , professionals.city , professionals.state , professionals.* | owners : owners.first_name , owners.owner_id , owners.street , owners.city , owners.state , owners.* | dogs : dogs.name , dogs.dog_id , dogs.age , dogs.gender , dogs.weight , dogs.* | treatments : treatments.dog_id , treatments.professional_id , treatments.treatment_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.first_name",
      "professionals.professional_id",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.*",
      "owners.first_name",
      "owners.owner_id",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.*",
      "dogs.name",
      "dogs.dog_id",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.*",
      "treatments.dog_id",
      "treatments.professional_id",
      "treatments.treatment_id",
      "treatments.treatment_type_code",
      "treatments.date_of_treatment",
      "treatments.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "Which professional did not operate any treatment on dogs? List the professional's id, role and email. | professionals : professionals.email_address , professionals.professional_id , professionals.role_code , professionals.first_name , professionals.last_name , professionals.* | treatments : treatments.professional_id , treatments.dog_id , treatments.treatment_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | owners : owners.street , owners.city , owners.state , owners.email_address , owners.owner_id , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.email_address",
      "professionals.professional_id",
      "professionals.role_code",
      "professionals.first_name",
      "professionals.last_name",
      "professionals.*",
      "treatments.professional_id",
      "treatments.dog_id",
      "treatments.treatment_id",
      "treatments.treatment_type_code",
      "treatments.date_of_treatment",
      "treatments.*",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.dog_id",
      "dogs.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.email_address",
      "owners.owner_id",
      "owners.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "Give me the id, role and email of the professionals who did not perform any treatment on dogs. | professionals : professionals.email_address , professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.* | treatments : treatments.professional_id , treatments.dog_id , treatments.treatment_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | owners : owners.street , owners.city , owners.state , owners.email_address , owners.owner_id , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.email_address",
      "professionals.professional_id",
      "professionals.role_code",
      "professionals.first_name",
      "professionals.street",
      "professionals.*",
      "treatments.professional_id",
      "treatments.dog_id",
      "treatments.treatment_id",
      "treatments.treatment_type_code",
      "treatments.date_of_treatment",
      "treatments.*",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.dog_id",
      "dogs.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.email_address",
      "owners.owner_id",
      "owners.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "Which owner owns the most dogs? List the owner id, first name and last name. | owners : owners.last_name , owners.first_name , owners.owner_id , owners.state , owners.street , owners.* | dogs : dogs.owner_id , dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.* | professionals : professionals.street , professionals.city , professionals.state , professionals.first_name , professionals.zip_code , professionals.* | breeds : breeds.breed_code , breeds.breed_name , breeds.*",
    "output_sequence": " | ",
    "tc_original": [
      "owners.last_name",
      "owners.first_name",
      "owners.owner_id",
      "owners.state",
      "owners.street",
      "owners.*",
      "dogs.owner_id",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.first_name",
      "professionals.zip_code",
      "professionals.*",
      "breeds.breed_code",
      "breeds.breed_name",
      "breeds.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "Return the owner id, first name and last name of the owner who has the most dogs. | owners : owners.last_name , owners.first_name , owners.owner_id , owners.state , owners.cell_number , owners.* | dogs : dogs.owner_id , dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.* | professionals : professionals.street , professionals.city , professionals.state , professionals.first_name , professionals.zip_code , professionals.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*",
    "output_sequence": " | ",
    "tc_original": [
      "owners.last_name",
      "owners.first_name",
      "owners.owner_id",
      "owners.state",
      "owners.cell_number",
      "owners.*",
      "dogs.owner_id",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.first_name",
      "professionals.zip_code",
      "professionals.*",
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "Which professionals have done at least two treatments? List the professional's id, role, and first name. | professionals : professionals.first_name , professionals.professional_id , professionals.role_code , professionals.last_name , professionals.street , professionals.* | treatments : treatments.professional_id , treatments.treatment_id , treatments.treatment_type_code , treatments.dog_id , treatments.date_of_treatment , treatments.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | owners : owners.street , owners.city , owners.state , owners.first_name , owners.last_name , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.first_name",
      "professionals.professional_id",
      "professionals.role_code",
      "professionals.last_name",
      "professionals.street",
      "professionals.*",
      "treatments.professional_id",
      "treatments.treatment_id",
      "treatments.treatment_type_code",
      "treatments.dog_id",
      "treatments.date_of_treatment",
      "treatments.*",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.dog_id",
      "dogs.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.first_name",
      "owners.last_name",
      "owners.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "What are the id, role, and first name of the professionals who have performed two or more treatments? | professionals : professionals.first_name , professionals.professional_id , professionals.role_code , professionals.street , professionals.city , professionals.* | treatments : treatments.professional_id , treatments.treatment_id , treatments.treatment_type_code , treatments.dog_id , treatments.date_of_treatment , treatments.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.first_name",
      "professionals.professional_id",
      "professionals.role_code",
      "professionals.street",
      "professionals.city",
      "professionals.*",
      "treatments.professional_id",
      "treatments.treatment_id",
      "treatments.treatment_type_code",
      "treatments.dog_id",
      "treatments.date_of_treatment",
      "treatments.*",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.dog_id",
      "dogs.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "What is the name of the breed with the most dogs? | breeds : breeds.breed_name , breeds.breed_code , breeds.* | dogs : dogs.breed_code , dogs.name , dogs.date_adopted , dogs.dog_id , dogs.age , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.role_code , professionals.first_name , professionals.*",
    "output_sequence": " | ",
    "tc_original": [
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*",
      "dogs.breed_code",
      "dogs.name",
      "dogs.date_adopted",
      "dogs.dog_id",
      "dogs.age",
      "dogs.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.role_code",
      "professionals.first_name",
      "professionals.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "Which breed do the most dogs have? Give me the breed name. | breeds : breeds.breed_name , breeds.breed_code , breeds.* | dogs : dogs.breed_code , dogs.dog_id , dogs.name , dogs.age , dogs.gender , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.role_code , professionals.first_name , professionals.*",
    "output_sequence": " | ",
    "tc_original": [
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*",
      "dogs.breed_code",
      "dogs.dog_id",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.role_code",
      "professionals.first_name",
      "professionals.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name. | owners : owners.last_name , owners.owner_id , owners.first_name , owners.street , owners.city , owners.* | treatments : treatments.cost_of_treatment , treatments.dog_id , treatments.treatment_id , treatments.professional_id , treatments.treatment_type_code , treatments.* | dogs : dogs.owner_id , dogs.name , dogs.dog_id , dogs.age , dogs.gender , dogs.* | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description , treatment_types.*",
    "output_sequence": " | ",
    "tc_original": [
      "owners.last_name",
      "owners.owner_id",
      "owners.first_name",
      "owners.street",
      "owners.city",
      "owners.*",
      "treatments.cost_of_treatment",
      "treatments.dog_id",
      "treatments.treatment_id",
      "treatments.professional_id",
      "treatments.treatment_type_code",
      "treatments.*",
      "dogs.owner_id",
      "dogs.name",
      "dogs.dog_id",
      "dogs.age",
      "dogs.gender",
      "dogs.*",
      "treatment_types.treatment_type_code",
      "treatment_types.treatment_type_description",
      "treatment_types.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs. | owners : owners.last_name , owners.owner_id , owners.first_name , owners.street , owners.city , owners.* | treatments : treatments.cost_of_treatment , treatments.dog_id , treatments.treatment_id , treatments.professional_id , treatments.treatment_type_code , treatments.* | dogs : dogs.owner_id , dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*",
    "output_sequence": " | ",
    "tc_original": [
      "owners.last_name",
      "owners.owner_id",
      "owners.first_name",
      "owners.street",
      "owners.city",
      "owners.*",
      "treatments.cost_of_treatment",
      "treatments.dog_id",
      "treatments.treatment_id",
      "treatments.professional_id",
      "treatments.treatment_type_code",
      "treatments.*",
      "dogs.owner_id",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.professional_id",
      "professionals.role_code",
      "professionals.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "What is the description of the treatment type that costs the least money in total? | treatment_types : treatment_types.treatment_type_description , treatment_types.treatment_type_code , treatment_types.* | treatments : treatments.cost_of_treatment , treatments.treatment_type_code , treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "treatment_types.treatment_type_description",
      "treatment_types.treatment_type_code",
      "treatment_types.*",
      "treatments.cost_of_treatment",
      "treatments.treatment_type_code",
      "treatments.treatment_id",
      "treatments.dog_id",
      "treatments.professional_id",
      "treatments.*",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.dog_id",
      "dogs.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "Give me the description of the treatment type whose total cost is the lowest. | treatment_types : treatment_types.treatment_type_description , treatment_types.treatment_type_code , treatment_types.* | treatments : treatments.cost_of_treatment , treatments.treatment_type_code , treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "treatment_types.treatment_type_description",
      "treatment_types.treatment_type_code",
      "treatment_types.*",
      "treatments.cost_of_treatment",
      "treatments.treatment_type_code",
      "treatments.treatment_id",
      "treatments.dog_id",
      "treatments.professional_id",
      "treatments.*",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.dog_id",
      "dogs.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code. | owners : owners.zip_code , owners.owner_id , owners.first_name , owners.last_name , owners.state , owners.* | dogs : dogs.owner_id , dogs.date_adopted , dogs.dog_id , dogs.name , dogs.age , dogs.* | treatments : treatments.cost_of_treatment , treatments.dog_id , treatments.treatment_type_code , treatments.treatment_id , treatments.professional_id , treatments.* | charges : charges.charge_amount , charges.charge_id , charges.charge_type , charges.*",
    "output_sequence": " | ",
    "tc_original": [
      "owners.zip_code",
      "owners.owner_id",
      "owners.first_name",
      "owners.last_name",
      "owners.state",
      "owners.*",
      "dogs.owner_id",
      "dogs.date_adopted",
      "dogs.dog_id",
      "dogs.name",
      "dogs.age",
      "dogs.*",
      "treatments.cost_of_treatment",
      "treatments.dog_id",
      "treatments.treatment_type_code",
      "treatments.treatment_id",
      "treatments.professional_id",
      "treatments.*",
      "charges.charge_amount",
      "charges.charge_id",
      "charges.charge_type",
      "charges.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs. | dogs : dogs.owner_id , dogs.dog_id , dogs.name , dogs.age , dogs.gender , dogs.* | owners : owners.zip_code , owners.owner_id , owners.street , owners.city , owners.state , owners.* | treatments : treatments.cost_of_treatment , treatments.dog_id , treatments.treatment_id , treatments.professional_id , treatments.treatment_type_code , treatments.* | professionals : professionals.street , professionals.city , professionals.state , professionals.role_code , professionals.first_name , professionals.*",
    "output_sequence": " | ",
    "tc_original": [
      "dogs.owner_id",
      "dogs.dog_id",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.*",
      "owners.zip_code",
      "owners.owner_id",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.*",
      "treatments.cost_of_treatment",
      "treatments.dog_id",
      "treatments.treatment_id",
      "treatments.professional_id",
      "treatments.treatment_type_code",
      "treatments.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.role_code",
      "professionals.first_name",
      "professionals.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "Which professionals have done at least two types of treatments? List the professional id and cell phone. | professionals : professionals.cell_number , professionals.professional_id , professionals.home_phone , professionals.street , professionals.city , professionals.* | treatments : treatments.professional_id , treatments.treatment_type_code , treatments.treatment_id , treatments.dog_id , treatments.date_of_treatment , treatments.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description , treatment_types.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.cell_number",
      "professionals.professional_id",
      "professionals.home_phone",
      "professionals.street",
      "professionals.city",
      "professionals.*",
      "treatments.professional_id",
      "treatments.treatment_type_code",
      "treatments.treatment_id",
      "treatments.dog_id",
      "treatments.date_of_treatment",
      "treatments.*",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.dog_id",
      "dogs.*",
      "treatment_types.treatment_type_code",
      "treatment_types.treatment_type_description",
      "treatment_types.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "Find the id and cell phone of the professionals who operate two or more types of treatments. | professionals : professionals.cell_number , professionals.professional_id , professionals.home_phone , professionals.street , professionals.city , professionals.* | treatments : treatments.professional_id , treatments.treatment_type_code , treatments.treatment_id , treatments.dog_id , treatments.cost_of_treatment , treatments.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description , treatment_types.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.cell_number",
      "professionals.professional_id",
      "professionals.home_phone",
      "professionals.street",
      "professionals.city",
      "professionals.*",
      "treatments.professional_id",
      "treatments.treatment_type_code",
      "treatments.treatment_id",
      "treatments.dog_id",
      "treatments.cost_of_treatment",
      "treatments.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*",
      "treatment_types.treatment_type_code",
      "treatment_types.treatment_type_description",
      "treatment_types.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "What are the first name and last name of the professionals who have done treatment with cost below average? | professionals : professionals.last_name , professionals.first_name , professionals.professional_id , professionals.street , professionals.city , professionals.* | treatments : treatments.cost_of_treatment , treatments.professional_id , treatments.treatment_id , treatments.dog_id , treatments.treatment_type_code , treatments.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.owner_id , dogs.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.last_name",
      "professionals.first_name",
      "professionals.professional_id",
      "professionals.street",
      "professionals.city",
      "professionals.*",
      "treatments.cost_of_treatment",
      "treatments.professional_id",
      "treatments.treatment_id",
      "treatments.dog_id",
      "treatments.treatment_type_code",
      "treatments.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.owner_id",
      "dogs.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names. | professionals : professionals.last_name , professionals.first_name , professionals.professional_id , professionals.role_code , professionals.street , professionals.* | treatments : treatments.cost_of_treatment , treatments.professional_id , treatments.treatment_id , treatments.treatment_type_code , treatments.dog_id , treatments.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.last_name",
      "professionals.first_name",
      "professionals.professional_id",
      "professionals.role_code",
      "professionals.street",
      "professionals.*",
      "treatments.cost_of_treatment",
      "treatments.professional_id",
      "treatments.treatment_id",
      "treatments.treatment_type_code",
      "treatments.dog_id",
      "treatments.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.dog_id",
      "dogs.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "List the date of each treatment, together with the first name of the professional who operated it. | treatments : treatments.date_of_treatment , treatments.treatment_id , treatments.professional_id , treatments.dog_id , treatments.treatment_type_code , treatments.* | professionals : professionals.first_name , professionals.professional_id , professionals.street , professionals.city , professionals.state , professionals.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "treatments.date_of_treatment",
      "treatments.treatment_id",
      "treatments.professional_id",
      "treatments.dog_id",
      "treatments.treatment_type_code",
      "treatments.*",
      "professionals.first_name",
      "professionals.professional_id",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.*",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.dog_id",
      "dogs.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "What are the date and the operating professional's first name of each treatment? | professionals : professionals.first_name , professionals.professional_id , professionals.role_code , professionals.street , professionals.city , professionals.* | treatments : treatments.date_of_treatment , treatments.treatment_id , treatments.professional_id , treatments.treatment_type_code , treatments.dog_id , treatments.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | owners : owners.street , owners.city , owners.state , owners.first_name , owners.owner_id , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.first_name",
      "professionals.professional_id",
      "professionals.role_code",
      "professionals.street",
      "professionals.city",
      "professionals.*",
      "treatments.date_of_treatment",
      "treatments.treatment_id",
      "treatments.professional_id",
      "treatments.treatment_type_code",
      "treatments.dog_id",
      "treatments.*",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.dog_id",
      "dogs.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.first_name",
      "owners.owner_id",
      "owners.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "List the cost of each treatment and the corresponding treatment type description. | treatments : treatments.cost_of_treatment , treatments.treatment_id , treatments.treatment_type_code , treatments.dog_id , treatments.professional_id , treatments.* | treatment_types : treatment_types.treatment_type_description , treatment_types.treatment_type_code , treatment_types.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "treatments.cost_of_treatment",
      "treatments.treatment_id",
      "treatments.treatment_type_code",
      "treatments.dog_id",
      "treatments.professional_id",
      "treatments.*",
      "treatment_types.treatment_type_description",
      "treatment_types.treatment_type_code",
      "treatment_types.*",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.dog_id",
      "dogs.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "What are the cost and treatment type description of each treatment? | treatments : treatments.cost_of_treatment , treatments.treatment_type_code , treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.* | treatment_types : treatment_types.treatment_type_description , treatment_types.treatment_type_code , treatment_types.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "treatments.cost_of_treatment",
      "treatments.treatment_type_code",
      "treatments.treatment_id",
      "treatments.dog_id",
      "treatments.professional_id",
      "treatments.*",
      "treatment_types.treatment_type_description",
      "treatment_types.treatment_type_code",
      "treatment_types.*",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.dog_id",
      "dogs.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "List each owner's first name, last name, and the size of his for her dog. | owners : owners.first_name , owners.last_name , owners.owner_id , owners.street , owners.city , owners.* | dogs : dogs.size_code , dogs.owner_id , dogs.name , dogs.breed_code , dogs.age , dogs.* | sizes : sizes.size_description , sizes.size_code , sizes.* | professionals : professionals.street , professionals.city , professionals.state , professionals.role_code , professionals.first_name , professionals.*",
    "output_sequence": " | ",
    "tc_original": [
      "owners.first_name",
      "owners.last_name",
      "owners.owner_id",
      "owners.street",
      "owners.city",
      "owners.*",
      "dogs.size_code",
      "dogs.owner_id",
      "dogs.name",
      "dogs.breed_code",
      "dogs.age",
      "dogs.*",
      "sizes.size_description",
      "sizes.size_code",
      "sizes.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.role_code",
      "professionals.first_name",
      "professionals.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "What are each owner's first name, last name, and the size of their dog? | owners : owners.first_name , owners.last_name , owners.owner_id , owners.street , owners.city , owners.* | dogs : dogs.size_code , dogs.owner_id , dogs.name , dogs.gender , dogs.breed_code , dogs.* | sizes : sizes.size_description , sizes.size_code , sizes.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*",
    "output_sequence": " | ",
    "tc_original": [
      "owners.first_name",
      "owners.last_name",
      "owners.owner_id",
      "owners.street",
      "owners.city",
      "owners.*",
      "dogs.size_code",
      "dogs.owner_id",
      "dogs.name",
      "dogs.gender",
      "dogs.breed_code",
      "dogs.*",
      "sizes.size_description",
      "sizes.size_code",
      "sizes.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.professional_id",
      "professionals.role_code",
      "professionals.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "List pairs of the owner's first name and the dogs's name. | owners : owners.first_name , owners.owner_id , owners.street , owners.city , owners.state , owners.* | dogs : dogs.name , dogs.owner_id , dogs.age , dogs.gender , dogs.weight , dogs.* | professionals : professionals.street , professionals.city , professionals.state , professionals.role_code , professionals.first_name , professionals.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*",
    "output_sequence": " | ",
    "tc_original": [
      "owners.first_name",
      "owners.owner_id",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.*",
      "dogs.name",
      "dogs.owner_id",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.role_code",
      "professionals.first_name",
      "professionals.*",
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "What are each owner's first name and their dogs's name? | owners : owners.first_name , owners.owner_id , owners.state , owners.street , owners.city , owners.* | dogs : dogs.name , dogs.owner_id , dogs.age , dogs.gender , dogs.weight , dogs.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*",
    "output_sequence": " | ",
    "tc_original": [
      "owners.first_name",
      "owners.owner_id",
      "owners.state",
      "owners.street",
      "owners.city",
      "owners.*",
      "dogs.name",
      "dogs.owner_id",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.professional_id",
      "professionals.role_code",
      "professionals.*",
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "List the names of the dogs of the rarest breed and the treatment dates of them. | treatments : treatments.date_of_treatment , treatments.dog_id , treatments.treatment_id , treatments.treatment_type_code , treatments.professional_id , treatments.* | dogs : dogs.name , dogs.breed_code , dogs.date_adopted , dogs.gender , dogs.weight , dogs.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "treatments.date_of_treatment",
      "treatments.dog_id",
      "treatments.treatment_id",
      "treatments.treatment_type_code",
      "treatments.professional_id",
      "treatments.*",
      "dogs.name",
      "dogs.breed_code",
      "dogs.date_adopted",
      "dogs.gender",
      "dogs.weight",
      "dogs.*",
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "Which dogs are of the rarest breed? Show their names and treatment dates. | dogs : dogs.name , dogs.breed_code , dogs.date_adopted , dogs.date_departed , dogs.date_arrived , dogs.* | treatments : treatments.date_of_treatment , treatments.treatment_id , treatments.dog_id , treatments.treatment_type_code , treatments.professional_id , treatments.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "dogs.name",
      "dogs.breed_code",
      "dogs.date_adopted",
      "dogs.date_departed",
      "dogs.date_arrived",
      "dogs.*",
      "treatments.date_of_treatment",
      "treatments.treatment_id",
      "treatments.dog_id",
      "treatments.treatment_type_code",
      "treatments.professional_id",
      "treatments.*",
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name. | owners : owners.state ( Virginia ) , owners.first_name , owners.owner_id , owners.street , owners.city , owners.* | dogs : dogs.name , dogs.owner_id , dogs.dog_id , dogs.age , dogs.gender , dogs.* | professionals : professionals.street , professionals.city , professionals.state , professionals.first_name , professionals.last_name , professionals.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*",
    "output_sequence": " | ",
    "tc_original": [
      "owners.state",
      "owners.first_name",
      "owners.owner_id",
      "owners.street",
      "owners.city",
      "owners.*",
      "dogs.name",
      "dogs.owner_id",
      "dogs.dog_id",
      "dogs.age",
      "dogs.gender",
      "dogs.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.first_name",
      "professionals.last_name",
      "professionals.*",
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "Find the first names of owners living in Virginia and the names of dogs they own. | owners : owners.state ( Virginia ) , owners.first_name , owners.owner_id , owners.street , owners.city , owners.* | dogs : dogs.name , dogs.owner_id , dogs.age , dogs.gender , dogs.weight , dogs.* | professionals : professionals.street , professionals.city , professionals.state , professionals.role_code , professionals.first_name , professionals.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*",
    "output_sequence": " | ",
    "tc_original": [
      "owners.state",
      "owners.first_name",
      "owners.owner_id",
      "owners.street",
      "owners.city",
      "owners.*",
      "dogs.name",
      "dogs.owner_id",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.role_code",
      "professionals.first_name",
      "professionals.*",
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "What are the arriving date and the departing date of the dogs who have gone through a treatment? | dogs : dogs.date_arrived , dogs.date_departed , dogs.date_adopted , dogs.dog_id , dogs.name , dogs.* | treatments : treatments.dog_id , treatments.treatment_id , treatments.treatment_type_code , treatments.professional_id , treatments.date_of_treatment , treatments.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.role_code , professionals.first_name , professionals.*",
    "output_sequence": " | ",
    "tc_original": [
      "dogs.date_arrived",
      "dogs.date_departed",
      "dogs.date_adopted",
      "dogs.dog_id",
      "dogs.name",
      "dogs.*",
      "treatments.dog_id",
      "treatments.treatment_id",
      "treatments.treatment_type_code",
      "treatments.professional_id",
      "treatments.date_of_treatment",
      "treatments.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.role_code",
      "professionals.first_name",
      "professionals.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "Find the arriving date and the departing date of the dogs that received a treatment. | dogs : dogs.date_arrived , dogs.date_departed , dogs.date_adopted , dogs.dog_id , dogs.name , dogs.* | treatments : treatments.dog_id , treatments.treatment_id , treatments.treatment_type_code , treatments.professional_id , treatments.date_of_treatment , treatments.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.role_code , professionals.first_name , professionals.*",
    "output_sequence": " | ",
    "tc_original": [
      "dogs.date_arrived",
      "dogs.date_departed",
      "dogs.date_adopted",
      "dogs.dog_id",
      "dogs.name",
      "dogs.*",
      "treatments.dog_id",
      "treatments.treatment_id",
      "treatments.treatment_type_code",
      "treatments.professional_id",
      "treatments.date_of_treatment",
      "treatments.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.role_code",
      "professionals.first_name",
      "professionals.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "List the last name of the owner owning the youngest dog. | dogs : dogs.age , dogs.date_of_birth , dogs.name , dogs.owner_id , dogs.gender , dogs.* | owners : owners.last_name , owners.owner_id , owners.first_name , owners.street , owners.city , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.role_code , professionals.first_name , professionals.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*",
    "output_sequence": " | ",
    "tc_original": [
      "dogs.age",
      "dogs.date_of_birth",
      "dogs.name",
      "dogs.owner_id",
      "dogs.gender",
      "dogs.*",
      "owners.last_name",
      "owners.owner_id",
      "owners.first_name",
      "owners.street",
      "owners.city",
      "owners.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.role_code",
      "professionals.first_name",
      "professionals.*",
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "Who owns the youngest dog? Give me his or her last name. | owners : owners.last_name , owners.first_name , owners.owner_id , owners.street , owners.city , owners.* | dogs : dogs.age , dogs.date_of_birth , dogs.name , dogs.gender , dogs.owner_id , dogs.* | professionals : professionals.street , professionals.city , professionals.state , professionals.role_code , professionals.first_name , professionals.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*",
    "output_sequence": " | ",
    "tc_original": [
      "owners.last_name",
      "owners.first_name",
      "owners.owner_id",
      "owners.street",
      "owners.city",
      "owners.*",
      "dogs.age",
      "dogs.date_of_birth",
      "dogs.name",
      "dogs.gender",
      "dogs.owner_id",
      "dogs.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.role_code",
      "professionals.first_name",
      "professionals.*",
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin. | professionals : professionals.state ( Hawaii , Wisconsin ) , professionals.email_address , professionals.professional_id , professionals.street , professionals.city , professionals.* | owners : owners.state ( Wisconsin ) , owners.street , owners.city , owners.email_address , owners.owner_id , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.owner_id , dogs.* | treatments : treatments.professional_id , treatments.treatment_id , treatments.dog_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.state",
      "professionals.email_address",
      "professionals.professional_id",
      "professionals.street",
      "professionals.city",
      "professionals.*",
      "owners.state",
      "owners.street",
      "owners.city",
      "owners.email_address",
      "owners.owner_id",
      "owners.*",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.owner_id",
      "dogs.*",
      "treatments.professional_id",
      "treatments.treatment_id",
      "treatments.dog_id",
      "treatments.treatment_type_code",
      "treatments.date_of_treatment",
      "treatments.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin? | professionals : professionals.state ( Hawaii , Wisconsin ) , professionals.email_address , professionals.professional_id , professionals.street , professionals.city , professionals.* | owners : owners.state ( Wisconsin ) , owners.street , owners.city , owners.email_address , owners.owner_id , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.owner_id , dogs.* | treatments : treatments.professional_id , treatments.treatment_id , treatments.dog_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.state",
      "professionals.email_address",
      "professionals.professional_id",
      "professionals.street",
      "professionals.city",
      "professionals.*",
      "owners.state",
      "owners.street",
      "owners.city",
      "owners.email_address",
      "owners.owner_id",
      "owners.*",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.owner_id",
      "dogs.*",
      "treatments.professional_id",
      "treatments.treatment_id",
      "treatments.dog_id",
      "treatments.treatment_type_code",
      "treatments.date_of_treatment",
      "treatments.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "What are the arriving date and the departing date of all the dogs? | dogs : dogs.date_arrived , dogs.date_departed , dogs.date_adopted , dogs.name , dogs.dog_id , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.role_code , professionals.first_name , professionals.* | treatments : treatments.dog_id , treatments.professional_id , treatments.cost_of_treatment , treatments.treatment_id , treatments.treatment_type_code , treatments.*",
    "output_sequence": " | ",
    "tc_original": [
      "dogs.date_arrived",
      "dogs.date_departed",
      "dogs.date_adopted",
      "dogs.name",
      "dogs.dog_id",
      "dogs.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.role_code",
      "professionals.first_name",
      "professionals.*",
      "treatments.dog_id",
      "treatments.professional_id",
      "treatments.cost_of_treatment",
      "treatments.treatment_id",
      "treatments.treatment_type_code",
      "treatments.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "List the arrival date and the departure date for all the dogs. | dogs : dogs.date_arrived , dogs.date_departed , dogs.date_adopted , dogs.name , dogs.dog_id , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.role_code , professionals.first_name , professionals.* | breeds : breeds.breed_code , breeds.breed_name , breeds.*",
    "output_sequence": " | ",
    "tc_original": [
      "dogs.date_arrived",
      "dogs.date_departed",
      "dogs.date_adopted",
      "dogs.name",
      "dogs.dog_id",
      "dogs.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.role_code",
      "professionals.first_name",
      "professionals.*",
      "breeds.breed_code",
      "breeds.breed_name",
      "breeds.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "How many dogs went through any treatments? | treatments : treatments.dog_id , treatments.treatment_id , treatments.treatment_type_code , treatments.professional_id , treatments.date_of_treatment , treatments.* | dogs : dogs.dog_id , dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*",
    "output_sequence": " | ",
    "tc_original": [
      "treatments.dog_id",
      "treatments.treatment_id",
      "treatments.treatment_type_code",
      "treatments.professional_id",
      "treatments.date_of_treatment",
      "treatments.*",
      "dogs.dog_id",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.professional_id",
      "professionals.role_code",
      "professionals.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "Count the number of dogs that went through a treatment. | treatments : treatments.dog_id , treatments.treatment_id , treatments.treatment_type_code , treatments.professional_id , treatments.date_of_treatment , treatments.* | dogs : dogs.dog_id , dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*",
    "output_sequence": " | ",
    "tc_original": [
      "treatments.dog_id",
      "treatments.treatment_id",
      "treatments.treatment_type_code",
      "treatments.professional_id",
      "treatments.date_of_treatment",
      "treatments.*",
      "dogs.dog_id",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.professional_id",
      "professionals.role_code",
      "professionals.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "How many professionals have performed any treatment to dogs? | treatments : treatments.professional_id , treatments.dog_id , treatments.treatment_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.* | professionals : professionals.professional_id , professionals.state , professionals.street , professionals.city , professionals.first_name , professionals.* | dogs : dogs.name , dogs.dog_id , dogs.age , dogs.gender , dogs.weight , dogs.* | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description , treatment_types.*",
    "output_sequence": " | ",
    "tc_original": [
      "treatments.professional_id",
      "treatments.dog_id",
      "treatments.treatment_id",
      "treatments.treatment_type_code",
      "treatments.date_of_treatment",
      "treatments.*",
      "professionals.professional_id",
      "professionals.state",
      "professionals.street",
      "professionals.city",
      "professionals.first_name",
      "professionals.*",
      "dogs.name",
      "dogs.dog_id",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.*",
      "treatment_types.treatment_type_code",
      "treatment_types.treatment_type_description",
      "treatment_types.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "Find the number of professionals who have ever treated dogs. | treatments : treatments.professional_id , treatments.dog_id , treatments.treatment_type_code , treatments.treatment_id , treatments.date_of_treatment , treatments.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.home_phone , professionals.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "treatments.professional_id",
      "treatments.dog_id",
      "treatments.treatment_type_code",
      "treatments.treatment_id",
      "treatments.date_of_treatment",
      "treatments.*",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.dog_id",
      "dogs.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.professional_id",
      "professionals.home_phone",
      "professionals.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state. | professionals : professionals.state , professionals.city , professionals.street , professionals.role_code , professionals.first_name , professionals.* | owners : owners.state , owners.street , owners.city , owners.owner_id , owners.first_name , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.owner_id , dogs.* | treatments : treatments.professional_id , treatments.treatment_id , treatments.dog_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.state",
      "professionals.city",
      "professionals.street",
      "professionals.role_code",
      "professionals.first_name",
      "professionals.*",
      "owners.state",
      "owners.street",
      "owners.city",
      "owners.owner_id",
      "owners.first_name",
      "owners.*",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.owner_id",
      "dogs.*",
      "treatments.professional_id",
      "treatments.treatment_id",
      "treatments.dog_id",
      "treatments.treatment_type_code",
      "treatments.date_of_treatment",
      "treatments.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'. | professionals : professionals.street , professionals.state , professionals.city , professionals.role_code , professionals.professional_id , professionals.* | owners : owners.state , owners.street , owners.city , owners.owner_id , owners.first_name , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.owner_id , dogs.* | treatments : treatments.professional_id , treatments.treatment_id , treatments.dog_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.street",
      "professionals.state",
      "professionals.city",
      "professionals.role_code",
      "professionals.professional_id",
      "professionals.*",
      "owners.state",
      "owners.street",
      "owners.city",
      "owners.owner_id",
      "owners.first_name",
      "owners.*",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.owner_id",
      "dogs.*",
      "treatments.professional_id",
      "treatments.treatment_id",
      "treatments.dog_id",
      "treatments.treatment_type_code",
      "treatments.date_of_treatment",
      "treatments.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email. | owners : owners.first_name , owners.last_name , owners.state , owners.email_address , owners.owner_id , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.owner_id , dogs.* | professionals : professionals.street , professionals.city , professionals.state , professionals.email_address , professionals.home_phone , professionals.* | breeds : breeds.breed_code , breeds.breed_name , breeds.*",
    "output_sequence": " | ",
    "tc_original": [
      "owners.first_name",
      "owners.last_name",
      "owners.state",
      "owners.email_address",
      "owners.owner_id",
      "owners.*",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.owner_id",
      "dogs.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.email_address",
      "professionals.home_phone",
      "professionals.*",
      "breeds.breed_code",
      "breeds.breed_name",
      "breeds.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'. | owners : owners.first_name , owners.last_name , owners.state , owners.email_address , owners.owner_id , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | professionals : professionals.street , professionals.city , professionals.state , professionals.first_name , professionals.last_name , professionals.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*",
    "output_sequence": " | ",
    "tc_original": [
      "owners.first_name",
      "owners.last_name",
      "owners.state",
      "owners.email_address",
      "owners.owner_id",
      "owners.*",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.dog_id",
      "dogs.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.first_name",
      "professionals.last_name",
      "professionals.*",
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "How many dogs have an age below the average? | dogs : dogs.age , dogs.name , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.role_code , professionals.first_name , professionals.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*",
    "output_sequence": " | ",
    "tc_original": [
      "dogs.age",
      "dogs.name",
      "dogs.gender",
      "dogs.weight",
      "dogs.dog_id",
      "dogs.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.role_code",
      "professionals.first_name",
      "professionals.*",
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "Count the number of dogs of an age below the average. | dogs : dogs.age , dogs.name , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.role_code , professionals.first_name , professionals.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*",
    "output_sequence": " | ",
    "tc_original": [
      "dogs.age",
      "dogs.name",
      "dogs.gender",
      "dogs.weight",
      "dogs.dog_id",
      "dogs.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.role_code",
      "professionals.first_name",
      "professionals.*",
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "How much does the most recent treatment cost? | treatments : treatments.cost_of_treatment , treatments.date_of_treatment , treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.role_code , professionals.first_name , professionals.*",
    "output_sequence": " | ",
    "tc_original": [
      "treatments.cost_of_treatment",
      "treatments.date_of_treatment",
      "treatments.treatment_id",
      "treatments.dog_id",
      "treatments.professional_id",
      "treatments.*",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.dog_id",
      "dogs.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.role_code",
      "professionals.first_name",
      "professionals.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "Show me the cost of the most recently performed treatment. | treatments : treatments.date_of_treatment , treatments.cost_of_treatment , treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | owners : owners.street , owners.city , owners.state , owners.first_name , owners.owner_id , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*",
    "output_sequence": " | ",
    "tc_original": [
      "treatments.date_of_treatment",
      "treatments.cost_of_treatment",
      "treatments.treatment_id",
      "treatments.dog_id",
      "treatments.professional_id",
      "treatments.*",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.dog_id",
      "dogs.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.first_name",
      "owners.owner_id",
      "owners.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.professional_id",
      "professionals.role_code",
      "professionals.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "How many dogs have not gone through any treatment? | treatments : treatments.dog_id , treatments.treatment_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.professional_id , treatments.* | dogs : dogs.dog_id , dogs.abandoned_yn , dogs.owner_id , dogs.name , dogs.breed_code , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description , treatment_types.*",
    "output_sequence": " | ",
    "tc_original": [
      "treatments.dog_id",
      "treatments.treatment_id",
      "treatments.treatment_type_code",
      "treatments.date_of_treatment",
      "treatments.professional_id",
      "treatments.*",
      "dogs.dog_id",
      "dogs.abandoned_yn",
      "dogs.owner_id",
      "dogs.name",
      "dogs.breed_code",
      "dogs.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*",
      "treatment_types.treatment_type_code",
      "treatment_types.treatment_type_description",
      "treatment_types.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "Tell me the number of dogs that have not received any treatment . | treatments : treatments.dog_id , treatments.treatment_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.professional_id , treatments.* | dogs : dogs.dog_id , dogs.abandoned_yn , dogs.owner_id , dogs.breed_code , dogs.name , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | breeds : breeds.breed_code , breeds.breed_name , breeds.*",
    "output_sequence": " | ",
    "tc_original": [
      "treatments.dog_id",
      "treatments.treatment_id",
      "treatments.treatment_type_code",
      "treatments.date_of_treatment",
      "treatments.professional_id",
      "treatments.*",
      "dogs.dog_id",
      "dogs.abandoned_yn",
      "dogs.owner_id",
      "dogs.breed_code",
      "dogs.name",
      "dogs.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*",
      "breeds.breed_code",
      "breeds.breed_name",
      "breeds.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "How many owners temporarily do not have any dogs? | owners : owners.owner_id , owners.first_name , owners.last_name , owners.home_phone , owners.email_address , owners.* | dogs : dogs.owner_id , dogs.abandoned_yn , dogs.dog_id , dogs.name , dogs.age , dogs.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.* | breeds : breeds.breed_code , breeds.breed_name , breeds.*",
    "output_sequence": " | ",
    "tc_original": [
      "owners.owner_id",
      "owners.first_name",
      "owners.last_name",
      "owners.home_phone",
      "owners.email_address",
      "owners.*",
      "dogs.owner_id",
      "dogs.abandoned_yn",
      "dogs.dog_id",
      "dogs.name",
      "dogs.age",
      "dogs.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.professional_id",
      "professionals.role_code",
      "professionals.*",
      "breeds.breed_code",
      "breeds.breed_name",
      "breeds.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "Find the number of owners who do not own any dogs at this moment. | dogs : dogs.owner_id , dogs.abandoned_yn , dogs.date_adopted , dogs.date_arrived , dogs.date_departed , dogs.* | owners : owners.owner_id , owners.first_name , owners.last_name , owners.email_address , owners.home_phone , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*",
    "output_sequence": " | ",
    "tc_original": [
      "dogs.owner_id",
      "dogs.abandoned_yn",
      "dogs.date_adopted",
      "dogs.date_arrived",
      "dogs.date_departed",
      "dogs.*",
      "owners.owner_id",
      "owners.first_name",
      "owners.last_name",
      "owners.email_address",
      "owners.home_phone",
      "owners.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.professional_id",
      "professionals.role_code",
      "professionals.*",
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "How many professionals did not operate any treatment on dogs? | treatments : treatments.professional_id , treatments.dog_id , treatments.treatment_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.* | professionals : professionals.professional_id , professionals.cell_number , professionals.first_name , professionals.email_address , professionals.home_phone , professionals.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "treatments.professional_id",
      "treatments.dog_id",
      "treatments.treatment_id",
      "treatments.treatment_type_code",
      "treatments.date_of_treatment",
      "treatments.*",
      "professionals.professional_id",
      "professionals.cell_number",
      "professionals.first_name",
      "professionals.email_address",
      "professionals.home_phone",
      "professionals.*",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.dog_id",
      "dogs.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "Find the number of professionals who have not treated any dogs. | treatments : treatments.professional_id , treatments.dog_id , treatments.treatment_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.* | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.home_phone , professionals.cell_number , professionals.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "treatments.professional_id",
      "treatments.dog_id",
      "treatments.treatment_id",
      "treatments.treatment_type_code",
      "treatments.date_of_treatment",
      "treatments.*",
      "professionals.professional_id",
      "professionals.role_code",
      "professionals.first_name",
      "professionals.home_phone",
      "professionals.cell_number",
      "professionals.*",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.dog_id",
      "dogs.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no. | dogs : dogs.name , dogs.age , dogs.weight , dogs.abandoned_yn , dogs.gender , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.first_name , professionals.last_name , professionals.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*",
    "output_sequence": " | ",
    "tc_original": [
      "dogs.name",
      "dogs.age",
      "dogs.weight",
      "dogs.abandoned_yn",
      "dogs.gender",
      "dogs.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.first_name",
      "professionals.last_name",
      "professionals.*",
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables. | dogs : dogs.abandoned_yn , dogs.name , dogs.age , dogs.weight , dogs.gender , dogs.* | owners : owners.street , owners.city , owners.state , owners.first_name , owners.last_name , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.first_name , professionals.zip_code , professionals.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*",
    "output_sequence": " | ",
    "tc_original": [
      "dogs.abandoned_yn",
      "dogs.name",
      "dogs.age",
      "dogs.weight",
      "dogs.gender",
      "dogs.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.first_name",
      "owners.last_name",
      "owners.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.first_name",
      "professionals.zip_code",
      "professionals.*",
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "What is the average age of all the dogs? | dogs : dogs.age , dogs.name , dogs.dog_id , dogs.gender , dogs.weight , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.role_code , professionals.first_name , professionals.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*",
    "output_sequence": " | ",
    "tc_original": [
      "dogs.age",
      "dogs.name",
      "dogs.dog_id",
      "dogs.gender",
      "dogs.weight",
      "dogs.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.role_code",
      "professionals.first_name",
      "professionals.*",
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "Compute the average age of all the dogs. | dogs : dogs.age , dogs.name , dogs.dog_id , dogs.gender , dogs.weight , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.role_code , professionals.first_name , professionals.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*",
    "output_sequence": " | ",
    "tc_original": [
      "dogs.age",
      "dogs.name",
      "dogs.dog_id",
      "dogs.gender",
      "dogs.weight",
      "dogs.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.role_code",
      "professionals.first_name",
      "professionals.*",
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "What is the age of the oldest dog? | dogs : dogs.age , dogs.date_of_birth , dogs.name , dogs.gender , dogs.dog_id , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.role_code , professionals.first_name , professionals.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*",
    "output_sequence": " | ",
    "tc_original": [
      "dogs.age",
      "dogs.date_of_birth",
      "dogs.name",
      "dogs.gender",
      "dogs.dog_id",
      "dogs.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.role_code",
      "professionals.first_name",
      "professionals.*",
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "Tell me the age of the oldest dog. | dogs : dogs.age , dogs.name , dogs.date_of_birth , dogs.gender , dogs.dog_id , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.role_code , professionals.first_name , professionals.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*",
    "output_sequence": " | ",
    "tc_original": [
      "dogs.age",
      "dogs.name",
      "dogs.date_of_birth",
      "dogs.gender",
      "dogs.dog_id",
      "dogs.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.role_code",
      "professionals.first_name",
      "professionals.*",
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "How much does each charge type costs? List both charge type and amount. | charges : charges.charge_type , charges.charge_amount , charges.charge_id , charges.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.first_name , professionals.zip_code , professionals.*",
    "output_sequence": " | ",
    "tc_original": [
      "charges.charge_type",
      "charges.charge_amount",
      "charges.charge_id",
      "charges.*",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.dog_id",
      "dogs.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.first_name",
      "professionals.zip_code",
      "professionals.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "List each charge type and its amount. | charges : charges.charge_amount , charges.charge_type , charges.charge_id , charges.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.date_of_birth , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.first_name , professionals.zip_code , professionals.*",
    "output_sequence": " | ",
    "tc_original": [
      "charges.charge_amount",
      "charges.charge_type",
      "charges.charge_id",
      "charges.*",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.date_of_birth",
      "dogs.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.first_name",
      "professionals.zip_code",
      "professionals.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "How much does the most expensive charge type costs? | charges : charges.charge_type , charges.charge_amount , charges.charge_id , charges.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.role_code , professionals.first_name , professionals.*",
    "output_sequence": " | ",
    "tc_original": [
      "charges.charge_type",
      "charges.charge_amount",
      "charges.charge_id",
      "charges.*",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.dog_id",
      "dogs.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.role_code",
      "professionals.first_name",
      "professionals.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "What is the charge amount of the most expensive charge type? | charges : charges.charge_amount , charges.charge_type , charges.charge_id , charges.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.role_code , professionals.first_name , professionals.*",
    "output_sequence": " | ",
    "tc_original": [
      "charges.charge_amount",
      "charges.charge_type",
      "charges.charge_id",
      "charges.*",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.dog_id",
      "dogs.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.role_code",
      "professionals.first_name",
      "professionals.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "List the email, cell phone and home phone of all the professionals. | professionals : professionals.home_phone , professionals.email_address , professionals.cell_number , professionals.professional_id , professionals.street , professionals.* | owners : owners.street , owners.city , owners.state , owners.email_address , owners.cell_number , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.owner_id , dogs.* | treatments : treatments.professional_id , treatments.treatment_id , treatments.dog_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.home_phone",
      "professionals.email_address",
      "professionals.cell_number",
      "professionals.professional_id",
      "professionals.street",
      "professionals.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.email_address",
      "owners.cell_number",
      "owners.*",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.owner_id",
      "dogs.*",
      "treatments.professional_id",
      "treatments.treatment_id",
      "treatments.dog_id",
      "treatments.treatment_type_code",
      "treatments.date_of_treatment",
      "treatments.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "What are the email, cell phone and home phone of each professional? | professionals : professionals.home_phone , professionals.email_address , professionals.cell_number , professionals.first_name , professionals.last_name , professionals.* | owners : owners.street , owners.city , owners.state , owners.first_name , owners.email_address , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.owner_id , dogs.* | treatments : treatments.professional_id , treatments.treatment_id , treatments.dog_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.home_phone",
      "professionals.email_address",
      "professionals.cell_number",
      "professionals.first_name",
      "professionals.last_name",
      "professionals.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.first_name",
      "owners.email_address",
      "owners.*",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.owner_id",
      "dogs.*",
      "treatments.professional_id",
      "treatments.treatment_id",
      "treatments.dog_id",
      "treatments.treatment_type_code",
      "treatments.date_of_treatment",
      "treatments.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "What are all the possible breed type and size type combinations? | sizes : sizes.size_description , sizes.size_code , sizes.* | dogs : dogs.breed_code , dogs.size_code , dogs.name , dogs.dog_id , dogs.gender , dogs.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "sizes.size_description",
      "sizes.size_code",
      "sizes.*",
      "dogs.breed_code",
      "dogs.size_code",
      "dogs.name",
      "dogs.dog_id",
      "dogs.gender",
      "dogs.*",
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "Find the distinct breed type and size type combinations for dogs. | dogs : dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.gender , dogs.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | sizes : sizes.size_description , sizes.size_code , sizes.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "dogs.breed_code",
      "dogs.size_code",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.*",
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*",
      "sizes.size_description",
      "sizes.size_code",
      "sizes.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "List the first name of all the professionals along with the description of the treatment they have done. | professionals : professionals.first_name , professionals.professional_id , professionals.last_name , professionals.street , professionals.city , professionals.* | treatment_types : treatment_types.treatment_type_description , treatment_types.treatment_type_code , treatment_types.* | treatments : treatments.professional_id , treatments.treatment_id , treatments.treatment_type_code , treatments.dog_id , treatments.date_of_treatment , treatments.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.first_name",
      "professionals.professional_id",
      "professionals.last_name",
      "professionals.street",
      "professionals.city",
      "professionals.*",
      "treatment_types.treatment_type_description",
      "treatment_types.treatment_type_code",
      "treatment_types.*",
      "treatments.professional_id",
      "treatments.treatment_id",
      "treatments.treatment_type_code",
      "treatments.dog_id",
      "treatments.date_of_treatment",
      "treatments.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "What are each professional's first name and description of the treatment they have performed? | professionals : professionals.first_name , professionals.last_name , professionals.professional_id , professionals.role_code , professionals.street , professionals.* | treatment_types : treatment_types.treatment_type_description , treatment_types.treatment_type_code , treatment_types.* | treatments : treatments.professional_id , treatments.treatment_id , treatments.treatment_type_code , treatments.dog_id , treatments.date_of_treatment , treatments.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.first_name",
      "professionals.last_name",
      "professionals.professional_id",
      "professionals.role_code",
      "professionals.street",
      "professionals.*",
      "treatment_types.treatment_type_description",
      "treatment_types.treatment_type_code",
      "treatment_types.*",
      "treatments.professional_id",
      "treatments.treatment_id",
      "treatments.treatment_type_code",
      "treatments.dog_id",
      "treatments.date_of_treatment",
      "treatments.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "How many singers are there? | singer : singer.name , singer.singer_id , singer.net_worth_millions , singer.citizenship , singer.birth_year , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.name",
      "singer.singer_id",
      "singer.net_worth_millions",
      "singer.citizenship",
      "singer.birth_year",
      "singer.*",
      "song.title",
      "song.sales",
      "song.song_id",
      "song.singer_id",
      "song.highest_position",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "What is the count of singers? | singer : singer.name , singer.net_worth_millions , singer.citizenship , singer.singer_id , singer.birth_year , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.name",
      "singer.net_worth_millions",
      "singer.citizenship",
      "singer.singer_id",
      "singer.birth_year",
      "singer.*",
      "song.title",
      "song.sales",
      "song.song_id",
      "song.singer_id",
      "song.highest_position",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "List the name of singers in ascending order of net worth. | singer : singer.net_worth_millions , singer.name , singer.citizenship , singer.singer_id , singer.birth_year , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.net_worth_millions",
      "singer.name",
      "singer.citizenship",
      "singer.singer_id",
      "singer.birth_year",
      "singer.*",
      "song.title",
      "song.sales",
      "song.song_id",
      "song.singer_id",
      "song.highest_position",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "What are the names of singers ordered by ascending net worth? | singer : singer.net_worth_millions , singer.name , singer.citizenship , singer.singer_id , singer.birth_year , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.net_worth_millions",
      "singer.name",
      "singer.citizenship",
      "singer.singer_id",
      "singer.birth_year",
      "singer.*",
      "song.title",
      "song.sales",
      "song.song_id",
      "song.singer_id",
      "song.highest_position",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "What are the birth year and citizenship of singers? | singer : singer.birth_year , singer.citizenship , singer.name , singer.singer_id , singer.net_worth_millions , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.birth_year",
      "singer.citizenship",
      "singer.name",
      "singer.singer_id",
      "singer.net_worth_millions",
      "singer.*",
      "song.title",
      "song.sales",
      "song.song_id",
      "song.singer_id",
      "song.highest_position",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "What are the birth years and citizenships of the singers? | singer : singer.birth_year , singer.citizenship , singer.name , singer.singer_id , singer.net_worth_millions , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.birth_year",
      "singer.citizenship",
      "singer.name",
      "singer.singer_id",
      "singer.net_worth_millions",
      "singer.*",
      "song.title",
      "song.sales",
      "song.song_id",
      "song.singer_id",
      "song.highest_position",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "List the name of singers whose citizenship is not \"France\". | singer : singer.citizenship ( France ) , singer.name , singer.singer_id , singer.birth_year , singer.net_worth_millions , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.citizenship",
      "singer.name",
      "singer.singer_id",
      "singer.birth_year",
      "singer.net_worth_millions",
      "singer.*",
      "song.title",
      "song.sales",
      "song.song_id",
      "song.singer_id",
      "song.highest_position",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "What are the names of the singers who are not French citizens? | singer : singer.name , singer.citizenship , singer.singer_id , singer.birth_year , singer.net_worth_millions , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.name",
      "singer.citizenship",
      "singer.singer_id",
      "singer.birth_year",
      "singer.net_worth_millions",
      "singer.*",
      "song.title",
      "song.sales",
      "song.song_id",
      "song.singer_id",
      "song.highest_position",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "Show the name of singers whose birth year is either 1948 or 1949? | singer : singer.birth_year , singer.name , singer.citizenship , singer.singer_id , singer.net_worth_millions , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.birth_year",
      "singer.name",
      "singer.citizenship",
      "singer.singer_id",
      "singer.net_worth_millions",
      "singer.*",
      "song.title",
      "song.sales",
      "song.song_id",
      "song.singer_id",
      "song.highest_position",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "What are the names of the singers whose birth years are either 1948 or 1949? | singer : singer.birth_year , singer.name , singer.citizenship , singer.singer_id , singer.net_worth_millions , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.birth_year",
      "singer.name",
      "singer.citizenship",
      "singer.singer_id",
      "singer.net_worth_millions",
      "singer.*",
      "song.title",
      "song.sales",
      "song.song_id",
      "song.singer_id",
      "song.highest_position",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "What is the name of the singer with the largest net worth? | singer : singer.net_worth_millions , singer.name , singer.citizenship , singer.singer_id , singer.birth_year , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.net_worth_millions",
      "singer.name",
      "singer.citizenship",
      "singer.singer_id",
      "singer.birth_year",
      "singer.*",
      "song.title",
      "song.sales",
      "song.song_id",
      "song.singer_id",
      "song.highest_position",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "What is the name of the singer who is worth the most? | singer : singer.net_worth_millions , singer.name , singer.citizenship , singer.singer_id , singer.birth_year , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.net_worth_millions",
      "singer.name",
      "singer.citizenship",
      "singer.singer_id",
      "singer.birth_year",
      "singer.*",
      "song.title",
      "song.sales",
      "song.song_id",
      "song.singer_id",
      "song.highest_position",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "Show different citizenship of singers and the number of singers of each citizenship. | singer : singer.citizenship , singer.name , singer.singer_id , singer.birth_year , singer.net_worth_millions , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.citizenship",
      "singer.name",
      "singer.singer_id",
      "singer.birth_year",
      "singer.net_worth_millions",
      "singer.*",
      "song.title",
      "song.sales",
      "song.song_id",
      "song.singer_id",
      "song.highest_position",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "For each citizenship, how many singers are from that country? | singer : singer.citizenship , singer.name , singer.singer_id , singer.birth_year , singer.net_worth_millions , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.citizenship",
      "singer.name",
      "singer.singer_id",
      "singer.birth_year",
      "singer.net_worth_millions",
      "singer.*",
      "song.title",
      "song.sales",
      "song.song_id",
      "song.singer_id",
      "song.highest_position",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "Please show the most common citizenship of singers. | singer : singer.citizenship , singer.name , singer.singer_id , singer.birth_year , singer.net_worth_millions , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.citizenship",
      "singer.name",
      "singer.singer_id",
      "singer.birth_year",
      "singer.net_worth_millions",
      "singer.*",
      "song.title",
      "song.sales",
      "song.song_id",
      "song.singer_id",
      "song.highest_position",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "What is the most common singer citizenship ? | singer : singer.citizenship , singer.name , singer.singer_id , singer.birth_year , singer.net_worth_millions , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.citizenship",
      "singer.name",
      "singer.singer_id",
      "singer.birth_year",
      "singer.net_worth_millions",
      "singer.*",
      "song.title",
      "song.sales",
      "song.song_id",
      "song.singer_id",
      "song.highest_position",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "Show different citizenships and the maximum net worth of singers of each citizenship. | singer : singer.net_worth_millions , singer.citizenship , singer.name , singer.singer_id , singer.birth_year , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.net_worth_millions",
      "singer.citizenship",
      "singer.name",
      "singer.singer_id",
      "singer.birth_year",
      "singer.*",
      "song.title",
      "song.sales",
      "song.song_id",
      "song.singer_id",
      "song.highest_position",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "For each citizenship, what is the maximum net worth? | singer : singer.net_worth_millions , singer.citizenship , singer.name , singer.singer_id , singer.birth_year , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.net_worth_millions",
      "singer.citizenship",
      "singer.name",
      "singer.singer_id",
      "singer.birth_year",
      "singer.*",
      "song.title",
      "song.sales",
      "song.song_id",
      "song.singer_id",
      "song.highest_position",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "Show titles of songs and names of singers. | singer : singer.name , singer.singer_id , singer.citizenship , singer.birth_year , singer.net_worth_millions , singer.* | song : song.title , song.sales , song.song_id , song.highest_position , song.singer_id , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.name",
      "singer.singer_id",
      "singer.citizenship",
      "singer.birth_year",
      "singer.net_worth_millions",
      "singer.*",
      "song.title",
      "song.sales",
      "song.song_id",
      "song.highest_position",
      "song.singer_id",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "What are the song titles and singer names? | singer : singer.name , singer.singer_id , singer.citizenship , singer.birth_year , singer.net_worth_millions , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.name",
      "singer.singer_id",
      "singer.citizenship",
      "singer.birth_year",
      "singer.net_worth_millions",
      "singer.*",
      "song.title",
      "song.sales",
      "song.song_id",
      "song.singer_id",
      "song.highest_position",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "Show distinct names of singers that have songs with sales more than 300000. | singer : singer.name , singer.singer_id , singer.citizenship , singer.birth_year , singer.net_worth_millions , singer.* | song : song.sales , song.singer_id , song.title , song.song_id , song.highest_position , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.name",
      "singer.singer_id",
      "singer.citizenship",
      "singer.birth_year",
      "singer.net_worth_millions",
      "singer.*",
      "song.sales",
      "song.singer_id",
      "song.title",
      "song.song_id",
      "song.highest_position",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "what are the different names of the singers that have sales more than 300000? | song : song.sales , song.singer_id , song.title , song.song_id , song.highest_position , song.* | singer : singer.name , singer.singer_id , singer.citizenship , singer.birth_year , singer.net_worth_millions , singer.*",
    "output_sequence": " | ",
    "tc_original": [
      "song.sales",
      "song.singer_id",
      "song.title",
      "song.song_id",
      "song.highest_position",
      "song.*",
      "singer.name",
      "singer.singer_id",
      "singer.citizenship",
      "singer.birth_year",
      "singer.net_worth_millions",
      "singer.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "Show the names of singers that have more than one song. | singer : singer.name , singer.singer_id , singer.citizenship , singer.birth_year , singer.net_worth_millions , singer.* | song : song.singer_id , song.title , song.sales , song.song_id , song.highest_position , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.name",
      "singer.singer_id",
      "singer.citizenship",
      "singer.birth_year",
      "singer.net_worth_millions",
      "singer.*",
      "song.singer_id",
      "song.title",
      "song.sales",
      "song.song_id",
      "song.highest_position",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "What are the names of the singers that have more than one songs? | singer : singer.name , singer.singer_id , singer.citizenship , singer.birth_year , singer.net_worth_millions , singer.* | song : song.singer_id , song.title , song.sales , song.song_id , song.highest_position , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.name",
      "singer.singer_id",
      "singer.citizenship",
      "singer.birth_year",
      "singer.net_worth_millions",
      "singer.*",
      "song.singer_id",
      "song.title",
      "song.sales",
      "song.song_id",
      "song.highest_position",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "Show the names of singers and the total sales of their songs. | song : song.sales , song.title , song.singer_id , song.song_id , song.highest_position , song.* | singer : singer.name , singer.singer_id , singer.citizenship , singer.birth_year , singer.net_worth_millions , singer.*",
    "output_sequence": " | ",
    "tc_original": [
      "song.sales",
      "song.title",
      "song.singer_id",
      "song.song_id",
      "song.highest_position",
      "song.*",
      "singer.name",
      "singer.singer_id",
      "singer.citizenship",
      "singer.birth_year",
      "singer.net_worth_millions",
      "singer.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "For each singer name, what is the total sales for their songs? | singer : singer.name , singer.singer_id , singer.citizenship , singer.birth_year , singer.net_worth_millions , singer.* | song : song.sales , song.singer_id , song.title , song.song_id , song.highest_position , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.name",
      "singer.singer_id",
      "singer.citizenship",
      "singer.birth_year",
      "singer.net_worth_millions",
      "singer.*",
      "song.sales",
      "song.singer_id",
      "song.title",
      "song.song_id",
      "song.highest_position",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "List the name of singers that do not have any song. | singer : singer.name , singer.citizenship , singer.singer_id , singer.net_worth_millions , singer.birth_year , singer.* | song : song.singer_id , song.title , song.sales , song.song_id , song.highest_position , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.name",
      "singer.citizenship",
      "singer.singer_id",
      "singer.net_worth_millions",
      "singer.birth_year",
      "singer.*",
      "song.singer_id",
      "song.title",
      "song.sales",
      "song.song_id",
      "song.highest_position",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "What is the sname of every sing that does not have any song? | singer : singer.name , singer.singer_id , singer.citizenship , singer.birth_year , singer.net_worth_millions , singer.* | song : song.singer_id , song.title , song.sales , song.song_id , song.highest_position , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.name",
      "singer.singer_id",
      "singer.citizenship",
      "singer.birth_year",
      "singer.net_worth_millions",
      "singer.*",
      "song.singer_id",
      "song.title",
      "song.sales",
      "song.song_id",
      "song.highest_position",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "Show the citizenship shared by singers with birth year before 1945 and after 1955. | singer : singer.birth_year , singer.citizenship , singer.name , singer.singer_id , singer.net_worth_millions , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.birth_year",
      "singer.citizenship",
      "singer.name",
      "singer.singer_id",
      "singer.net_worth_millions",
      "singer.*",
      "song.title",
      "song.sales",
      "song.song_id",
      "song.singer_id",
      "song.highest_position",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955? | singer : singer.birth_year , singer.citizenship , singer.name , singer.singer_id , singer.net_worth_millions , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.birth_year",
      "singer.citizenship",
      "singer.name",
      "singer.singer_id",
      "singer.net_worth_millions",
      "singer.*",
      "song.title",
      "song.sales",
      "song.song_id",
      "song.singer_id",
      "song.highest_position",
      "song.*"
    ]
  },
  {
    "db_id": "real_estate_properties",
    "input_sequence": "How many available features are there in total? | other_available_features : other_available_features.feature_id , other_available_features.feature_name , other_available_features.feature_type_code , other_available_features.feature_description , other_available_features.* | ref_feature_types : ref_feature_types.feature_type_code , ref_feature_types.feature_type_name , ref_feature_types.* | other_property_features : other_property_features.feature_id , other_property_features.property_id , other_property_features.property_feature_description , other_property_features.* | properties : properties.date_sold , properties.property_name , properties.property_address , properties.hse_feature_1 , properties.hse_feature_2 , properties.*",
    "output_sequence": " | ",
    "tc_original": [
      "other_available_features.feature_id",
      "other_available_features.feature_name",
      "other_available_features.feature_type_code",
      "other_available_features.feature_description",
      "other_available_features.*",
      "ref_feature_types.feature_type_code",
      "ref_feature_types.feature_type_name",
      "ref_feature_types.*",
      "other_property_features.feature_id",
      "other_property_features.property_id",
      "other_property_features.property_feature_description",
      "other_property_features.*",
      "properties.date_sold",
      "properties.property_name",
      "properties.property_address",
      "properties.hse_feature_1",
      "properties.hse_feature_2",
      "properties.*"
    ]
  },
  {
    "db_id": "real_estate_properties",
    "input_sequence": "What is the feature type name of feature AirCon? | other_available_features : other_available_features.feature_name ( AirCon ) , other_available_features.feature_type_code , other_available_features.feature_id , other_available_features.feature_description , other_available_features.* | ref_feature_types : ref_feature_types.feature_type_name , ref_feature_types.feature_type_code , ref_feature_types.* | other_property_features : other_property_features.feature_id , other_property_features.property_id , other_property_features.property_feature_description , other_property_features.* | properties : properties.property_name , properties.property_address , properties.property_id , properties.property_type_code , properties.date_on_market , properties.*",
    "output_sequence": " | ",
    "tc_original": [
      "other_available_features.feature_name",
      "other_available_features.feature_type_code",
      "other_available_features.feature_id",
      "other_available_features.feature_description",
      "other_available_features.*",
      "ref_feature_types.feature_type_name",
      "ref_feature_types.feature_type_code",
      "ref_feature_types.*",
      "other_property_features.feature_id",
      "other_property_features.property_id",
      "other_property_features.property_feature_description",
      "other_property_features.*",
      "properties.property_name",
      "properties.property_address",
      "properties.property_id",
      "properties.property_type_code",
      "properties.date_on_market",
      "properties.*"
    ]
  },
  {
    "db_id": "real_estate_properties",
    "input_sequence": "Show the property type descriptions of properties belonging to that code. | ref_property_types : ref_property_types.property_type_description , ref_property_types.property_type_code , ref_property_types.* | properties : properties.property_type_code , properties.property_name , properties.property_id , properties.date_sold , properties.property_address , properties.* | other_property_features : other_property_features.property_id , other_property_features.feature_id , other_property_features.property_feature_description , other_property_features.* | other_available_features : other_available_features.feature_description , other_available_features.feature_id , other_available_features.feature_type_code , other_available_features.feature_name , other_available_features.*",
    "output_sequence": " | ",
    "tc_original": [
      "ref_property_types.property_type_description",
      "ref_property_types.property_type_code",
      "ref_property_types.*",
      "properties.property_type_code",
      "properties.property_name",
      "properties.property_id",
      "properties.date_sold",
      "properties.property_address",
      "properties.*",
      "other_property_features.property_id",
      "other_property_features.feature_id",
      "other_property_features.property_feature_description",
      "other_property_features.*",
      "other_available_features.feature_description",
      "other_available_features.feature_id",
      "other_available_features.feature_type_code",
      "other_available_features.feature_name",
      "other_available_features.*"
    ]
  },
  {
    "db_id": "real_estate_properties",
    "input_sequence": "What are the names of properties that are either houses or apartments with more than 1 room? | properties : properties.property_name , properties.room_count , properties.property_type_code ( Apartment , House ) , properties.property_id , properties.property_address , properties.* | ref_property_types : ref_property_types.property_type_code ( Apartment , House ) , ref_property_types.property_type_description , ref_property_types.* | other_property_features : other_property_features.property_id , other_property_features.feature_id , other_property_features.property_feature_description , other_property_features.* | other_available_features : other_available_features.feature_name , other_available_features.feature_description , other_available_features.feature_id , other_available_features.feature_type_code , other_available_features.*",
    "output_sequence": " | ",
    "tc_original": [
      "properties.property_name",
      "properties.room_count",
      "properties.property_type_code",
      "properties.property_id",
      "properties.property_address",
      "properties.*",
      "ref_property_types.property_type_code",
      "ref_property_types.property_type_description",
      "ref_property_types.*",
      "other_property_features.property_id",
      "other_property_features.feature_id",
      "other_property_features.property_feature_description",
      "other_property_features.*",
      "other_available_features.feature_name",
      "other_available_features.feature_description",
      "other_available_features.feature_id",
      "other_available_features.feature_type_code",
      "other_available_features.*"
    ]
  }
]